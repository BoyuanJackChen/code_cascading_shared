[
    {
        "number": 0,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 1583,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses.\n    Your goal is to separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Remove spaces from input string\n    paren_string = paren_string.replace(' ', '')\n\n    # Initialize variables for keeping track of groups and current group\n    groups = []\n    current_group = ''\n    current_depth = 0\n\n    # Iterate over characters in input string\n    for char in paren_string:\n        # If character is open paren, increment current depth and add it to current group\n        if char == '(':\n            current_depth += 1\n            current_group += char\n        # If character is close paren, decrement current depth and add it to current group\n        elif char == ')':\n            current_depth -= 1\n            current_group += char\n            # If current depth is 0, add current group to groups list and reset current group\n            if current_depth == 0:\n                groups.append(current_group)\n                current_group = ''\n\n    return groups\n",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 2124,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 922,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False, \"Invalid output for input [1, 2, 3]\"",
        "num_ids": 1127,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    n = len(numbers)\n    if n == 0:\n        return 0.0\n\n    mean = sum(numbers) / n\n    abs_diffs = [abs(x - mean) for x in numbers]\n    return sum(abs_diffs) / n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 1515,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
        "num_ids": 1412,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def max_depth(s: str) -> int:\n        max_d = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_d = max(max_d, depth)\n            elif c == ')':\n                depth -= 1\n        return max_d\n\n    groups = paren_string.split()\n    return [max_depth(g) for g in groups]\n",
        "test": "assert parse_nested_parens('') == []",
        "num_ids": 1901,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    if not numbers:\n        return (0, 1)\n\n    total_sum = 0\n    total_product = 1\n\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n\n    return (total_sum, total_product)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1525,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far = float('-inf')\n    res = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        res.append(max_so_far)\n    return res\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 1527,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(1, len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1277,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    res = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            res += '0'\n        else:\n            res += '1'\n    return res\n",
        "test": "assert string_xor(\"010\", \"110\") == \"100\"",
        "num_ids": 1587,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    longest_string = None\n    longest_length = 0\n    \n    for string in strings:\n        if len(string) > longest_length:\n            longest_string = string\n            longest_length = len(string)\n            \n    return longest_string\n",
        "test": "assert longest([]) == None",
        "num_ids": 1181,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1035,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]",
        "num_ids": 854,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert string to lowercase and convert it to a set to get distinct characters\n    return len(set(string.lower()))\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 986,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n    \n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Dictionary mapping each note to its duration in beats\n    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n    # Initialize empty list to store durations of each note\n    note_durations = []\n    # Split the input string into a list of notes\n    notes_list = music_string.split()\n    # Iterate over each note in the list and append its duration to the note_durations list\n    for note in notes_list:\n        note_durations.append(note_dict[note])\n    return note_durations\n",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 3560,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    number_to_index = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_to_index[x])\n    return ' '.join(numbers_list)\n",
        "test": "assert sort_numbers('') == ''",
        "num_ids": 1724,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Sort the list of numbers\n    sorted_numbers = sorted(numbers)\n    # Initialize the minimum difference and the pair of numbers\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    # Iterate through the sorted list and calculate the difference between adjacent numbers\n    for i in range(len(sorted_numbers) - 1):\n        diff = abs(sorted_numbers[i+1] - sorted_numbers[i])\n        # If the difference is smaller than the current minimum, update the minimum and the pair\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])\n    return closest_pair",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 2514,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    diff = max_num - min_num\n    \n    return [(x - min_num) / diff for x in numbers]\n\nif __name__ == \"__main__\":\n    print(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 2290,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n",
        "test": "assert filter_integers([]) == []",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)",
        "test": "assert strlen('') == 0",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. \n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    # Try to divide by 2 until it's no longer a factor\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    \n    # Check odd numbers up to the square root of n\n    i = 3\n    while i <= int(n**0.5) + 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 2\n    \n    # If n is still greater than 2, it must be prime\n    if n > 2:\n        factors.append(n)\n    \n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 1563,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n    return result\n",
        "test": "assert remove_duplicates([]) == []",
        "num_ids": 1190,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase. \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char.lower()\n    return flipped_string",
        "test": "assert flip_case(\"Hello\") == \"hELLO\"",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1168,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 1471,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(2) == True",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial. \n    find_zero find x such that poly(x) = 0. \n    find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients \n    and largest non zero coefficient as it guarantees \n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"Polynomial cannot have zero as leading coefficient\")\n    \n    # Newton-Raphson method\n    x = 1 # initial guess\n    while True:\n        f = poly(xs, x)\n        fp = poly(xs[1:], x)\n        if fp == 0:\n            raise ValueError(\"No solution found (derivative is zero at initial guess)\")\n        x = x - f/fp\n        if abs(poly(xs, x)) < 1e-6:\n            return x\n        ",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 1938,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sort_third(l: list):\n    # create a copy of the input list\n    l_copy = l.copy()\n    \n    # extract the values at the indices that are divisible by 3\n    third_values = [l_copy[i] for i in range(len(l_copy)) if i % 3 == 0]\n    \n    # sort those values\n    third_values.sort()\n    \n    # replace the values in the copied list with the sorted ones\n    for i in range(len(l_copy)):\n        if i % 3 == 0:\n            l_copy[i] = third_values.pop(0)\n    \n    # return the modified list\n    return l_copy\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1986,
        "indeed": true
    },
    {
        "number": 34,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n",
        "test": "assert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1000,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1104,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Get the even and odd elements of the list\n    even_elements = l[::2]\n    odd_elements = l[1::2]\n    # Sort the even elements\n    sorted_even_elements = sorted(even_elements)\n    # Create a new list with the sorted even elements and the original odd elements\n    sorted_list = [sorted_even_elements[i//2] if i % 2 == 0 else odd_elements[(i-1)//2] for i in range(len(l))]\n    return sorted_list\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1872,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse order. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\nif __name__ == \"__main__\":\n    encoded_string = encode_cyclic(\"abcdefghijklmnopqrstuvwxyz\")\n    print(encoded_string)\n    decoded_string = decode_cyclic(encoded_string)\n    print(decoded_string)",
        "test": "assert decode_cyclic(\"\") == \"\"",
        "num_ids": 1480,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, else False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef prime_fib(n):\n    \"\"\"\n    Returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 0\n    i = 0\n    while count < n:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib\n        i += 1\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1853,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Initialize the number of collisions to zero\n    count = 0\n\n    # Iterate over the two sets of cars\n    for i in range(1, n + 1):\n        # Calculate the positions of the two cars\n        left_car_position = i\n        right_car_position = 2 * n - i\n\n        # If the two cars collide, increment the count\n        if left_car_position == right_car_position:\n            count += 1\n\n    return count",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 1636,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1324,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n\n    # create an empty dictionary to store the indices of the elements in the list\n    indices = {}\n\n    # iterate through the list of integers\n    for i in range(len(l)):\n        # check if the negative of the current integer is already in the dictionary\n        if -l[i] in indices:\n            # if it is, return True\n            return True\n        else:\n            # if it's not, add the current integer and its index to the dictionary\n            indices[l[i]] = i\n\n    # if no pair of integers sums to zero, return False\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 2, 3, 7]) == False",
        "num_ids": 1613,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1195,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(3, 4) == 6.0",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        return fib[n]\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2])/2\n    else:\n        return l[n//2]",
        "test": "assert median([1, 1, 1, 1, 1]) == 1",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Convert string to lowercase\n    text = text.lower()\n    \n    # Check if reversed string is equal to original string\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 919,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 1047,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([char for char in text if char.lower() not in vowels])\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 937,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return set(s0) == set(s1)\n",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 815,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n+1):\n            c = a + b\n            a, b = b, c\n        return b\n",
        "test": "assert fib(10) == 55 # check for fib(10)",
        "num_ids": 847,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 1228,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    # Check if list is monotonically increasing or decreasing\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    else:\n        return False\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 1259,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    \n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1.intersection(set2)\n    common_list = list(common_set)\n    common_list.sort()\n    return common_list\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1571,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 885,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 1030,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 1351,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)",
        "test": "assert fibfib(1) == 0",
        "num_ids": 1357,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 'aeiouy'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if char.lower() == 'y':\n                break\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1203,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. \n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    n = len(x_str)\n    if shift > n:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:n-shift]",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Add the ASCII code of the uppercase character to the sum\n            sum += ord(char)\n\n    # Return the sum of the upper characters\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 1014,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # Extracting the numbers of apples and oranges from the string\n    apple_num = int(s.split()[0])\n    orange_num = int(s.split()[-2])\n\n    # Calculating the number of mango fruits\n    mango_num = n - apple_num - orange_num\n\n    return mango_num\n",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 2153,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    # Initialize variables\n    smallest_value = None\n    smallest_index = None\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is even and smaller than the current smallest value\n        if arr[i] % 2 == 0 and (smallest_value is None or arr[i] < smallest_value):\n            smallest_value = arr[i]\n            smallest_index = i\n\n    # If smallest_value is not None, return the result\n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []",
        "test": "assert pluck([4,2,3]) == [2, 1], \"pluck([4,2,3]) should return [2, 1]\"",
        "num_ids": 2775,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list. \n    If no such a value exist, return -1. \n    Examples: \n        search([4, 1, 2, 2, 3, 1]) == 2 \n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 \n        search([5, 5, 4, 4, 4]) == -1 \n    '''\n    # create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # find the maximum integer greater than zero whose frequency is greater than or equal to its value\n    max_num = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num and num > max_num:\n            max_num = num\n    \n    return max_num\n",
        "test": "assert search([4, 1, 2, 2, 3, 1]) == 2",
        "num_ids": 1933,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    \n    result = []\n    while lst:\n        # add minimum value to result\n        result.append(min(lst))\n        lst.remove(min(lst))\n        \n        # add maximum value to result (if any)\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    \n    return result\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 1717,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    if a + b > c and b + c > a and c + a > b:\n        # calculate semi-perimeter\n        s = (a + b + c) / 2\n        # calculate area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # round the area to 2 decimal points and return it\n        return round(area, 2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 1713,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 1808,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 1631,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    def total_chars(lst):\n        return sum(len(s) for s in lst)\n\n    if total_chars(lst1) < total_chars(lst2):\n        return lst1\n    elif total_chars(lst1) > total_chars(lst2):\n        return lst2\n    else:\n        return lst1",
        "test": "assert total_match([], []) == []",
        "num_ids": 2127,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 6:\n        return False\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False",
        "test": "assert is_multiply_prime(1) == False  # Test case when the input is not a multiplication of 3 prime numbers",
        "num_ids": 1598,
        "indeed": true
    },
    {
        "number": 76,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    # Check if x is a power of n\n    if x == 1:\n        return True\n    power = 1\n    while power < x:\n        power = power * n\n    return power == x\n",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    else:\n        for i in range(1, abs(a)+1):\n            if i**3 == abs(a):\n                return True\n        return False\n",
        "test": "assert iscube(1) == True",
        "num_ids": 1045,
        "indeed": true
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    primes = [2, 3, 5, 7, 0xB, 0xD]  # 0xB and 0xD are the hexadecimal notation for decimal 11 and 13\n    count = 0\n\n    for char in num:\n        digit = int(char, 16)  # Convert hexadecimal digit to decimal\n        if digit in primes:\n            count += 1\n\n    return count\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 2768,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert decimal number to binary format.\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"",
        "test": "assert decimal_to_binary(0) == \"db0db\"",
        "num_ids": 1136,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n",
        "test": "assert is_happy('a') == False # Testcase for string with length less than 3",
        "num_ids": 1450,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading. The only problem is,\n    she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n\n        GPA           | Letter grade\n          4.0                  A+\n      > 3.7                  A\n      > 3.3                  A-\n      > 3.0                  B+\n      > 2.7                  B\n      > 2.3                  B-\n      > 2.0                  C+\n      > 1.7                  C\n      > 1.3                  C-\n      > 1.0                  D+\n      > 0.7                  D\n      > 0.0                  D-\n          0.0                  E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0]) == ['A+']",
        "num_ids": 3433,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    length = len(string)\n    if is_prime(length):\n        return True\n    else:\n        return False\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1  # There is only one 1-digit positive integer that starts and ends with 1.",
        "num_ids": 1844,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solve(N):\n    \"\"\"\n    Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 10\n    return bin(binary_sum)[2:]\n",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 1508,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
        "test": "assert add([4, 2, 6, 7]) == 2 ",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. \n    Note: You should keep the order of words and blank spaces in the sentence. \n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n    return ' '.join(ordered_words)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 1596,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\n    Examples:\n    get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    if result:\n        result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row([], 1) == []",
        "num_ids": 2006,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        return array\n    \n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 2177,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places. \n    For example: \n    encrypt('hi') returns 'lm' \n    encrypt('asdfghjkl') returns 'ewhjklnop' \n    encrypt('gf') returns 'kj' \n    encrypt('et') returns 'ix' \n    \"\"\"\n    \n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Create a dictionary to store the shifted alphabet\n    shifted_alphabet = {}\n    \n    # Rotate the alphabet by two multiplied by two places\n    for i in range(len(alphabet)):\n        shifted_alphabet[alphabet[i]] = alphabet[(i + 2*2) % 26]\n        \n    # Create an empty string to store the encrypted text\n    encrypted_text = ''\n    \n    # Loop through the input string and replace each letter with its corresponding shifted letter\n    for char in s:\n        if char in alphabet:\n            encrypted_text += shifted_alphabet[char]\n        else:\n            encrypted_text += char\n            \n    return encrypted_text\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 1658,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n\n    first_min = second_min = float('inf')\n    for num in lst:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif first_min < num < second_min:\n            second_min = num\n\n    return second_min if second_min != float('inf') else None\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1401,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences that start with \"I\".\n    \"\"\"\n    sentences = S.split('. ')\n    boredoms = 0\n    for sentence in sentences:\n        if sentence.startswith('I '):\n            boredoms += 1\n    return boredoms\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1222,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def encode(message):\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if char.isupper():\n                new_message += chr(ord(char) - 21)\n            else:\n                new_message += chr(ord(char) + 21)\n        else:\n            if char.isupper():\n                new_message += char.lower()\n            else:\n                new_message += char.upper()\n    return new_message\n",
        "test": "assert encode('The quick brown fox jumps over the lazy dog') == 'tK LVWUOJRP GSVUOY HUFTGKDI'",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime(lst):\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return max_prime\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    max_prime = largest_prime(lst)\n    return sum_of_digits(max_prime)",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 3235,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_dict_case(dictionary):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if not dictionary:\n        return False\n\n    lower_case = True\n    upper_case = True\n\n    for key in dictionary.keys():\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n        if not key.islower():\n            lower_case = False\n        if not key.isupper():\n            upper_case = False\n\n    return lower_case or upper_case\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 2102,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n-2:\n            break\n    return primes",
        "test": "assert count_up_to(5) == [2,3]",
        "num_ids": 1900,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Get the unit digits of the numbers\n    unit_a = a % 10\n    unit_b = b % 10\n    \n    # Return the product of the unit digits\n    return unit_a * unit_b\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 1137,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "test": "assert closest_integer(\"15.3\") == 15",
        "num_ids": 1597,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. The number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(result[i-1] + 2)\n        else:\n            result.append(result[i-1] + 1)\n    return result\n",
        "test": "assert make_a_pile(4) == [4, 6, 8, 10]",
        "num_ids": 1597,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces.\n    Your task is to split the string into words and return an array of the words.\n    \"\"\"\n    # replace commas with spaces and split the string into words\n    words = s.replace(\",\", \" \").split()\n    return words\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1375,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Find the biggest even number in the range [x, y]\n    even_num = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            even_num = i\n    return even_num\n",
        "test": "assert choose_num(20, 20) == 20",
        "num_ids": 1268,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded = round(avg)\n    binary = bin(rounded)\n    return binary",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1436,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Convert the number to a string\n    # Loop through the string and check if it has any even digit\n    # If it has any even digit, skip that number\n    # If it doesn't have any even digit, add it to the result list\n    result = []\n    for num in x:\n        has_even_digit = False\n        str_num = str(num)\n        for digit in str_num:\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    result.sort()\n    return result\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1778,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def by_length(arr):\n    def num_to_word(num):\n        words = {\n            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\n        }\n        return words[num]\n\n    def is_strange_number(num):\n        return num < 1 or num > 9\n\n    sorted_arr = sorted(filter(lambda x: not is_strange_number(x), arr))\n    reversed_arr = sorted_arr[::-1]\n    result = list(map(num_to_word, reversed_arr))\n\n    return result",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
        "num_ids": 2660,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise. \n    i starts from 1. \n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). \n    Example: \n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # calculate factorial of i\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            # calculate sum of numbers from 1 to i\n            result.append(sum(range(1, i+1)))\n    return result\n",
        "test": "assert f(1) == [1]",
        "num_ids": 1712,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Returns True if the given number is a palindrome, False otherwise.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, returns a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1625,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        if digit_sum > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].\n    The numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n    \"\"\"\n\n    if not arr:\n        return True\n\n    for i in range(len(arr)):\n        j = i + 1\n        while j < len(arr):\n            if arr[i] > arr[j]:\n                return False\n            j += 1\n\n    return True\n",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False",
        "num_ids": 2502,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Count the number of even and odd elements in lst1\n    even_count = 0\n    odd_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # If there are no odd elements in lst1, return \"YES\"\n    if odd_count == 0:\n        return \"YES\"\n\n    # Create a dictionary to store the count of even and odd elements in lst2\n    lst2_counts = {\"even\": 0, \"odd\": 0}\n    for num in lst2:\n        if num % 2 == 0:\n            lst2_counts[\"even\"] += 1\n        else:\n            lst2_counts[\"odd\"] += 1\n\n    # If there are enough even elements in lst2 to make all elements of lst1 even, return \"YES\"\n    if lst2_counts[\"even\"] >= odd_count:\n        return \"YES\"\n\n    # Otherwise, return \"NO\"\n    return \"NO\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
        "num_ids": 2642,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    count_dict = {}\n    for letter in test.split():\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    max_count = max(count_dict.values())\n    result = {}\n    for letter, count in count_dict.items():\n        if count == max_count:\n            result[letter] = count\n    return result\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 2285,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Remove characters from s that are in c\n    s = ''.join([char for char in s if char not in c])\n    # Check if the result string is palindrome\n    is_palindrome = s == s[::-1]\n    # Return the result string and the palindrome check\n    return s, is_palindrome\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == (\"bcd\", False)",
        "num_ids": 1708,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    result = []\n    for i, string in enumerate(lst):\n        count = sum(int(digit) % 2 == 1 for digit in string)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {i+1} of the {i+1}nput.\")\n    return result\n",
        "test": "assert odd_count(['2468', '13579']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]",
        "num_ids": 2153,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return None\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        \n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum\n",
        "test": "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1539,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def max_fill(grid, bucket_capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Get the number of rows and columns in the grid\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    \n    # Initialize the number of fillings required to 0\n    num_fillings = 0\n    \n    # Loop through each row of the grid\n    for i in range(num_rows):\n        # Initialize the number of buckets filled in this row to 0\n        num_buckets_filled = 0\n        \n        # Loop through each column in this row\n        for j in range(num_cols):\n            # If there is water in this well, add it to the current bucket\n            if grid[i][j] == 1:\n                num_buckets_filled += 1\n            \n            # If the current bucket is full, empty it into the wells and reset the counter\n            if num_buckets_filled == bucket_capacity:\n                num_buckets_filled = 0\n                num_fillings += 1\n        \n        # If there are still water in the bucket at the end of the row, empty it into the wells\n        if num_buckets_filled > 0:\n            num_fillings += 1\n            num_buckets_filled = 0\n    \n    # Return the total number of fillings required\n    return num_fillings\n",
        "test": "assert max_fill([[1,1,1], [1,1,1], [1,1,1]], 3) == 3, \"Test 4 failed\"",
        "num_ids": 3107,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "test": "assert sort_array([10, 100, 1, 5, 2, 3, 4]) == [1, 2, 3, 4, 10, 5, 100]",
        "num_ids": 1852,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        count = 0\n        for char in word:\n            if char in consonants:\n                count += 1\n        return count\n\n    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 2213,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    word = list(word)\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"",
        "test": "assert get_closest_vowel(\"ab\") == \"\"",
        "num_ids": 1640,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n    \n    s1, s2 = lst\n    for i in range(len(s1)+1):\n        for j in range(len(s2)+1):\n            if is_balanced(s1[:i] + s2[:j] + s1[i:] + s2[j:]):\n                return 'Yes'\n    return 'No'\n",
        "test": "assert match_parens(['()(', ')']) == 'Yes'",
        "num_ids": 2112,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def maximum(arr, k):\n    # create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # create a list of unique elements in the array and their frequencies\n    unique_nums = [(num, freq[num]) for num in freq]\n    \n    # sort the unique elements in descending order by frequency\n    unique_nums.sort(key=lambda x: x[1], reverse=True)\n    \n    # create a sorted list of the k most frequent elements\n    result = []\n    for num, freq in unique_nums:\n        if len(result) >= k:\n            break\n        \n        # add the number to the result list and update its frequency\n        result.extend([num] * freq)\n    \n    # sort the result list\n    result.sort(reverse=True)\n    \n    return result[:k]\n",
        "test": "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
        "num_ids": 1778,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i%2 == 0 and lst[i]%2 != 0:\n            sum += lst[i]\n    return sum\n",
        "test": "assert solution([2, 4, 6, 8, 10]) == 0",
        "num_ids": 1213,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through the first k elements of the array\n    for i in range(k):\n        # Check if the number of digits is less than or equal to 2\n        if len(str(arr[i])) <= 2:\n            # Add the element to the sum\n            sum += arr[i]\n\n    # Return the sum\n    return sum\n",
        "test": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24 # sum of 21 + 3",
        "num_ids": 2208,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def collatz(n):\n    \"\"\"\n    Given a positive integer n, return the Collatz sequence as a list.\n    \"\"\"\n    sequence = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sequence\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    sequence = collatz(n)\n    odd_numbers = []\n    for number in sequence:\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    return sorted(odd_numbers)",
        "test": "assert get_odd_collatz(10) == [1, 5]",
        "num_ids": 2469,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid otherwise False.\n    \"\"\"\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid (1-12)\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid (1-31 for certain months, 1-30 for others, 1-29 for February)\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2 and (day < 1 or day > 29):\n        return False\n\n    # Check if the year is valid (positive integer)\n    if year < 0:\n        return False\n\n    # If all checks pass, the date is valid\n    return True\n",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 2545,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3  \n    '''\n    # Check if whitespace exists\n    if ' ' in txt:\n        return txt.split()\n    # Check if comma exists\n    elif ',' in txt:\n        return txt.split(',')\n    # Check if only lower-case letters exist\n    elif txt.isalpha() and txt.islower():\n        return len([char for char in txt if ord(char) % 2 == 1])\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) == 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        elif lst[i] == lst[i+1]:\n            count = 0\n            for j in range(i+1, len(lst)):\n                if lst[i] == lst[j]:\n                    count += 1\n            if count > 0:\n                return False\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1695,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def intersection(interval1, interval2):\n    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if not (interval1[0] <= interval2[1] and interval2[0] <= interval1[1]):\n        return \"NO\"\n    length = max(interval1[0], interval2[0]) - min(interval1[1], interval2[1])\n    if length <= 1:\n        return \"NO\"\n    for i in range(2, int(length**0.5)+1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"",
        "test": "assert intersection((0, 1), (2, 3)) == \"NO\"",
        "num_ids": 2390,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    \n    if len(arr) == 0:\n        return None\n    \n    sign = 1\n    for x in arr:\n        if x < 0:\n            sign *= -1\n        elif x == 0:\n            return 0\n    \n    return sign * sum(abs(x) for x in arr)\n",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 1487,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def minPath(grid, k):\n    def helper(grid, k, curr_path, visited, min_path):\n        if k == 0:\n            min_path.append(curr_path[:])\n            return\n\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if not visited[i][j]:\n                    if i > 0 and not visited[i - 1][j]:\n                        curr_path.append(grid[i - 1][j])\n                        visited[i - 1][j] = True\n                        helper(grid, k - 1, curr_path, visited, min_path)\n                        visited[i - 1][j] = False\n                        curr_path.pop()\n\n                    if j > 0 and not visited[i][j - 1]:\n                        curr_path.append(grid[i][j - 1])\n                        visited[i][j - 1] = True\n                        helper(grid, k - 1, curr_path, visited, min_path)\n                        visited[i][j - 1] = False\n                        curr_path.pop()\n\n                    if i < len(grid) - 1 and not visited[i + 1][j]:\n                        curr_path.append(grid[i + 1][j])\n                        visited[i + 1][j] = True\n                        helper(grid, k - 1, curr_path, visited, min_path)\n                        visited[i + 1][j] = False\n                        curr_path.pop()\n\n                    if j < len(grid[0]) - 1 and not visited[i][j + 1]:\n                        curr_path.append(grid[i][j + 1])\n                        visited[i][j + 1] = True\n                        helper(grid, k - 1, curr_path, visited, min_path)\n                        visited[i][j + 1] = False\n                        curr_path.pop()\n\n    def get_min_path(min_path):\n        min_path.sort(key=lambda x: (-len(x), x))\n        return min_path[0]\n\n    n = len(grid)\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    min_path = []\n    helper(grid, k, [], visited, min_path)\n    return get_min_path(min_path)",
        "test": "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1]",
        "num_ids": 3650,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tri(n):\n    \"\"\"\n    Returns a list of the first n+1 numbers of the Tribonacci sequence.\n    \"\"\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        trib = [1, 3, 2]\n        for i in range(3, n+1):\n            trib.append(trib[i-1] + trib[i-2] + trib[i-3] + 1)\n        return trib\n",
        "test": "assert tri(1) == [1, 3] # base case for n = 1",
        "num_ids": 1428,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    if has_odd:\n        return product\n    else:\n        return 0\n",
        "test": "assert digits(4) == 0",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append('[')\n        elif bracket == ']':\n            if not stack:\n                return False  # Unmatched closing bracket\n            stack.pop()\n    return False if not stack else True  # Stack should be empty if all brackets match\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    \n    # Round each element in the list to the upper int(Ceiling) first\n    lst = [int(x) + (x - int(x) > 0) for x in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    sum_of_squares = sum([x**2 for x in lst])\n    \n    return sum_of_squares\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 1385,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise. \n    Note: \"word\" is a group of characters separated by space.\n    \n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    \n    if len(txt) == 0:\n        return False\n    else:\n        last_char = txt[-1]\n        if last_char.isalpha() and txt[-2] == \" \":\n            return True\n        else:\n            return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False ",
        "num_ids": 1852,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    n = len(arr)\n    max_index = -1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_index = i\n            break\n\n    return max_index\n",
        "test": "assert can_arrange([1, 2, 3]) == -1",
        "num_ids": 1242,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return (largest_negative, smallest_positive)",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 1953,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Convert strings to floats if possible (using both . and , as decimal separators)\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n        try:\n            a = float(a)\n        except ValueError:\n            pass\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n        try:\n            b = float(b)\n        except ValueError:\n            pass\n\n    # Compare the values\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 2157,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 != 0:\n        return False\n    even_nums = [i for i in range(2, n) if i % 2 == 0]\n    for i in even_nums:\n        for j in even_nums:\n            for k in even_nums:\n                for l in even_nums:\n                    if i + j + k + l == n:\n                        return True\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False # should return False for n = 4",
        "num_ids": 1391,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    for j in range(1, n):\n        result *= j\n    return result\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace more than 2 consecutive underscores with a single -\n    text = text.replace('___', '-')\n    return text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1281,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if there are more than three digits in the file name\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n\n    # Check if there is exactly one dot in the file name\n    dot_count = file_name.count('.')\n    if dot_count != 1:\n        return 'No'\n\n    # Split the file name into two parts: before and after the dot\n    parts = file_name.split('.')\n\n    # Check if the first part is a valid string\n    if not (parts[0] and parts[0][0].isalpha()):\n        return 'No'\n\n    # Check if the second part is a valid extension\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # All checks passed, return 'Yes'\n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == 'Yes'",
        "num_ids": 2551,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    \n    return sum(lst)\n",
        "test": "assert sum_squares([1,2,3]) == 6",
        "num_ids": 1736,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence, the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 1420,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    num1, denom1 = map(int, x.split(\"/\"))\n    num2, denom2 = map(int, n.split(\"/\"))\n\n    numerator = num1 * num2\n    denominator = denom1 * denom2\n\n    if numerator % denominator == 0:\n        return True\n    else:\n        return False\n\nprint(simplify(\"1/5\", \"5/1\")) # True\nprint(simplify(\"1/6\", \"2/1\")) # False\nprint(simplify(\"7/10\", \"10/2\")) # False\n",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 1748,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits. \n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(num):\n        \"\"\"\n        Returns the sum of digits of a given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Sort the given list of integers based on the sum of their digits and index in original list.\n    sorted_nums = sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n\n    return sorted_nums\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1911,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count\n",
        "test": "assert specialFilter([0, 2, 4, 6, 8, 10]) == 0",
        "num_ids": 1474,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = []\n    for i in range(1, n+1):\n        a.append(i * i - i + 1)\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 1946,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    i1 = planets.index(planet1)\n    i2 = planets.index(planet2)\n    if i1 > i2:\n        i1, i2 = i2, i1\n    return tuple(planets[i1+1:i2])\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 1410,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return\n    the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should\n    return a list of strings in sorted order. You may assume that all words will have the same length.\n    For example: assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"] assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    sorted_words = sorted(even_length_words, key=lambda x: (len(x), x))\n    return sorted_words\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1862,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    x_or_y(7, 34, 12) == 34\n    x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 1273,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum += num ** 2\n    return sum\n",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 10",
        "num_ids": 1387,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def compare(game, guess):\n    \"\"\"\n    Compares the guesses with the actual scores and returns an array of absolute differences.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1798,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class.\n    The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    max_strength = -float('inf')\n    strongest_extension = None\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 2594,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n    \"\"\"\n\n    # Convert the string to list for rotation\n    a = list(a)\n\n    # Find all rotations of the second string\n    rotations = []\n    for i in range(len(b)):\n        rotations.append(b[i:] + b[:i])\n\n    # Check if any rotation is a substring of the first string\n    for rotation in rotations:\n        if \"\".join(rotation) in \"\".join(a):\n            return True\n\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 1320,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1249,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase. Restrictions: 1 <= num <= 1000\n    \n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    roman_numeral = ''\n    for value, numeral in roman_numeral_map.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral.lower()\n",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 2017,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 1225,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_max(words):\n    \"\"\"\n    This function accepts a list of strings as input and returns the string with maximum\n    number of unique characters. If multiple strings have maximum number of unique\n    characters, it returns the one which comes first in lexicographical order.\n    \"\"\"\n\n    # Find the string with maximum number of unique characters in the list\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        unique_chars = set(word)\n        count = len(unique_chars)\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count and word < max_word:\n            max_word = word\n\n    # Return the final result\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1626,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                        the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        return [number+need, remaining-need]\n    else:\n        return [number+remaining, 0]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 2348,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Initialize the expression string\n    expression = \"\"\n\n    # Iterate through the operand list and add each element to the expression string\n    for i in range(len(operand)):\n        expression += str(operand[i]) + \" \"\n\n        # Add the operator to the expression string, except for the last element\n        if i < len(operator):\n            expression += operator[i] + \" \"\n\n    # Evaluate the expression and return the result\n    return eval(expression)\n",
        "test": "assert do_algebra(['*', '*'], [2, 3, 4]) == 24",
        "num_ids": 2244,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    # Check if the string contains any letters\n    contains_letters = any(c.isalpha() for c in s)\n\n    if contains_letters:\n        # Reverse the case of letters and keep other characters as they are\n        result = ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)\n    else:\n        # Reverse the entire string\n        result = s[::-1]\n\n    return result",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 1535,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    md5_hash = hashlib.md5(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 1374,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    start = min(a, b)\n    end = max(a, b)\n    for i in range(start, end+1):\n        digits = [int(d) for d in str(i)]\n        if all(d % 2 == 0 for d in digits):\n            even_digits.append(i)\n    return sorted(even_digits)\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1844,
        "indeed": false
    }
]