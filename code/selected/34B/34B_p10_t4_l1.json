[
    {
        "number": 0,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 3327,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Remove all spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n\n    # Initialize an empty list to store the separated groups\n    groups = []\n\n    # Initialize variables to keep track of the current group and the level of nesting\n    current_group = ''\n    level = 0\n\n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an opening parenthesis, increment the level of nesting\n        if char == '(':\n            level += 1\n        # If the character is a closing parenthesis, decrement the level of nesting\n        elif char == ')':\n            level -= 1\n        # If the character is not a parenthesis, ignore it\n        else:\n            continue\n        # Add the current character to the current group\n        current_group += char\n        # If the level of nesting is zero (i.e., the current group is not nested within another group),\n        # add the current group to the list of groups and reset the current group to an empty string\n        if level == 0:\n            groups.append(current_group)\n            current_group = ''\n\n    return groups\n",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 3625,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1925,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1963,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    n = len(numbers)\n    mean = sum(numbers) / n\n    abs_diff = [abs(x - mean) for x in numbers]\n    mad = sum(abs_diff) / n\n    return mad\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 3117,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    if numbers:\n        result.append(numbers[-1])\n    return result\n",
        "test": "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
        "num_ids": 2689,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_depth(s: str, depth: int, max_depth: int) -> int:\n        if not s:\n            return max_depth\n        if s[0] == '(':\n            return find_max_depth(s[1:], depth + 1, max_depth)\n        elif s[0] == ')':\n            return find_max_depth(s[1:], depth - 1, max(max_depth, depth))\n        return max_depth\n\n    groups = paren_string.split()\n    return [find_max_depth(g, 0, 0) for g in groups]\n",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 3306,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 2321,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    s = 0\n    p = 1\n    for num in numbers:\n        s += num\n        p *= num\n    return (s, p)\n",
        "test": "assert sum_product([]) == (0, 1) # testing empty input",
        "num_ids": 2869,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 3278,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        suffix = string[i:]\n        prefix = string[:i]\n        if is_palindrome(suffix):\n            return prefix + suffix + prefix[::-1]\n\n    # If no palindrome is found, return the original string\n    return string\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2636,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 2522,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    \n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n            \n    return longest_string",
        "test": "assert longest([]) == None",
        "num_ids": 2049,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1783,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 1938,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Initialize an empty string to store the sequence\n    sequence = ''\n    # Iterate over range from 0 to n inclusive\n    for i in range(n+1):\n        # Append the current number to the sequence string\n        sequence += str(i) + ' '\n    # Return the sequence string with the last space removed\n    return sequence.rstrip()\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 1979,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 1839,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    music_list = music_string.split()\n    duration_list = [note_map[note] for note in music_list]\n    return duration_list\n",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 5076,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 2174,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)\n\n\nif __name__ == '__main__':\n    print(sort_numbers('three one five'))",
        "test": "assert sort_numbers('') == ''",
        "num_ids": 3029,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Convert the list to a sorted tuple, to make it easier to compare pairs of elements\n    sorted_numbers = tuple(sorted(numbers))\n    \n    # Initialize the minimum distance to a large value\n    min_distance = float('inf')\n    \n    # Initialize the two closest elements\n    closest_elements = None, None\n    \n    # Loop over all pairs of adjacent elements\n    for i in range(1, len(sorted_numbers)):\n        # Calculate the distance between the two elements\n        distance = abs(sorted_numbers[i] - sorted_numbers[i-1])\n        \n        # If the distance is smaller than the current minimum, update the minimum and the closest elements\n        if distance < min_distance:\n            min_distance = distance\n            closest_elements = sorted_numbers[i-1], sorted_numbers[i]\n    \n    # Return the closest elements in order\n    return closest_elements\n",
        "test": "assert find_closest_elements([1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) == (1.0, 1.0)",
        "num_ids": 5024,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    scale = max_value - min_value\n    if scale == 0:\n        return [0] * len(numbers)\n    return [(x - min_value) / scale for x in numbers]\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 4133,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 2166,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 1059,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "test": "assert largest_divisor(9) == 3",
        "num_ids": 1602,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 2577,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2544,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n",
        "test": "assert flip_case(\"Hello\") == \"hELLO\"",
        "num_ids": 1665,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 1455,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix. \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 2282,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n    # Using list comprehension to filter out positive numbers from the input list\n    positive_numbers = [num for num in l if num > 0]\n    return positive_numbers\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 3069,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 1468,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0. \n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees \n    a solution. \n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n    if not xs:\n        raise ValueError(\"Polynomial cannot be empty\")\n\n    # find x such that f(x) = a_n x^n + ... + a_1 x + a_0 = 0\n    # i.e. x^n = - (a_0 / a_n)\n    largest_coeff = max(xs)\n    if largest_coeff == 0:\n        raise ValueError(\"Polynomial must have non-zero largest coefficient\")\n\n    return -xs[0] / largest_coeff",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 4747,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 25,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def sort_third(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    sorted_l = sorted(l[::3])\n    result = []\n    for i, val in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted_l.pop(0))\n        else:\n            result.append(val)\n    return result",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 4387,
        "indeed": true
    },
    {
        "number": 34,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1885,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_num:\n            max_num = l[i]\n    return max_num\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 2346,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 2334,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = sorted([x for x in l if l.index(x) % 2 == 0])\n    return [evens.pop(0) if i % 2 == 0 else x for i, x in enumerate(l)]\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 3738,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"aaaaa\")) == \"aaaaa\"",
        "num_ids": 3280,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef fibonacci(n: int) -> int:\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n    return fibonacci(i-1)\n",
        "test": "assert prime_fib(1) == 2 # First Fibonacci number that is prime",
        "num_ids": 2907,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 3963,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.  n cars are driving left\n    to right;  simultaneously, a different set of n cars are driving right to left.  All cars\n    move in the same speed.  Two cars are said to collide when a car that's moving left to right\n    hits a car that's moving right to left.  However, the cars are infinitely sturdy and strong; as\n    a result, they continue moving in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Calculate the time for each car to reach the middle of the road\n    time_left_to_right = n / 2\n    time_right_to_left = n / 2\n\n    # Calculate the number of collisions\n    collisions = 0\n    for i in range(n):\n        if time_left_to_right <= time_right_to_left:\n            collisions += 1\n            time_left_to_right += n\n        else:\n            time_right_to_left += n\n\n    return collisions\n",
        "test": "assert car_race_collision(0) == 0 # no cars, no collisions",
        "num_ids": 3293,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 2336,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 3018,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2419,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5 # Test case 1",
        "num_ids": 1325,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n            a, b, c, d = b, c, d, e\n        return d\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 3006,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2-1] + sorted_l[n//2])/2\n    else:\n        return sorted_l[n//2]\n",
        "test": "assert median([1, 2, 3, 4, 5]) == 3",
        "num_ids": 2238,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = text.lower()  # Convert the string to lowercase\n    text = ''.join(ch for ch in text if ch.isalnum())  # Remove non-alphanumeric characters\n    return text == text[::-1]  # Compare the string with its reverse\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 1739,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 1938,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 2222,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1957,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1921,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 1218,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    # Convert both strings to sets of characters\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # Check if the sets are equal\n    if set_s0 == set_s1:\n        return True\n    else:\n        return False",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 2325,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(1) == 1",
        "num_ids": 1494,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    stack = []\n\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 1872,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = decreasing = True\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            increasing = False\n        elif l[i] < l[i+1]:\n            decreasing = False\n    return increasing or decreasing\n",
        "test": "assert monotonic([1, 2, 3, 4]) == True",
        "num_ids": 2585,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1.intersection(set2)\n    common_list = list(common_set)\n    common_list.sort()\n    return common_list\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 3240,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 1862,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 1956,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 2061,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    \n    # Calculate the derivative coefficients\n    der_coeffs = []\n    for i in range(1, len(xs)):\n        der_coeffs.append(i * xs[i])\n    \n    return der_coeffs\n",
        "test": "assert derivative([]) == []",
        "num_ids": 3180,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fibfib(n: int):\n    \"\"\"\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 3086,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def vowels_count(s):\n    \"\"\"\n    Counts the number of vowels in a given string s.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n    If the last character is 'y', it is also considered a vowel.\n    \"\"\"\n    vowels = set('aeiouy')\n    n = 0\n    for c in s:\n        if c.isalpha() and c.lower() in vowels:\n            if c.lower() == 'y' and s[-1].lower() == 'y':\n                n += 1\n            elif c.lower() != 'y':\n                n += 1\n    return n\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 2587,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\"\"\"\n    \n    # Convert integer to string\n    str_x = str(x)\n    \n    # Calculate the shift value\n    shift = shift % len(str_x)\n    \n    # Slice the string to shift the digits\n    result = str_x[-shift:] + str_x[:-shift]\n    \n    return result\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 2528,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 2232,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Extracting the numbers of apples and oranges from the input string\n    apple_count = int(s.split()[0])\n    orange_count = int(s.split()[3])\n    \n    # Calculating the number of mangoes\n    mango_count = n - apple_count - orange_count\n    \n    return mango_count",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 4694,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                    so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    even_nodes = [node for node in arr if node % 2 == 0]\n\n    if not even_nodes:\n        return []\n\n    smallest_even_value = min(even_nodes)\n    smallest_even_index = arr.index(smallest_even_value)\n\n    return [smallest_even_value, smallest_even_index]\n",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 5071,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    # create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # sort the keys in descending order\n    keys = sorted(freq_dict.keys(), reverse=True)\n\n    # iterate through the keys and return the first integer that satisfies the condition\n    for key in keys:\n        if key > 0 and freq_dict[key] >= key:\n            return key\n\n    # if no such integer exists, return -1\n    return -1\n",
        "test": "assert search([5, 5, 4, 4, 4]) == -1",
        "num_ids": 3881,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 3657,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 3530,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Check if the list is balanced\n    if q == q[::-1]:\n        # Check if the sum of elements is less than or equal to the maximum weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 3506,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 34,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n\n    return changes\n",
        "test": "assert smallest_change([1, 2, 3, 2, 1]) == 0",
        "num_ids": 3531,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    total_chars_lst1 = sum([len(s) for s in lst1])\n    total_chars_lst2 = sum([len(s) for s in lst2])\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 3917,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise. Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        for i in range(2, int(a/2)+1):\n            j = int(a/i)\n            if i*j == a and is_prime(i) and is_prime(j):\n                return True\n    return False\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert is_multiply_prime(60) == False",
        "num_ids": 3095,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return True\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 2772,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    elif a < 0:\n        a = -a\n    for i in range(0, int(a**(1/3))+1):\n        if i**3 == a:\n            return True\n    return False\n",
        "test": "assert iscube(1) == True",
        "num_ids": 2332,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def hex_key(num):\n    \"\"\"\n    This function takes a hexadecimal number as a string and counts the number of hexadecimal digits that are primes.\n    \"\"\"\n    primes = [2, 3, 5, 7, 0xB, 0xD]\n    count = 0\n    \n    for digit in num:\n        if digit.isdigit():\n            if int(digit) in primes:\n                count += 1\n        else:\n            if int(digit, 16) in primes:\n                count += 1\n                \n    return count",
        "test": "assert hex_key(\"1077E\") == 2",
        "num_ids": 4590,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]  # Convert to binary and remove '0b' prefix\n    binary = 'db' + binary + 'db'  # Add the extra characters\n    return binary\n",
        "test": "assert decimal_to_binary(1023) == \"db1111111111db\"",
        "num_ids": 2470,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 2505,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading. \n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n    GPA     |   Letter grade\n    4.0         A+\n    > 3.7        A  \n    > 3.3        A- \n    > 3.0        B+\n    > 2.7        B  \n    > 2.3        B-\n    > 2.0        C+\n    > 1.7        C\n    > 1.3        C-\n    > 1.0        D+ \n    > 0.7        D  \n    > 0.0        D-\n    0.0         E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 4, 4, 4, 4]) == ['A+', 'A+', 'A+', 'A+', 'A+']",
        "num_ids": 7880,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Get the length of the string\n    length = len(string)\n    \n    # If the length is less than 2, it is not a prime number\n    if length < 2:\n        return False\n    \n    # Check if the length is divisible by any number between 2 and length-1\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    \n    # If the length is not divisible by any number between 2 and length-1, it is a prime number\n    return True\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 2353,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 2218,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(N):\n    \"\"\"\n    Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 10\n        N //= 10\n    return bin(binary_sum)[2:]\n",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 3171,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    # Create an empty list to store the even elements at odd indices\n    even_elements = []\n    \n    # Iterate through the list starting from index 1 (the second element)\n    for i in range(1, len(lst), 2):\n        # If the element at the current index is even, add it to the list\n        if lst[i] % 2 == 0:\n            even_elements.append(lst[i])\n    \n    # Return the sum of the even elements\n    return sum(even_elements)\n",
        "test": "assert add([2, 4, 6, 8]) == 12 # testcase 3",
        "num_ids": 2085,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. \n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    \n    # Sort the characters in each word and join them back to form the new word\n    new_words = [''.join(sorted(word)) for word in words]\n    \n    # Join the new words back to form the new string\n    new_s = ' '.join(new_words)\n    \n    return new_s\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 3020,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, which is similar to matrix, \n    however, unlike matrices, each row may contain a different number of columns. \n    Given lst, and integer x, find integers x in the list, and return list of tuples, \n    [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), \n    starting with 0. \n    Sort coordinates initially by rows in ascending order. \n    Also, sort coordinates of the row by columns in descending order. \n    \n    Examples:\n    get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_num, row in enumerate(lst):\n        cols = [col_num for col_num, col in enumerate(row) if col == x]\n        for col_num in sorted(cols, reverse=True):\n            result.append((row_num, col_num))\n    return result\n",
        "test": "assert get_row([], 1) == []",
        "num_ids": 4293,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array.copy()\n    \n    first, last = array[0], array[-1]\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 4289,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places. \n    For example: \n    encrypt('hi') returns 'lm' \n    encrypt('asdfghjkl') returns 'ewhjklnop' \n    encrypt('gf') returns 'kj' \n    encrypt('et') returns 'ix' \n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 3367,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    else:\n        first_min = second_min = float('inf')\n        for i in lst:\n            if i < first_min:\n                second_min = first_min\n                first_min = i\n            elif i < second_min and i != first_min:\n                second_min = i\n        return second_min if second_min != float('inf') else None\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 2835,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 33,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.lstrip().startswith('I'):\n            count += 1\n    return count",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 2758,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 2841,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_letter = chr(ord(letter.lower()) + 2)\n            if letter.isupper():\n                new_message += new_letter.upper()\n            else:\n                new_message += new_letter.lower()\n        else:\n            new_message += letter.swapcase()\n    return new_message\n",
        "test": "assert encode(\"The quick brown fox jumps over the lazy dog\") == \"tH KPQCBRN FXJPSG GY LZCGV HND\"",
        "num_ids": 3779,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers. You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 6456,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False. \n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not d:\n        return False\n    else:\n        case = None\n        for key in d:\n            if not isinstance(key, str):\n                return False\n            elif case is None:\n                case = key.islower()\n            elif (case and not key.islower()) or (not case and not key.isupper()):\n                return False\n        return True\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 3877,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_up_to(n):\n    \"\"\"\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n. \n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        if len(primes) == n-2:  # stop loop if we've found enough primes\n            break\n    return primes\n",
        "test": "assert count_up_to(5) == [2,3]",
        "num_ids": 3033,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    product = unit_digit_a * unit_digit_b\n    return product\n",
        "test": "assert multiply(2020, 1851) == 0",
        "num_ids": 2346,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 2019,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def closest_integer(value):\n    # Convert the string to a float\n    num = float(value)\n    \n    # Round the number to the nearest integer\n    rounded = round(num)\n    \n    # If the rounded number is equidistant from two integers, round away from zero\n    if num % 1 == 0.5:\n        if num > 0:\n            rounded = int(num + 0.5)\n        else:\n            rounded = int(num - 0.5)\n    \n    # Return the integer closest to the given value\n    return rounded\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 2954,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index i\n    represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = [n]  # start with n stones in the first level\n    for i in range(1, n):\n        if n % 2 == 1:  # if n is odd\n            stones.append(stones[-1] + 2)  # add the next odd number\n        else:  # if n is even\n            stones.append(stones[-1] + 1)  # add the next even number\n    return stones\n",
        "test": "assert make_a_pile(1) == [1] # base case",
        "num_ids": 3173,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.replace(\",\", \" \").split()\n    return words",
        "test": "assert words_string(\"One\") == [\"One\"]",
        "num_ids": 3151,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    even_nums = [num for num in range(x, y+1) if num % 2 == 0]\n    if even_nums:\n        return max(even_nums)\n    else:\n        return -1\n",
        "test": "assert choose_num(1, 2) == 2",
        "num_ids": 3029,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n through m\n    total_sum = sum(range(n, m+1))\n\n    # Calculate the average of the integers\n    average = total_sum / (m - n + 1)\n\n    # Round the average to the nearest integer\n    rounded_average = round(average)\n\n    # Convert the rounded average to binary\n    binary_average = bin(rounded_average)\n\n    return binary_average\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 3352,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if all(int(d) % 2 != 0 for d in str(i)):\n            result.append(i)\n    return sorted(result)\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 3507,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = [] -> return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]  -> sort arr -> [-1, 1, 55] -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    result = []\n\n    for num in sorted([n for n in arr if n >= 1 and n <= 9], reverse=True):\n        result.append(names[num-1])\n\n    return result\n",
        "test": "assert by_length([]) == []",
        "num_ids": 5831,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise. \n    i starts from 1. \n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n",
        "test": "assert f(5) == [1, 2, 6, 24, 15] # check if f(5) is correct",
        "num_ids": 3475,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Given a positive integer num, return True if it's a palindrome, else False.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2) # Example 1",
        "num_ids": 3481,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0. If a number is negative,\n    then its first signed digit will be negative. For example, -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        # convert the number to a string and split it into individual digits\n        digits = [int(d) for d in str(num)]\n        # if the number is negative, remove the negative sign for the first digit\n        if num < 0:\n            digits[0] = abs(digits[0])\n        # check if the sum of the digits is greater than 0\n        if sum(digits) > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0 # Empty array should return 0",
        "num_ids": 2868,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n    \"\"\"\n    if not arr:\n        return True\n    \n    min_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            return False\n        min_val = arr[i]\n        \n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False # Test case 2",
        "num_ids": 5041,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers. There is no limit on the number\n    of exchanged elements between lst1 and lst2. If it is possible to exchange elements\n    between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\". For example: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    even_nums = [num for num in lst2 if num % 2 == 0]\n    odd_nums = [num for num in lst1 if num % 2 != 0]\n\n    if len(even_nums) >= len(odd_nums):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert exchange([1, 3, 5], [2, 4, 7]) == \"NO\"",
        "num_ids": 4656,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    # Split the string into a list of letters\n    letters = test.split()\n    \n    # Create an empty dictionary to store the letter counts\n    counts = {}\n    \n    # Iterate through the list of letters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in counts:\n            counts[letter] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            counts[letter] = 1\n    \n    # Find the letter(s) with the highest count\n    max_count = max(counts.values())\n    max_letters = [key for key, value in counts.items() if value == max_count]\n    \n    # Create a new dictionary with the highest count letter(s) and their count\n    result = {}\n    for letter in max_letters:\n        result[letter] = counts[letter]\n    \n    return result\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 4604,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    palindrome = result == result[::-1]\n    return (result, palindrome)\n",
        "test": "assert reverse_delete(\"abcde\",\"ae\") == (\"bcd\",False)",
        "num_ids": 3122,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567']) [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for string in lst:\n        odd_count = sum(1 for digit in string if int(digit) % 2 == 1)\n        result.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" +\n                     str(odd_count) + \"ng \" + str(len(string)) + \" of the \" + str(len(string)) + \"nput.\")\n    return result\n",
        "test": "assert odd_count([]) == []",
        "num_ids": 4864,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n",
        "test": "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
        "num_ids": 2870,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 31,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def max_fill(grid, bucket_capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    # Initialize variables\n    num_wells = len(grid)\n    well_length = len(grid[0])\n    num_buckets = 0\n\n    # Iterate through each well and bucket the water\n    for i in range(num_wells):\n        bucket = 0\n        for j in range(well_length):\n            if grid[i][j] == 1:\n                bucket += 1\n            if bucket == bucket_capacity:\n                num_buckets += 1\n                bucket = 0\n        if bucket > 0:\n            num_buckets += 1\n\n    return num_buckets",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0 # Example 3",
        "num_ids": 4587,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    # convert each integer to its binary representation as a string of 0s and 1s\n    bin_arr = [bin(x)[2:] for x in arr]\n    # sort the array using a lambda function that counts the number of ones in each binary string\n    return sorted(arr, key=lambda x: (bin_arr[arr.index(x)].count('1'), x))\n",
        "test": "assert sort_array([10, 100, 1, 101, 110]) == [1, 10, 100, 101, 110]",
        "num_ids": 3859,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, returns a list of all words from string s\n    that contain exactly n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    words = s.split()\n    selected_words = []\n    vowels = \"aeiou\"\n    for word in words:\n        n_consonants = sum(1 for c in word if c.lower() not in vowels)\n        if n_consonants == n:\n            selected_words.append(word)\n    return selected_words\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 3618,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = \"aeiouAEIOU\"\n    word = word.strip()  # remove leading/trailing spaces\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 3109,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    \n    def is_good(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return not stack\n\n    for s in lst:\n        if is_good(s):\n            return 'Yes'\n\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if is_good(lst[i] + lst[j]):\n                return 'Yes'\n            if is_good(lst[j] + lst[i]):\n                return 'Yes'\n\n    return 'No'",
        "test": "assert match_parens(['(', ')']) == 'Yes'",
        "num_ids": 4355,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Create a list of tuples where the first element is the value from arr\n    # and the second element is the index of that value in arr.\n    indexed_arr = [(val, idx) for idx, val in enumerate(arr)]\n\n    # Sort the indexed_arr list by the values in descending order.\n    indexed_arr.sort(key=lambda x: x[0], reverse=True)\n\n    # Return a sorted list of the first k values in the indexed_arr list.\n    return sorted([val for val, idx in indexed_arr[:k]])\n",
        "test": "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
        "num_ids": 4292,
        "indeed": true
    },
    {
        "number": 121,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # Initialize a variable to store the sum of odd elements in even positions\n    sum_of_odds = 0\n    \n    # Loop through the list, starting at index 0 (which is even)\n    for i in range(0, len(lst), 2):\n        # Check if the element at the current index is odd\n        if lst[i] % 2 != 0:\n            # If it is odd, add it to the sum\n            sum_of_odds += lst[i]\n    \n    # Return the sum of odd elements in even positions\n    return sum_of_odds\n",
        "test": "assert solution([2, 4, 6, 8]) == 0, \"Test case failed\"",
        "num_ids": 2550,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in range(k):\n        if arr[i] < 100:\n            total += arr[i]\n    return total\n",
        "test": "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24 # sum of 21 + 3",
        "num_ids": 3602,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def collatz_sequence(n):\n    \"\"\"\n    Returns the Collatz sequence for a given positive integer n.\n    \"\"\"\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sequence\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    sequence = collatz_sequence(n)\n    odd_numbers = []\n    for number in sequence:\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    return sorted(odd_numbers)\n",
        "test": "assert get_odd_collatz(10) == [1, 5]",
        "num_ids": 4559,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 5996,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    \n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 == 1)\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 3121,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # Check if the list has more than 1 duplicate of the same number\n    for i in range(len(lst)):\n        if lst.count(lst[i]) > 1:\n            return False\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 4185,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 38,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"\n    You are given two intervals, where each interval is a pair of integers.\n    For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end. For each given interval, it is assumed that its\n    start is less or equal its end. Your task is to determine whether the length of\n    intersection of these two intervals is a prime number. Example, the intersection of\n    the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime\n    number. If the length of the intersection is a prime number, return \"YES\", otherwise,\n    return \"NO\". If the two intervals don't intersect, return \"NO\".\n    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    # Determine if the two intervals intersect\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n\n    # Determine the length of intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start\n\n    # Check if the length is a prime number\n    if length == 2 or length == 3 or length == 5 or length == 7:\n        return \"YES\"\n    elif length == 1 or length % 2 == 0 or length % 3 == 0:\n        return \"NO\"\n    else:\n        for i in range(5, int(length ** 0.5) + 1, 6):\n            if length % i == 0 or length % (i + 2) == 0:\n                return \"NO\"\n        return \"YES\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 4724,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n            \n        sum_magnitudes += abs(num)\n    \n    return product * sum_magnitudes\n",
        "test": "assert prod_signs([]) == None",
        "num_ids": 3008,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    N = len(grid)\n    row, col = 0, 0\n\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                row, col = i, j\n\n    path = []\n    for _ in range(k):\n        path.append(grid[row][col])\n        if row > 0 and grid[row - 1][col] not in path:\n            row -= 1\n        elif col < N - 1 and grid[row][col + 1] not in path:\n            col += 1\n        elif row < N - 1 and grid[row + 1][col] not in path:\n            row += 1\n        elif col > 0 and grid[row][col - 1] not in path:\n            col -= 1\n\n    return path",
        "test": "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1]",
        "num_ids": 7798,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def tri(n):\n    \"\"\"\n    This function takes a non-negative integer n as input and returns a list of the first n+1\n    numbers of the Tribonacci sequence.\n    \"\"\"\n    # Create a list to store the Tribonacci sequence numbers\n    tribonacci_sequence = []\n    \n    # Append the first three numbers of the sequence to the list\n    tribonacci_sequence.append(1)\n    tribonacci_sequence.append(3)\n    tribonacci_sequence.append(2)\n    \n    # If n is 0, return the first three numbers of the sequence\n    if n == 0:\n        return tribonacci_sequence[:n+1]\n    \n    # Loop through the remaining numbers of the sequence up to n\n    for i in range(3, n+1):\n        # If i is even, use the formula 1 + i / 2\n        if i % 2 == 0:\n            tribonacci_sequence.append(1 + i // 2)\n        # If i is odd, use the formula tri(i-1) + tri(i-2) + tri(i+1)\n        else:\n            tribonacci_sequence.append(tribonacci_sequence[i-1] + tribonacci_sequence[i-2] + tribonacci_sequence[i+1])\n    \n    # Return the complete sequence up to n\n    return tribonacci_sequence[:n+1]\n",
        "test": "assert tri(1) == [1, 3]",
        "num_ids": 3126,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_digit_found = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            odd_digit_found = True\n        n //= 10\n    \n    if odd_digit_found:\n        return product\n    else:\n        return 0\n",
        "test": "assert digits(4) == 0",
        "num_ids": 1951,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            stack.pop()\n        else:\n            return False\n    return len(stack) > 0",
        "test": "assert is_nested('[][]') == False",
        "num_ids": 1864,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    # Round each element to the upper int(Ceiling) first\n    lst = [int(x) + (x - int(x) > 0) for x in lst]\n    # Compute the sum of squared numbers\n    return sum(x ** 2 for x in lst)\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 2659,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt:\n        return False\n    if txt[-1].isalpha():\n        words = txt.split()\n        if len(words[-1]) == 1 and words[-1][0].isalpha():\n            return True\n    return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False ",
        "num_ids": 3328,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n            break\n    return max_index\n",
        "test": "assert can_arrange([1, 2, 3]) == -1",
        "num_ids": 2525,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    '''\n    negatives = [n for n in lst if n < 0]\n    positives = [n for n in lst if n > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 3660,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Check if the variables are of the same type\n    if type(a) == type(b):\n        # If the variables are of the same type, compare them directly\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        # If the variables are of different types, convert the integer/float types to strings\n        # and replace the . with a , for comparison purposes\n        if isinstance(a, (int, float)):\n            a = str(a)\n            if \",\" in b:\n                a = a.replace(\".\", \",\")\n        if isinstance(b, (int, float)):\n            b = str(b)\n            if \",\" in a:\n                b = b.replace(\".\", \",\")\n\n        # Compare the strings and return the larger variable\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n",
        "test": "assert compare_one(\"1\", 1) == None",
        "num_ids": 4033,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # try all possible combinations of 4 positive even numbers\n    for i in range(2, n):\n        for j in range(2, n):\n            for k in range(2, n):\n                for l in range(2, n):\n                    if i + j + k + l == n:\n                        return True\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 2581,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n\n    return result\n",
        "test": "assert special_factorial(0) == 1 # Test case 4",
        "num_ids": 2183,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace more than 2 consecutive underscores with a single dash\n    text = text.replace(\"___\", \"-\")\n    return text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2515,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    \n    # Check if the file name has more than three digits\n    digits_count = sum(c.isdigit() for c in file_name)\n    if digits_count > 3:\n        return 'No'\n    \n    # Check if the file name contains exactly one dot\n    dot_count = file_name.count('.')\n    if dot_count != 1:\n        return 'No'\n    \n    # Split the file name into two parts: before the dot and after the dot\n    before_dot, after_dot = file_name.split('.')\n    \n    # Check if the substring before the dot starts with a letter from the latin alphapet\n    if not before_dot[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all checks pass, return 'Yes'\n    return 'Yes'",
        "test": "assert file_name_check(\"myfile.py\") == 'No' # Invalid extension",
        "num_ids": 4970,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n",
        "test": "assert sum_squares([1,2,3]) == 6",
        "num_ids": 3398,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            result += word + \" \"\n    return result.strip()\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 2624,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Your task is to implement a function that will simplify the expression x * n. \n    The function returns True if x * n evaluates to a whole number and False otherwise.\n    Both x and n, are string representation of a fraction, and have the following format, \n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers. \n    \n    You can assume that x, and n are valid fractions, and do not have zero as denominator. \n    \n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n\n    new_numerator = num1 * num2\n    new_denominator = denom1 * denom2\n\n    if new_numerator % new_denominator == 0:\n        return True\n    else:\n        if new_numerator == new_denominator:\n            return True\n        else:\n            gcd_value = gcd(new_numerator, new_denominator)\n            if new_numerator // gcd_value == new_denominator // gcd_value:\n                return True\n            else:\n                return False\n",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 3303,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \n    # Create a list to store tuples of (index, sum_of_digits)\n    index_sum = []\n    \n    # Loop through the input list and calculate the sum of digits for each number\n    for i in range(len(nums)):\n        sum_digits = sum(int(digit) for digit in str(abs(nums[i])) if digit.isdigit())\n        index_sum.append((i, sum_digits))\n        \n    # Sort the list based on the sum of digits, and then by the index in the original list\n    index_sum.sort(key=lambda x: (x[1], x[0]))\n    \n    # Create a new list with the sorted numbers based on their index in the input list\n    sorted_nums = [nums[i] for i, _ in index_sum]\n    \n    return sorted_nums\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 3784,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    Returns the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \n    Args:\n    nums (list of int): the input list of numbers\n    \n    Returns:\n    int: the number of elements that satisfy the conditions\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))  # convert to string and remove sign\n            if len(str_num) > 1:\n                first_digit = int(str_num[0])\n                last_digit = int(str_num[-1])\n                if first_digit % 2 == 1 and last_digit % 2 == 1:\n                    count += 1\n    return count",
        "test": "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
        "num_ids": 3112,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert get_max_triples(5) == 1 # Test case 1: n = 5",
        "num_ids": 3941,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        idx1 = planets.index(planet1)\n        idx2 = planets.index(planet2)\n        if idx1 > idx2:\n            idx1, idx2 = idx2, idx1\n        return tuple(planets[idx1+1:idx2])\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 3144,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    This function sorts the list of strings by length of each word and then alphabetically.\n    It then returns the sorted list.\n    \"\"\"\n    # Sort the list by length of each word and then alphabetically\n    sorted_lst = sorted(lst, key=lambda x: (len(x), x))\n    # Filter out the strings with odd lengths\n    filtered_lst = list(filter(lambda x: len(x) % 2 == 0, sorted_lst))\n    # Return the sorted list with filtered strings\n    return filtered_lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 3915,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 2782,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum += num ** 2\n    return sum",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 10",
        "num_ids": 2963,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3] # Example 1",
        "num_ids": 3486,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName. \n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list. \n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1). \n    Example: \n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    \n    strongest_extension = extensions[0]\n    strongest_strength = 0\n    \n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        \n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    \n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 5130,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n    \"\"\"\n\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 2677,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)  # get rid of sign\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 2563,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n    \n    roman_mapping = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    \n    result = ''\n    for value, numeral in roman_mapping.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()\n",
        "test": "assert int_to_mini_roman(152) == \"clii\"",
        "num_ids": 4679,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 2918,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_max(words):\n    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 3172,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = remaining - min(need, remaining)\n    return [total_eaten, remaining_carrots]\n",
        "test": "assert eat(1, 10, 10) == [11, 0]",
        "num_ids": 4710,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    expression = ''\n    for i in range(len(operator)):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n\n    result = eval(expression)\n    return result\n",
        "test": "assert do_algebra(['-', '+'], [5, 3, 2]) == 4 ",
        "num_ids": 4887,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s. If s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if s.isdigit():\n        return s[::-1]\n    else:\n        result = \"\"\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result += char.upper()\n                else:\n                    result += char.lower()\n            else:\n                result += char\n        return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 3074,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        md5_hash = hashlib.md5(text.encode()).hexdigest()\n        return md5_hash\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 2872,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a  # Swap the values of a and b if a is greater than b.\n    evens = [str(i) for i in range(a, b+1)]\n    evens = [int(i) for i in evens if i[0] in '02468']\n    evens.sort()\n    return evens\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 3511,
        "indeed": false
    }
]