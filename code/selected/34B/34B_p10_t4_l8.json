[
    {
        "number": 0,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 2945,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    \n    stack = []\n    result = []\n    current = \"\"\n    \n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current += char\n        elif char == \")\":\n            stack.pop()\n            current += char\n            if not stack:\n                result.append(current)\n                current = \"\"\n    \n    return result",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 3900,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    # Using the modulo operator to find the decimal part of the number\n    decimal_part = number % 1\n\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1902,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(below_zero([1, 2, 3]))  # False\n    print(below_zero([1, 2, -4, 5]))  # True\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1846,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviation_sum = sum(abs(x - mean) for x in numbers)\n    return deviation_sum / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 3098,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([1,2,3], 4) == [1,4,2,4,3]",
        "num_ids": 2720,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def max_depth(paren_string: str) -> int:\n        max_depth = 0\n        depth = 0\n        for char in paren_string:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    return [max_depth(group) for group in groups]",
        "test": "assert parse_nested_parens('()') == [1]",
        "num_ids": 3123,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 2294,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    \n    # Calculate the sum of all the integers in the list\n    total_sum = sum(numbers)\n    \n    # Calculate the product of all the integers in the list\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n        \n    return (total_sum, total_product)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2746,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_num = float('-inf')\n    \n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    \n    return result\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 3414,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2998,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # initialize an empty string to store the result\n    result = ''\n    # loop through the characters of the strings and perform XOR operation\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 2448,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "test": "assert longest([]) == None",
        "num_ids": 2231,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(12, 8) == 4",
        "num_ids": 1831,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 1795,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 1750,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to a set to remove duplicate characters\n    # Use a set comprehension to make all characters lowercase\n    # Return the length of the set\n    return len(set(char.lower() for char in string))\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 2062,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_lengths = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    beats = [note_lengths[note] for note in notes]\n    return beats",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 5257,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 2149,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    num_list = [num_dict[num] for num in numbers.split()]\n    num_list.sort()\n    sorted_nums = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in num_list]\n    return ' '.join(sorted_nums)\n",
        "test": "assert sort_numbers(\"three one five\") == \"one three five\"",
        "num_ids": 3197,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 5256,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n\n    return [(num - min_num) / range_num for num in numbers]\n",
        "test": "assert rescale_to_unit([1, 2, 3, 4, 5]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 3859,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 2044,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 1541,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    # find all prime factors up to sqrt(n)\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # if n is still greater than 1, it's a prime factor\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert factorize(70) == [2, 5, 7]",
        "num_ids": 3096,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            unique_numbers.append(num)\n    return unique_numbers\n",
        "test": "assert remove_duplicates([]) == []",
        "num_ids": 2452,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n",
        "test": "assert flip_case(\"Hello\") == \"hELLO\"",
        "num_ids": 1785,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 1490,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 2331,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [n for n in l if n > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 2701,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 1520,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 23,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    \n    if len(xs) % 2 == 0:\n        a = max(xs)\n        if a != 0:\n            x0 = 0\n            for i in range(len(xs)):\n                if xs[i] == a:\n                    x0 = i\n                    break\n            return x0 - poly(xs, x0) / a\n        else:\n            return None\n    else:\n        return None\n",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 4583,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sort_third(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three,\n    while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    \n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    \n    l_sorted = sorted(l[i] for i in range(len(l)) if i % 3 == 2)\n    result = [l[i] if i % 3 != 2 else l_sorted.pop(0) for i in range(len(l))]\n    \n    return result\n",
        "test": "assert sort_third([]) == [] # Empty list case",
        "num_ids": 3999,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1842,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 2080,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += str(i).count('7')\n    return count\n",
        "test": "assert fizz_buzz(50) == 0 # Test case 1",
        "num_ids": 2027,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indicies = [i for i in range(len(l)) if i % 2 == 0]\n    l_even = [l[i] for i in even_indicies]\n    l_even_sorted = sorted(l_even)\n    l_new = [l[i] if i % 2 != 0 else l_even_sorted.pop(0) for i in range(len(l))]\n    return l_new\n",
        "test": "assert sort_even([]) == []",
        "num_ids": 3719,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back to their original position.\n    groups = [group[-1:] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 3061,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    This function returns True if the given number is prime, otherwise False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef fibonacci_numbers(n: int) -> int:\n    \"\"\"\n    This function returns the n-th number in the Fibonacci sequence.\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 1\n    i = 1\n    while count <= n:\n        fib = fibonacci_numbers(i)\n        if is_prime(fib):\n            count += 1\n            if count == n + 1:\n                return fib\n        i += 1\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 2524,
        "indeed": true
    },
    {
        "number": 40,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, n - 1\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s < 0:\n                left += 1\n            elif s > 0:\n                right -= 1\n            else:\n                return True\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 3899,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.  n cars are driving left to right;\n    simultaneously, a different set of n cars are driving right to left.  The two sets of\n    cars start out being very far from each other.  All cars move in the same speed.  Two cars are said to\n    collide when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving in their\n    trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Two sets of cars moving in opposite directions, n cars each.\n    # Initialize the two sets of cars at their starting positions.\n    cars_left_to_right = [i for i in range(1, n+1)]\n    cars_right_to_left = [i for i in range(n, 0, -1)]\n\n    # Initialize the number of collisions to 0.\n    collisions = 0\n\n    # Iterate through the cars until one set of cars is empty.\n    while cars_left_to_right and cars_right_to_left:\n        # Check if the cars at the front of both sets collide.\n        if cars_left_to_right[0] == cars_right_to_left[0]:\n            # If they collide, remove both cars from their respective sets and increment collisions.\n            cars_left_to_right.pop(0)\n            cars_right_to_left.pop(0)\n            collisions += 1\n        else:\n            # If they don't collide, move the left-to-right car one step forward and the right-to-left car one step back.\n            cars_left_to_right.pop(0)\n            cars_right_to_left.pop()\n\n    # Return the number of collisions.\n    return collisions\n",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 3619,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 2373,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    # Create an empty dictionary to store the indices of elements\n    indices = {}\n    for i, num in enumerate(l):\n        if -num in indices:\n            return True\n        indices[num] = i\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 2636,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(reversed(digits))\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2431,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(3, 4) == 6",
        "num_ids": 1532,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib_list = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib_list.append(fib_list[i-1] + fib_list[i-2] + fib_list[i-3] + fib_list[i-4])\n        return fib_list[n]\n",
        "test": "assert fib4(5) == 4",
        "num_ids": 3002,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        median = (sorted(l)[n//2 - 1] + sorted(l)[n//2])/2\n    else:\n        median = sorted(l)[n//2]\n    return median\n",
        "test": "assert median([1, 1, 1, 1, 1]) == 1",
        "num_ids": 2172,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Removing spaces and converting to lowercase\n    text = text.replace(\" \", \"\").lower()\n\n    # Checking if reversed string is the same as the original string\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 1735,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 1962,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(\"mjqqt\") == \"hello\" # test case 1",
        "num_ids": 2157,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 2252,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1926,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 2216,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(1) == 1",
        "num_ids": 1496,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 2233,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    \n    # Check if list is monotonically increasing or decreasing\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    else:\n        return False",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 2633,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(set1.intersection(set2))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2833,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 1950,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 1984,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 1998,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # create a new list to store derivative coefficients\n    d_coefficients = []\n    # iterate over the coefficients of the polynomial\n    for i in range(1, len(xs)):\n        # multiply the current coefficient by its index and add it to the derivative list\n        d_coefficients.append(i * xs[i])\n    return d_coefficients\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 3165,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n+1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 3041,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouy\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 2617,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    str_x = str(x)\n    if shift > len(str_x):\n        return str_x[::-1]\n    else:\n        return str_x[-shift:] + str_x[:-shift]\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 2663,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 2280,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    \n    # Extract the number of apples and oranges from the input string\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    \n    # Calculate the number of mango fruits\n    mangoes = n - apples - oranges\n    \n    return mangoes\n",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
        "num_ids": 4087,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                        so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    # Find the smallest even value and its index\n    smallest_value = float('inf')\n    smallest_index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_value:\n            smallest_value = value\n            smallest_index = i\n\n    # Return the result as a list\n    if smallest_index == -1:\n        return []\n    else:\n        return [smallest_value, smallest_index]",
        "test": "assert pluck([1,2,3]) == [2, 1]",
        "num_ids": 5121,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def search(lst):\n    # Create a dictionary to count the frequency of each integer in the list\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Find the maximum integer greater than zero that meets the condition\n    max_num = -1\n    for num in sorted(freq.keys(), reverse=True):\n        if num > 0 and num <= len(lst) and freq[num] >= num:\n            max_num = num\n            break\n    \n    return max_num\n",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 3724,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 3736,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00 # Testcase 1",
        "num_ids": 3407,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) > w:\n        return False\n    else:\n        return q == q[::-1]\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 3711,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n\n    return changes",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 3232,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 4018,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise. \n    Knowing that (a) is less then 100. \n    Example: \n    is_multiply_prime(30) == True \n    30 = 2 * 3 * 5 \n    \"\"\"\n    for i in range(2, a):\n        if is_prime(i):\n            for j in range(i+1, a):\n                if is_prime(j):\n                    for k in range(j+1, a):\n                        if is_prime(k):\n                            if i*j*k == a:\n                                return True\n    return False\n",
        "test": "assert is_multiply_prime(54) == False # 54 is not the multiplication of 3 prime numbers",
        "num_ids": 3064,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    \n    if x == 1:\n        return True\n    \n    power = 0\n    while n ** power < x:\n        power += 1\n    \n    return n ** power == x\n",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 2480,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    c = abs(a) ** (1/3)\n    return int(c + 0.5) ** 3 == abs(a)\n",
        "test": "assert iscube(1) == True",
        "num_ids": 2111,
        "indeed": true
    },
    {
        "number": 78,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for digit in num:\n        if digit.isdigit():\n            if int(digit) in primes:\n                count += 1\n        elif digit.upper() in ['A', 'B', 'C', 'D', 'E', 'F']:\n            if int(digit, 16) in primes:\n                count += 1\n    return count\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 4024,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    binary = 'db' + binary + 'db'  # add the extra characters\n    return binary\n",
        "test": "assert decimal_to_binary(0) == \"db0db\"",
        "num_ids": 2581,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n\n    return True\n",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 2258,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading. The only problem\n    is, she has lost the code she used for grading. She has given you a list of GPAs\n    for some students and you have to write a function that can output a list of letter grades\n    using the following table:\n        GPA           | Letter grade\n          4.0              A+\n        > 3.7             A\n        > 3.3             A-\n        > 3.0             B+\n        > 2.7             B\n        > 2.3             B-\n        > 2.0             C+\n        > 1.7             C\n        > 1.3             C-\n        > 1.0             D+\n        > 0.7             D\n        > 0.0             D-\n          0.0             E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([2.5, 3.6, 3.9, 4.0]) == ['B-', 'A-', 'A', 'A+']",
        "num_ids": 7375,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def prime_length(string):\n    \"\"\"\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Check if the length of the string is prime or not\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if the length of the string is prime or not\n    return is_prime(len(string))",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 2022,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1  # single digit number starting and ending with 1",
        "num_ids": 2541,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n\n    # Convert the integer to a string\n    N_str = str(N)\n\n    # Initialize the sum of digits to zero\n    digit_sum = 0\n\n    # Iterate through each digit in the string\n    for digit in N_str:\n        # Convert the digit to an integer and add it to the sum\n        digit_sum += int(digit)\n\n    # Convert the digit sum to binary and return the result\n    return bin(digit_sum)[2:]\n",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 3027,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
        "test": "assert add([2, 4, 6, 8]) == 12",
        "num_ids": 2063,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. \n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # Split the input string into words\n    words = s.split()\n    # Initialize an empty list to store the ordered words\n    ordered_words = []\n    # Iterate over each word in the list of words\n    for word in words:\n        # Sort the characters of the word based on their ASCII values\n        ordered_chars = sorted(word)\n        # Append the ordered word to the list of ordered words\n        ordered_words.append(''.join(ordered_chars))\n    # Join the ordered words into a string, using a single space as the separator\n    ordered_string = ' '.join(ordered_words)\n    return ordered_string\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 3006,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, which is similar to matrix.\n    Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row([], 1) == []",
        "num_ids": 4575,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    new_array = array.copy()\n    if len(array) == 0 or len(array) == 1:\n        return new_array\n    \n    if (new_array[0] + new_array[-1]) % 2 == 1:\n        new_array.sort()\n    else:\n        new_array.sort(reverse=True)\n    \n    return new_array\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 4290,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # create a dictionary to map each letter to its encrypted value\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_alphabet = alphabet[2*2:]+alphabet[:2*2]\n    encryption_dict = {letter: encrypted_alphabet[i] for i, letter in enumerate(alphabet)}\n    # encrypt the string by replacing each letter with its encrypted value\n    encrypted_string = ''.join([encryption_dict[letter] for letter in s])\n    return encrypted_string\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 2908,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    else:\n        unique_lst = list(set(lst))\n        unique_lst.sort()\n        if len(unique_lst) < 2:\n            return None\n        else:\n            return unique_lst[1]",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 2739,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    \n    # split the input string into sentences\n    sentences = S.split('. ')\n    \n    # initialize a counter for the number of boredoms\n    num_boredoms = 0\n    \n    # iterate over each sentence\n    for sentence in sentences:\n        # check if the sentence starts with \"I\"\n        if sentence.startswith('I'):\n            # increment the counter if it does\n            num_boredoms += 1\n    \n    return num_boredoms\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 2781,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 2618,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            index = vowels.index(letter.lower())\n            encoded_letter = chr(ord(letter) + 2)\n            encoded_message += encoded_letter\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message\n",
        "test": "assert encode('The quick brown fox jumps over the lazy dog') == 'tG WQYLGK HBMXOJP VNNZ LQRRVWGFZ'",
        "num_ids": 3425,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of n.\"\"\"\n    return sum(int(d) for d in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum_of_digits(max_prime)\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 6023,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False. \n    The function should return False is the given dictionary is empty. \n    \"\"\"\n    if len(d) == 0:\n        return False\n\n    lower_case = True\n    upper_case = True\n\n    for key in d:\n        if not isinstance(key, str):\n            return False\n\n        if key != key.lower():\n            lower_case = False\n        if key != key.upper():\n            upper_case = False\n\n        if not (lower_case or upper_case):\n            return False\n\n    return True\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 3843,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n",
        "test": "assert count_up_to(5) == [2,3]",
        "num_ids": 3257,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    # extract the last digit of each number\n    a_unit = a % 10\n    b_unit = b % 10\n    \n    # compute the product of the last digits\n    product = a_unit * b_unit\n    \n    return product\n",
        "test": "assert multiply(2020, 1851) == 0",
        "num_ids": 2414,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOUaeiou\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 1943,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    \n    # convert the input string to a float\n    num = float(value)\n    \n    # round the number to the nearest integer\n    rounded = round(num)\n    \n    # if the rounded number is equidistant from two integers, round away from zero\n    if num % 1 == 0.5:\n        if num > 0:\n            rounded = int(num + 0.5)\n        else:\n            rounded = int(num - 0.5)\n    \n    # return the rounded integer\n    return int(rounded)\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 3347,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stone_count = [n]  # add the number of stones in first level\n    \n    for i in range(n-1):\n        if n % 2 == 0:\n            stone_count.append(stone_count[-1] + 1)\n        else:\n            stone_count.append(stone_count[-1] + 2)\n    \n    return stone_count\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 3158,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces.\n    Your task is to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.replace(\",\", \" \").split()\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 2989,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Find the first even number greater than or equal to x\n    even_x = x if x % 2 == 0 else x + 1\n    # Find the first even number less than or equal to y\n    even_y = y if y % 2 == 0 else y - 1\n    # If even_x is greater than even_y, there's no even number in the range [x, y]\n    if even_x > even_y:\n        return -1\n    # Return the biggest even number in the range [x, y]\n    return even_y\n",
        "test": "assert choose_num(10, 10) == 10",
        "num_ids": 2926,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = round(sum/(m-n+1))\n    binary = bin(avg)\n    return binary\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 3005,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 3469,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def by_length(arr):\n    # define a dictionary to map digits to their corresponding names\n    digit_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # filter out strange numbers and numbers outside the range 1-9\n    filtered_arr = [n for n in arr if 1 <= n <= 9]\n    \n    # sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # replace each digit with its corresponding name\n    named_arr = [digit_to_name[n] for n in reversed_arr]\n    \n    return named_arr",
        "test": "assert by_length([1, -1 , 55]) == ['One']",
        "num_ids": 6237,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise. \n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n",
        "test": "assert f(5) == [1, 2, 6, 24, 15] # Test for n = 5",
        "num_ids": 3443,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        str_i = str(i)\n        if str_i == str_i[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 3159,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num >= 0:\n            digits = [int(d) for d in str(num)]\n        else:\n            digits = [int(d) for d in str(num)[1:]]\n            if digits:\n                digits[0] = -digits[0]\n        if sum(digits) > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0 # edge case, empty array",
        "num_ids": 3056,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n    \"\"\"\n    \n    if not arr:\n        return True\n        \n    for i in range(len(arr)):\n        j = i + 1\n        while j < len(arr):\n            if arr[i] > arr[j]:\n                return False\n            j += 1\n    \n    return True",
        "test": "assert move_one_ball([]) == True",
        "num_ids": 4673,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers. There is no limit on the number\n    of exchanged elements between lst1 and lst2. If it is possible to exchange elements between\n    the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise,\n    return \"NO\". For example: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    odd_count = 0\n    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # if there are no odd numbers in lst1, return \"YES\"\n    if odd_count == 0:\n        return \"YES\"\n\n    # if there are no even numbers in lst2, return \"NO\"\n    even_count_lst2 = 0\n    for num in lst2:\n        if num % 2 == 0:\n            even_count_lst2 += 1\n    if even_count_lst2 == 0:\n        return \"NO\"\n\n    # if there are enough even numbers in lst2 to make all the numbers in lst1 even, return \"YES\"\n    if even_count_lst2 >= odd_count:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\"",
        "num_ids": 4540,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    # Check if the input is empty string\n    if not test:\n        return {}\n\n    # Convert the input string to a list of letters\n    letters = test.split()\n\n    # Create an empty dictionary to store the letter counts\n    letter_count = {}\n\n    # Loop through the list of letters and count the occurrences of each letter\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    # Find the maximum count of letters\n    max_count = max(letter_count.values())\n\n    # Create an empty dictionary to store the most repeated letters\n    max_letter = {}\n\n    # Loop through the letter_count dictionary and add the letters with max_count to the max_letter dictionary\n    for letter in letter_count:\n        if letter_count[letter] == max_count:\n            max_letter[letter] = max_count\n\n    return max_letter\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 4882,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_delete(s, c):\n    # delete characters in s that are equal to any character in c\n    for char in c:\n        s = s.replace(char, '')\n    \n    # check if the result string is palindrome\n    is_palindrome = s == s[::-1]\n    \n    return s, is_palindrome\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 2840,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        num_odds = sum(1 for digit in lst[i] if int(digit) % 2 == 1)\n        result.append(f\"the number of odd elements {num_odds}n the str{num_odds}ng {num_odds} of the {num_odds}nput.\")\n    return result\n\n\nprint(odd_count(['1234567']))\nprint(odd_count(['3',\"11111111\"])) ",
        "test": "assert odd_count([]) == []",
        "num_ids": 4392,
        "indeed": true
    },
    {
        "number": 114,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        if curr_sum > 0:\n            curr_sum = 0\n            \n    return min_sum\n",
        "test": "assert minSubArraySum([-10, 1, 2, 3, 4, 5]) == -10",
        "num_ids": 3048,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def max_fill(grid, bucket_capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    if not grid or not grid[0]:\n        return 0\n\n    rows, cols = len(grid), len(grid[0])\n    total_water = sum(sum(row) for row in grid)\n    buckets_needed = math.ceil(total_water / bucket_capacity)\n\n    return buckets_needed\n",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0 ",
        "num_ids": 6137,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    # Create a list of tuples with the number of ones in binary representation and decimal value\n    binary_ones = [(bin(x).count('1'), x) for x in arr]\n    # Sort the list of tuples based on number of ones and then decimal value\n    sorted_list = sorted(binary_ones, key=lambda x: (x[0], x[1]))\n    # Extract the sorted decimal values from the sorted list of tuples\n    sorted_arr = [x[1] for x in sorted_list]\n    return sorted_arr\n",
        "test": "assert sort_array([5, 3, 2, 0, 1]) == [0, 1, 2, 3, 5]",
        "num_ids": 3809,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    # split the string into words\n    words = s.split()\n\n    # create an empty list to store the selected words\n    selected = []\n\n    # iterate over each word in the list\n    for word in words:\n        # count the number of consonants in the word\n        count = 0\n        for letter in word:\n            if letter.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                count += 1\n\n        # if the word has exactly n consonants, add it to the selected list\n        if count == n:\n            selected.append(word)\n\n    # return the selected list\n    return selected\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 2774,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i+1] not in vowels and word[i-1] not in vowels:\n            return word[i]\n    return ''\n",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 3243,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    \n    # Initialize variables to keep track of open and close parentheses\n    open_count = 0\n    close_count = 0\n    \n    # Concatenate the two strings\n    s = lst[0] + lst[1]\n    \n    # Loop through each character in the concatenated string\n    for char in s:\n        # If the character is an open parenthesis, increment the count\n        if char == '(':\n            open_count += 1\n        # If the character is a close parenthesis, decrement the count\n        elif char == ')':\n            close_count += 1\n            \n        # If the close count is greater than the open count, return 'No'\n        if close_count > open_count:\n            return 'No'\n            \n    # If all parentheses are balanced, return 'Yes'\n    return 'Yes'\n",
        "test": "assert match_parens(['()(', ')']) == 'Yes'",
        "num_ids": 4152,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 1:\n        return [max(arr)]\n    else:\n        arr.sort()\n        return arr[-k:]\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 3934,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i%2 == 0 and lst[i]%2 != 0:\n            sum += lst[i]\n            \n    return sum\n",
        "test": "assert solution([2, 4, 6, 8]) == 0",
        "num_ids": 2278,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Initialize sum variable\n    total_sum = 0\n\n    # Loop through the first k elements of the array\n    for i in range(k):\n        # Check if the length of the element is at most 2\n        if len(str(arr[i])) <= 2:\n            # Add the element to the sum\n            total_sum += arr[i]\n\n    # Return the final sum\n    return total_sum\n",
        "test": "assert add_elements([100, 200, 300, 400, 500], 2) == 0 # no elements with at most 2 digits",
        "num_ids": 3999,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def collatz_sequence(n):\n    \"\"\"\n    Given a positive integer n, return the Collatz sequence for that number.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    For example:\n    collatz_sequence(5) returns [5, 16, 8, 4, 2, 1]\n    \"\"\"\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sequence\n\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    sequence = collatz_sequence(n)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_numbers)",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 4683,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \n    for example: \n    valid_date('03-11-2000') => True\n    \n    valid_date('15-01-2012') => False\n    \n    valid_date('04-0-2040') => False\n    \n    valid_date('06-04-2020') => True\n    \n    valid_date('06/04/2020') => False\n    \"\"\"\n    \n    # check if the date string is empty\n    if not date:\n        return False\n    \n    # split the date string into month, day, and year\n    month, day, year = date.split('-')\n    \n    # check if the month is between 1 and 12\n    if not 1 <= int(month) <= 12:\n        return False\n    \n    # check if the day is between 1 and the maximum number of days for the corresponding month\n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and not 1 <= int(day) <= 31 or \\\n            int(month) in [4, 6, 9, 11] and not 1 <= int(day) <= 30 or \\\n            int(month) == 2 and not 1 <= int(day) <= 29:\n        return False\n    \n    # check if the year is a valid integer\n    try:\n        year = int(year)\n    except ValueError:\n        return False\n    \n    # check if the year is between 1 and 9999\n    if not 1 <= year <= 9999:\n        return False\n    \n    # if all conditions are satisfied, return True\n    return True\n",
        "test": "assert valid_date('04-0-2040') == False",
        "num_ids": 6418,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for letter in txt:\n            if ord(letter) % 2 == 1:\n                count += 1\n        return count",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 2686,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        elif lst[i] == lst[i+1]:\n            if i == len(lst)-2:\n                return True\n            elif lst[i+1] != lst[i+2]:\n                return False\n            else:\n                continue\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 3754,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end) includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Check if the two intervals intersect\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    # Find the intersection of the two intervals\n    start = max(start1, start2)\n    end = min(end1, end2)\n\n    # Find the length of the intersection\n    length = end - start\n\n    # Check if the length is a prime number\n    if length <= 1:\n        return \"NO\"\n    elif length == 2:\n        return \"YES\"\n    elif length % 2 == 0:\n        return \"NO\"\n    else:\n        for i in range(3, int(length ** 0.5) + 1, 2):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n",
        "test": "assert intersection((0, 1), (2, 3)) == \"NO\"",
        "num_ids": 4429,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        elif num == 0:\n            product_of_signs = 0\n            sum_of_magnitudes = 0\n            break\n\n        sum_of_magnitudes += abs(num)\n\n    return sum_of_magnitudes * product_of_signs\n",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 3207,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def minPath(grid, k):\n    def dfs(x, y, depth):\n        if depth == k:\n            return [grid[x][y]]\n        moves = [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]\n        for i, j in moves:\n            if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and (i != x or j != y):\n                result = dfs(i, j, depth + 1)\n                if result:\n                    return [grid[x][y]] + result\n        return None\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            result = dfs(i, j, 1)\n            if result:\n                return result\n    return []",
        "test": "assert minPath([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]], 1) == [1]",
        "num_ids": 6612,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    # Initialize the list with the first 3 numbers of the Tribonacci sequence\n    tribonacci = [1, 3, 2]\n    \n    # Check if n is less than or equal to 2\n    if n <= 2:\n        return tribonacci[:n+1]\n    \n    # Calculate the remaining numbers of the sequence\n    for i in range(3, n+1):\n        tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n    \n    return tribonacci\n",
        "test": "assert tri(2) == [1, 3, 2] # check base case",
        "num_ids": 3951,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n",
        "test": "assert digits(4) == 0",
        "num_ids": 1876,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0\n",
        "test": "assert is_nested('[][]') == False",
        "num_ids": 2224,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    \n    # Round each element in the list to the upper int(Ceiling) first\n    lst = [int(x) + (x - int(x) > 0) for x in lst]\n    \n    # Calculate the sum of squares of the rounded numbers in the list\n    return sum(x**2 for x in lst)\n",
        "test": "assert sum_squares([1.4,4.2,0]) == 29",
        "num_ids": 2929,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    # Check if the input is empty or not a string\n    if not isinstance(txt, str) or not txt:\n        return False\n\n    # Get the last character of the string\n    last_char = txt[-1]\n\n    # Check if the last character is an alphabetical character\n    if not last_char.isalpha():\n        return False\n\n    # Check if the last character is part of a word\n    if txt.endswith(\" \"):\n        return False\n\n    return True\n",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False",
        "num_ids": 3521,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    \n    n = len(arr)\n    largest_index = -1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n            break\n        \n    return largest_index\n",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 2424,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n\n    if len(neg_nums) == 0:\n        a = None\n    else:\n        a = max(neg_nums)\n\n    if len(pos_nums) == 0:\n        b = None\n    else:\n        b = min(pos_nums)\n\n    return (a, b)\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 3629,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        if type(a) == str:\n            a = a.replace(',', '.')\n            a = float(a)\n        else:\n            a = float(a)\n        if type(b) == str:\n            b = b.replace(',', '.')\n            b = float(b)\n        else:\n            b = float(b)\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 3315,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n        if count == 4:\n            return True\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 3153,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i * factorial(i-1)\n    return result\n\ndef factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 2039,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace 3 or more consecutive underscores with a single -\n    text = text.replace('___', '-')\n    return text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2432,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 38,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if the file name has more than three digits\n    if sum(1 for c in file_name if c.isdigit()) > 3:\n        return 'No'\n    \n    # Check if the file name contains exactly one dot '.'\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts: before and after the dot\n    before_dot, after_dot = file_name.split('.')\n    \n    # Check if the substring before the dot is not empty and starts with a letter\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of 'txt', 'exe', 'dll'\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all checks pass, return 'Yes'\n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == 'Yes'",
        "num_ids": 5335,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        result += lst[i]\n    return result\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 3336,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, else False.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing the words from the original sentence, whose lengths are prime numbers,\n    in the same order as the original sentence.\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 3182,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Your task is to implement a function that will simplify the expression x * n. \n    The function returns True if x * n evaluates to a whole number and False otherwise. \n    Both x and n, are string representation of a fraction, and have the following format, \n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    def get_gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return get_gcd(b, a % b)\n\n    def get_lcm(a, b, gcd):\n        return (a * b) // gcd\n\n    def get_numerator_denominator(fraction):\n        numerator, denominator = fraction.split('/')\n        return int(numerator), int(denominator)\n\n    x_numerator, x_denominator = get_numerator_denominator(x)\n    n_numerator, n_denominator = get_numerator_denominator(n)\n\n    numerator = x_numerator * n_numerator\n    denominator = x_denominator * n_denominator\n\n    gcd = get_gcd(numerator, denominator)\n    lcm = get_lcm(numerator, denominator, gcd)\n\n    return lcm == numerator\n",
        "test": "assert simplify(\"1/1\", \"1/1\") == True",
        "num_ids": 4011,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits. \n    Note: if there are several items with similar sum of their digits, \n    order them based on their index in original list. \n\n    For example: \n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \n    def sum_of_digits(num):\n        \"\"\"Return the sum of digits of a given number.\"\"\"\n        return sum(int(d) for d in str(abs(num)))\n    \n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 3780,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count\n",
        "test": "assert specialFilter([1, 2, 3, 4, 5]) == 0 # None of the numbers have both first and last digits as odd",
        "num_ids": 3241,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 4392,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    p1 = planets.index(planet1)\n    p2 = planets.index(planet2)\n    if p1 < p2:\n        return tuple(planets[p1+1:p2])\n    else:\n        return tuple(planets[p2+1:p1])\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 2751,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order.\n    \"\"\"\n    # Create a new list to store the even length strings\n    even_lst = []\n    \n    # Iterate over the input list and append the even length strings to the new list\n    for s in lst:\n        if len(s) % 2 == 0:\n            even_lst.append(s)\n    \n    # Sort the new list by length of each word and alphabetically for same length words\n    even_lst.sort(key=lambda x: (len(x), x))\n    \n    # Return the sorted list\n    return even_lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 3764,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef is_prime(n):\n    \"\"\"Returns True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which returns the value of x if n is \n    a prime number and the value of y otherwise.\n\n    Examples:\n    x_or_y(7, 34, 12) == 34\n    x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(2, 10, 20) == 10",
        "num_ids": 2632,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    \n    result = 0\n    \n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            result += num ** 2\n            \n    return result\n",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 10",
        "num_ids": 3153,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing. \n    Your task is to determine if a person correctly guessed the results of a number of matches. \n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n    the value is 0, and if not, the value is the absolute difference between the guess and the score. \n    \n    \n    example: \n    compare([1,2,3,4,5,1], [1,2,3,4,2,-2]) -> [0,0,0,0,3,3] \n    compare([0,5,0,0,0,4], [4,1,1,0,0,-2]) -> [4,4,1,0,0,6] \n    \"\"\"\n\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3] # Testcase 1",
        "num_ids": 3778,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    def get_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = extensions[0]\n    strongest_strength = get_strength(strongest_extension)\n\n    for extension in extensions[1:]:\n        strength = get_strength(extension)\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\"",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 5632,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    Returns True if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    n = len(b)\n    for i in range(n):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 2362,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 2491,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for value, roman in sorted(roman_dict.items(), reverse=True):\n        while number >= value:\n            result += roman\n            number -= value\n    return result.lower()",
        "test": "assert int_to_mini_roman(1) == \"i\"",
        "num_ids": 4222,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 2677,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_max(words):\n    \"\"\"\n    Find the word with maximum number of unique characters.\n    If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    if not words:\n        return \"\"\n    max_word = words[0]\n    for word in words[1:]:\n        if len(set(word)) > len(set(max_word)):\n            max_word = word\n        elif len(set(word)) == len(set(max_word)):\n            if word < max_word:\n                max_word = word\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 3147,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = remaining - min(need, remaining)\n    return [total_eaten, remaining_carrots]",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 4727,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Convert operand list to string for evaluation\n    operand_string = ' '.join(str(x) for x in operand)\n\n    # Create string of expression to be evaluated\n    expression = operand_string.split()\n    for i in range(len(operator)):\n        expression.insert(i*2+1, operator[i])\n\n    # Evaluate expression and return result\n    result = eval(' '.join(expression))\n    return result\n",
        "test": "assert do_algebra(['*', '*'], [2, 3, 4]) == 24",
        "num_ids": 4911,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    # Check if the string contains any letter\n    contains_letter = any(c.isalpha() for c in s)\n\n    # If the string contains letters, reverse the case of each letter\n    if contains_letter:\n        result = \"\"\n        for c in s:\n            if c.isalpha():\n                result += c.upper() if c.islower() else c.lower()\n            else:\n                result += c\n        return result\n    # If the string contains no letters, reverse the string\n    else:\n        return s[::-1]",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 2881,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 2900,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    a, b = min(a, b), max(a, b)  # ensure a <= b\n    result = []\n    for i in range(a, b+1):\n        digits = [int(d) for d in str(i)]\n        if all(d % 2 == 0 for d in digits):\n            result.append(i)\n    return result\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 3901,
        "indeed": false
    }
]