[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n\n    # Initialize a list to hold the separate groups\n    groups = []\n\n    # Initialize a counter for the number of open parentheses seen so far\n    open_count = 0\n\n    # Initialize a string to hold the current group being processed\n    current_group = ''\n\n    # Loop through each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the open count and add the parenthesis to the current group\n        if char == '(':\n            open_count += 1\n            current_group += char\n        # If the character is a close parenthesis, decrement the open count and add the parenthesis to the current group\n        elif char == ')':\n            open_count -= 1\n            current_group += char\n        # If the open count reaches zero, it means we've found the end of a group, so we add the group to the list and reset the current group\n        if open_count == 0:\n            groups.append(current_group)\n            current_group = ''\n\n    # Return the list of groups\n    return groups\n",
        "test": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
        "num_ids": 1246,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n    \n    Return the decimal part of the number.\n    \n    Example:\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    abs_diff = [abs(num - mean) for num in numbers]\n    return sum(abs_diff) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers)-1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def max_depth(s: str) -> int:\n        if not s:\n            return 0\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == ')':\n                depth -= 1\n        return max_depth\n\n    return [max_depth(s) for s in paren_string.split()]\n",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 1039,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    # Initialize the sum and product variables\n    s = 0\n    p = 1\n    \n    # Loop through the list of numbers\n    for num in numbers:\n        # Add the current number to the sum\n        s += num\n        # Multiply the current number to the product\n        p *= num\n    \n    # Return the tuple with the sum and product\n    return (s, p)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Find the longest postfix that is a palindrome\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # We've found the palindromic suffix, now create the palindrome\n            prefix = string[:i]\n            return string + prefix[::-1]\n\n    # If no palindromic suffix is found, the whole string is already a palindrome\n    return string\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n    \n    max_len = 0\n    longest_str = ''\n    \n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            longest_str = string\n    \n    return longest_str\n",
        "test": "assert longest([]) == None # Empty input list",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    string = string.lower()\n    distinct_chars = set(string)\n    return len(distinct_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    note_lengths = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    result = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note in note_lengths:\n            result.append(note_lengths[note])\n    \n    return result",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1252,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    num_list = numbers.split()\n    num_list = [num_dict[num] for num in num_list]\n    num_list.sort()\n    num_list = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in num_list]\n    return ' '.join(num_list)\n",
        "test": "assert sort_numbers('') == ''",
        "num_ids": 974,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 1605,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list, \n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled_numbers",
        "test": "assert rescale_to_unit([1, 2, 3, 4, 5]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1194,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    # factor out 2 as many times as possible\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    \n    # check odd factors up to sqrt(n)\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 2\n    \n    # if n is a prime number greater than 2, add it to the list\n    if n > 2:\n        factors.append(n)\n    \n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == \"\"",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n\n    :param strings: List of strings to filter.\n    :param prefix: Prefix to filter by.\n    :return: List of strings that start with the given prefix.\n    \"\"\"\n\n    # Create an empty list to store the filtered strings\n    filtered_strings = []\n\n    # Iterate over the input list of strings\n    for string in strings:\n        # Check if the string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, append it to the filtered list\n            filtered_strings.append(string)\n\n    # Return the filtered list of strings\n    return filtered_strings\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 754,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 826,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(6) == False",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) == 0:\n        raise ValueError(\"Polynomial coefficients list should not be empty\")\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Polynomial coefficients list should have even number of coefficients\")\n    if not all(isinstance(x, (int, float)) for x in xs):\n        raise ValueError(\"Polynomial coefficients list should only contain integers or floats\")\n    \n    a = max(xs)\n    if a == 0:\n        raise ValueError(\"Polynomial should have at least one non zero coefficient\")\n    b = xs[xs.index(a)-1]\n    \n    return -b / a",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 1335,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = l.copy()\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    for i in indices:\n        l_prime[i] = sorted(l)[i]\n    return l_prime\n",
        "test": "assert sort_third([]) == [] # Test case 4: Empty list",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    \n    result = []\n    even_list = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    \n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_list.pop(0))\n        else:\n            result.append(l[i])\n            \n    return result\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse the cycle in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[1:-1] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(\"abcdef\") == \"bcdae\"",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef prime_fib(n: int) -> int:\n    i = 0\n    count = 0\n    while count < n:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n        i += 1\n    return fib\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1210,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line. \n    n cars are driving left to right;  simultaneously, a different set of n cars \n    are driving right to left.   The two sets of cars start out being very far from \n    each other.  All cars move in the same speed.  Two cars are said to collide \n    when a car that's moving left to right hits a car that's moving right to left. \n    However, the cars are infinitely sturdy and strong; as a result, they continue moving \n    in their trajectory as if they did not collide. \n\n    This function outputs the number of such collisions. \n    \"\"\"\n\n    # Calculate the number of collisions based on the distance between the two sets of cars\n    distance = n / 2\n    collisions = n - distance\n    return collisions\n",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n",
        "test": "assert change_base(8, 3) == \"22\"",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5 # Test case 1",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        return fib[n]\n",
        "test": "assert fib4(5) == 4",
        "num_ids": 1059,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True # Empty string is a palindrome",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return set(s0) == set(s1)",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for i in range(2, n+1):\n            c = a + b\n            a, b = b, c\n        return b\n",
        "test": "assert fib(10) == 55",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n        return True\n    elif all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    else:\n        return False\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    \n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \n    \"\"\"\n    \n    # Get the intersection of the two lists\n    intersection = set(l1).intersection(l2)\n    \n    # Convert the set to a list and sort it\n    sorted_common = sorted(list(intersection))\n    \n    return sorted_common\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 848,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 586,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    \n    # calculate the derivative coefficients\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    \n    return result\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(1) == 0",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def vowels_count(s):\n    \"\"\"\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            if i == len(s) - 1 and s[i] == 'y':\n                count -= 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    \n    # Convert integer to string\n    x = str(x)\n    \n    # If shift is greater than number of digits, reverse the string\n    if shift > len(x):\n        x = x[::-1]\n    else:\n        # Otherwise, shift the digits by shift amount\n        x = x[-shift:] + x[:-shift]\n    \n    return x\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 762,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # initialize sum variable\n    sum = 0\n    \n    # iterate through each character in the string\n    for char in s:\n        # check if character is uppercase and add its ASCII code to the sum variable\n        if char.isupper():\n            sum += ord(char)\n    \n    # return the final sum\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # Extracting number of apples and oranges from the string\n    num_apples = int(s.split()[0])\n    num_oranges = int(s.split()[-2])\n\n    # Calculating number of mangoes\n    num_mangoes = n - num_apples - num_oranges\n\n    return num_mangoes\n",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 1594,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n    \"\"\"\n\n    # Initialize variables to keep track of the smallest even value and its index\n    smallest_even_value = None\n    smallest_even_index = None\n\n    # Iterate through the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even_value is None or value < smallest_even_value:\n                smallest_even_value = value\n                smallest_even_index = index\n\n    # If we found a smallest even value, return it in a list with its index\n    if smallest_even_value is not None:\n        return [smallest_even_value, smallest_even_index]\n    # Otherwise, return an empty list\n    else:\n        return []\n",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 1496,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    # Count the frequency of each integer in the list\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the greatest integer greater than zero that has a frequency greater than or equal to the value of the integer itself\n    max_num = -1\n    for num in freq_dict:\n        if num > 0 and freq_dict[num] >= num and num > max_num:\n            max_num = num\n    \n    return max_num\n",
        "test": "assert search([4, 1, 2, 2, 3, 1]) == 2",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 960,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 986,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    \n    # Check if the list is palindromic\n    if q == q[::-1]:\n        # Check if the sum of the elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n    \n    return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 1204,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 1265,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise. \n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a == 1:\n        return False\n    for i in range(2, int(a/2)+1):\n        if a % i == 0:\n            p1, p2 = i, a//i\n            if is_prime(p1) and is_prime(p2):\n                return True\n    return False\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_multiply_prime(7) == False",
        "num_ids": 943,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    power = 1\n    while power < x:\n        power = power * n\n    return power == x\n",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def iscube(a):\n    \"\"\"\n    Returns True if a is a cube of some integer number, False otherwise.\n    \"\"\"\n    if a < 0:\n        a = -a\n    if a == 0:\n        return True\n    x = a ** (1/3)\n    return int(x + 0.5) ** 3 == a\n",
        "test": "assert iscube(1) == True",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 78,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    count = 0\n    hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    for char in num:\n        if char in hex_dict and is_prime(hex_dict[char]):\n            count += 1\n    return count\n",
        "test": "assert hex_key(\"1077E\") == 2 # true",
        "num_ids": 1627,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = 'db' + format(decimal, 'b') + 'db'\n    return binary\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n",
        "test": "assert is_happy('a') == False",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs as input and returns a list of letter grades.\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-'] # Example 1",
        "num_ids": 1986,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def prime_length(string):\n    \"\"\"\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 10\n    return bin(binary_sum)[2:]",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n",
        "test": "assert add([4, 2, 6, 7]) == 2",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. Note: You should keep the order of words\n    and blank spaces in the sentence. For example: anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo' anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return ' '.join(words)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    result = []\n    \n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, col_index))\n                \n    # Sort coordinates by rows in ascending order\n    result.sort(key=lambda x: x[0])\n    \n    # Sort coordinates of each row by columns in descending order\n    for i in range(len(result)):\n        row = result[i][0]\n        row_coordinates = [j for j in result if j[0] == row]\n        row_coordinates.sort(key=lambda x: x[1], reverse=True)\n        result[i] = row_coordinates.pop()\n    \n    return result",
        "test": "assert get_row([",
        "num_ids": 1376,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Create a copy of the given array\n    arr_copy = array.copy()\n\n    # Check if the sum of first and last index values is odd or even\n    if (arr_copy[0] + arr_copy[-1]) % 2 == 1:\n        # Sort the copied array in ascending order\n        arr_copy.sort()\n    else:\n        # Sort the copied array in descending order\n        arr_copy.sort(reverse=True)\n\n    return arr_copy",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 1035,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    else:\n        lst = sorted(set(lst))\n        if len(lst) < 2:\n            return None\n        else:\n            return lst[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    sentences = S.split('.')\n    boredoms = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    vowels = 'aeiouAEIOU'\n    new_message = ''\n    \n    for letter in message:\n        if letter in vowels:\n            if letter.islower():\n                new_letter = chr(ord(letter) + 2)\n                if new_letter > 'z':\n                    new_letter = chr(ord(letter) - 22)\n            else:\n                new_letter = chr(ord(letter) + 2)\n                if new_letter > 'Z':\n                    new_letter = chr(ord(letter) - 22)\n        else:\n            new_letter = letter.swapcase()\n            \n        new_message += new_letter\n        \n    return new_message\n",
        "test": "assert encode('Python is awesome') == 'tYNGVV ks JS FSBGS'",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum(int(d) for d in str(max_prime))\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 2168,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_dict_case(dct):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if not dct:\n        return False\n\n    lower_case = True\n    upper_case = True\n\n    for key in dct.keys():\n        if not isinstance(key, str):\n            return False\n        if key != key.lower() and key != key.upper():\n            return False\n        if key != key.lower():\n            lower_case = False\n        if key != key.upper():\n            upper_case = False\n\n    return lower_case or upper_case\n",
        "test": "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False",
        "num_ids": 1241,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_up_to(n):\n    \"\"\"\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        if len(primes) == n-2:\n            break\n    return primes\n",
        "test": "assert count_up_to(5) == [2, 3]",
        "num_ids": 965,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\n",
        "test": "assert multiply(2020, 1851) == 0",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_upper(s):\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0 # Test case 2: there are no uppercase vowels in even indices, so the function returns 0.",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    num = float(value)\n    if num.is_integer():\n        return int(num)\n    elif num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        stones.append(stones[i-1] + 2)\n    return stones\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces.\n    Your task is to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.replace(\",\", \" \").split()\n    return words\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Initialize max_even to -1\n    max_even = -1\n    # Loop through range [x, y] inclusive\n    for i in range(x, y+1):\n        # Check if i is even and greater than max_even\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even\n",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        total = 0\n        count = 0\n        for i in range(n, m+1):\n            total += i\n            count += 1\n        avg = round(total/count)\n        binary_avg = bin(avg)\n        return binary_avg\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 967,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.  \n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        has_even_digit = False\n        for j in str(i):\n            if int(j) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(i)\n    return sorted(result)\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1028,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    \n             -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n             -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n             -> sort arr -> [-1, 1, 55]\n             -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    filtered = [n for n in arr if n in digits]\n    sorted_digits = sorted(filtered)\n    reversed_digits = sorted_digits[::-1]\n    result = [names[d-1] for d in reversed_digits]\n    return result\n",
        "test": "assert by_length([1, -1 , 55]) == ['One']",
        "num_ids": 1798,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise. \n    i starts from 1. \n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). \n    Example: \n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n",
        "test": "assert f(5) == [1, 2, 6, 24, 15] # testing the example given in the docstring",
        "num_ids": 1042,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        palindrome = str(i)\n        if palindrome == palindrome[::-1]:\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1003,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(n):\n        if n < 0:\n            n = -n\n        return sum(int(d) for d in str(n))\n\n    return sum(1 for n in arr if sum_of_digits(n) > 0)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "test": "assert count_nums([]) == 0",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False. If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n                 \n    \"\"\"\n    \n    if not arr:\n        return True\n    \n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    return True\n",
        "test": "assert move_one_ball([]) == True",
        "num_ids": 1466,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    odd_count = 0\n    for num in lst1:\n        if num % 2 != 0:\n            odd_count += 1\n\n    if odd_count == 0:\n        return \"YES\"\n\n    even_list = []\n    for num in lst2:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    if len(even_list) >= odd_count:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
        "num_ids": 1194,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    # Initialize an empty dictionary to store the letter count\n    letter_count = {}\n    # Split the input string into a list of letters\n    letters = test.split()\n    # Iterate through the list of letters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_count:\n            letter_count[letter] += 1\n        # If the letter is not in the dictionary, add it with a count of 1\n        else:\n            letter_count[letter] = 1\n    # Find the maximum count\n    max_count = max(letter_count.values())\n    # Initialize an empty dictionary to store the letters with the maximum count\n    max_count_letters = {}\n    # Iterate through the letter count dictionary\n    for letter, count in letter_count.items():\n        # If the count is equal to the maximum count, add the letter to the max_count_letters dictionary\n        if count == max_count:\n            max_count_letters[letter] = count\n    return max_count_letters\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 1393,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task:\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example:\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd', False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef', False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc', True)\n    \"\"\"\n    # Delete all characters in s that are equal to any character in c\n    s = ''.join([char for char in s if char not in c])\n    # Check if the result string is palindrome\n    is_palindrome = s == s[::-1]\n    return s, is_palindrome\n",
        "test": "assert reverse_delete(\"abcde\",\"ae\") == (\"bcd\",False)",
        "num_ids": 1014,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    result = []\n\n    for string in lst:\n        odd_count = sum(int(digit) % 2 == 1 for digit in string)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the input.\")\n\n    return result\n",
        "test": "assert odd_count([]) == []",
        "num_ids": 1472,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return None\n    min_sum = float('inf')\n    curr_sum = 0\n    start = 0\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        while curr_sum >= min_sum and start <= i:\n            curr_sum -= nums[start]\n            start += 1\n    return min_sum\n",
        "test": "assert minSubArraySum([0, 1, 2, 3, 4, 5]) == 0",
        "num_ids": 911,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water. Each well has a corresponding bucket\n    that can be used to extract water from it, and all buckets have the same capacity. Your task\n    is to use the buckets to empty the wells. Output the number of times you need to lower the buckets.\n    \n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n    \n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n    \n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    total_water = sum([sum(row) for row in grid])\n    if total_water == 0:\n        return 0\n    \n    num_buckets = math.ceil(total_water / capacity)\n    return num_buckets\n",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
        "num_ids": 1600,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order. For similar number of ones, \n    sort based on decimal value.\n    \"\"\"\n    def count_ones(n):\n        \"\"\"\n        Returns the number of ones in the binary representation of n.\n        \"\"\"\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
        "test": "assert sort_array([10, 100, 20, 2, 1]) == [1, 2, 10, 20, 100]",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in \"aeiou\")\n        if consonants == n:\n            result.append(word)\n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    word = list(word)\n    index = len(word) - 1\n    while index > 0:\n        if word[index] in vowels and word[index - 1] not in vowels and word[index + 1] not in vowels:\n            return word[index]\n        index -= 1\n    return \"\"",
        "test": "assert get_closest_vowel(\"quick\") == \"\"",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good. \n    A string S is considered to be good if and only if all parentheses in S \n    are balanced. For example: the string '(())()' is good, while the string \n    '())' is not. \n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise. \n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    \n    def is_good(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n    \n    s1, s2 = lst\n    for i in range(len(s1) + 1):\n        s = s1[:i] + s2 + s1[i:]\n        if is_good(s):\n            return 'Yes'\n    return 'No'\n",
        "test": "assert match_parens(['(', ')(']) == 'No'",
        "num_ids": 1285,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Create a list of tuples where the first element is the value from the array\n    # and the second element is the index of the value in the array\n    indexed_arr = [(num, i) for i, num in enumerate(arr)]\n\n    # Sort the list of tuples based on the values in descending order\n    sorted_arr = sorted(indexed_arr, key=lambda x: x[0], reverse=True)\n\n    # Extract the first k values from the sorted list and sort them in ascending order\n    result = sorted([num for num, i in sorted_arr[:k]])\n\n    return result\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1122,
        "indeed": true
    },
    {
        "number": 121,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through the list and add the odd elements that are in even positions\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum += lst[i]\n    \n    # Return the sum\n    return sum\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum\n",
        "test": "assert add_elements([100, 200, 300, 400, 500, 600, 700, 800, 900], 4) == 0",
        "num_ids": 1181,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n       1. Collatz(1) is [1].\n       2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    collatz_seq = []\n    while n != 1:\n        collatz_seq.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    collatz_seq.append(1)\n    odd_nums = [num for num in collatz_seq if num % 2 != 0]\n    odd_nums.sort()\n    return odd_nums\n",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 1529,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is within the valid range (1-12)\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is within the valid range for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2 and (day < 1 or day > 29):  # Check for leap year\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return day <= 29\n        else:\n            return day <= 28\n\n    # Check if the year is a 4-digit number\n    if len(str(year)) != 4:\n        return False\n\n    return True",
        "test": "assert valid_date('01-01-2000') == True",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 == 0)\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # Check if the list is already sorted\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    # Check if there are more than 1 duplicate of the same number\n    for i in range(len(lst)):\n        count = lst.count(lst[i])\n        if count > 1:\n            return False\n    \n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"\n    Determines whether the length of intersection of two closed intervals is a prime number.\n    If it is, returns \"YES\", otherwise returns \"NO\".\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Determine the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    # Check if the intervals intersect\n    if intersection_start <= intersection_end:\n        # Calculate the length of the intersection\n        intersection_length = intersection_end - intersection_start + 1\n\n        # Check if the length is a prime number\n        is_prime = True\n        if intersection_length < 2:\n            is_prime = False\n        else:\n            for i in range(2, intersection_length):\n                if intersection_length % i == 0:\n                    is_prime = False\n                    break\n        if is_prime:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if len(arr) == 0:\n        return None\n\n    sign_product = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n            \n        sum_of_magnitudes += abs(num)\n        \n    return sum_of_magnitudes * sign_product\n",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def findPaths(path, steps, visited, i, j):\n        if steps == 0:\n            return [path]\n\n        paths = []\n        for x, y in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = i + x, j + y\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid) and (nx, ny) not in visited and grid[nx][ny] > path[-1]:\n                new_path = path + [grid[nx][ny]]\n                new_visited = visited | {(nx, ny)}\n                paths.extend(findPaths(new_path, steps - 1, new_visited, nx, ny))\n\n        return paths\n\n    paths = findPaths([grid[0][0]], k, {(0, 0)}, 0, 0)\n    return min(paths) ",
        "test": "assert minPath([[1,2,3], [4,5,6], [7,8,9], [10,11,12]], 5) == [1, 2, 1, 2, 1]",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def tri(n):\n    \"\"\"\n    Returns the first n+1 numbers of the Tribonacci sequence.\n    \"\"\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tribonacci = [1, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i/2)\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1])\n        return tribonacci\n",
        "test": "assert tri(0) == [1]",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    all_even = True\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            all_even = False\n        n //= 10\n    if all_even:\n        return 0\n    else:\n        return product\n",
        "test": "assert digits(4) == 0 # returns 0, all digits are even",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0\n",
        "test": "assert is_nested('[][]') == False",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    total = 0\n    for num in lst:\n        ceil_num = math.ceil(num)\n        total += ceil_num ** 2\n    return total\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 876,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if len(txt) == 0:\n        return False\n    \n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    \n    return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index\n",
        "test": "assert can_arrange([1, 2, 4, 3, 5]) == 3",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 136,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    \n    if len(negatives) == 0:\n        a = None\n    else:\n        a = max(negatives)\n        \n    if len(positives) == 0:\n        b = None\n    else:\n        b = min(positives)\n        \n    return (a, b)\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 1074,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Convert strings with , to . for float conversion\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n\n    # Convert variables to float or int if possible\n    try:\n        a = float(a)\n    except ValueError:\n        pass\n\n    try:\n        b = float(b)\n    except ValueError:\n        pass\n\n    # Compare the variables and return the larger one\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1109,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    even_num = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_num += 1\n            if even_num == 4:\n                return True\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result\n\ndef factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n",
        "test": "assert special_factorial(4) == 288 # Check special_factorial(4) returns 288",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \"\"\"\n    if '  ' in text:\n        text = text.replace('  ', '-')\n    return text.replace(' ', '_')",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in file_name)\n    if digits_count > 3:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Check if the substring before the dot starts with a letter and is not empty\n    if not file_name[0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    extension = file_name.split('.')[-1]\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all checks pass, return 'Yes'\n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == 'Yes'",
        "num_ids": 1375,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    \n    return sum(lst)\n",
        "test": "assert sum_squares([1,2,3]) == 6",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Main function to return a string containing words whose lengths are prime numbers,\n    in the same order as the original sentence.\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_numerator, x_denominator = [int(i) for i in x.split('/')]\n    n_numerator, n_denominator = [int(i) for i in n.split('/')]\n    \n    numerator = x_numerator * n_numerator\n    denominator = x_denominator * n_denominator\n    \n    if numerator % denominator == 0:\n        return True\n    else:\n        return False",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits, \n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Define a helper function to calculate the sum of digits of a number\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    # Sort the list by the sum of digits and their index\n    nums.sort(key=lambda n: (digit_sum(n), nums.index(n)))\n    \n    return nums\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        # Check if the number is greater than 10\n        if num > 10:\n            # Convert the number to a string and check the first and last digits\n            str_num = str(abs(num))  # Get the absolute value of the number and convert to string\n            if len(str_num) > 1:\n                first_digit = int(str_num[0])\n                last_digit = int(str_num[-1])\n                if first_digit % 2 == 1 and last_digit % 2 == 1:\n                    count += 1\n    return count\n",
        "test": "assert specialFilter([11, 13, 15, 17, 19]) == 5",
        "num_ids": 1107,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]  # generate the array a\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1+1:idx2])\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 999,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Delete strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length of each word and alphabetically if lengths are same\n    lst = sorted(lst, key=lambda x: (len(x), x))\n\n    return lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1058,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Examples:\n    x_or_y(7, 34, 12) == 34\n    x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\n    If the input list is empty, return 0.\n    '''\n\n    # initialize a variable to store the sum of squares of odd numbers\n    sum_of_squares = 0\n\n    # iterate over the list of numbers\n    for num in lst:\n        # check if the number is a positive odd integer\n        if num > 0 and type(num) == int and num % 2 == 1:\n            # add the square of the number to the sum_of_squares variable\n            sum_of_squares += num ** 2\n\n    # return the sum of squares of odd numbers\n    return sum_of_squares\n",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 10",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def compare(game, guess):\n    \"\"\"\n    Compare the game results with the guesses and return the absolute differences.\n    \n    :param game: List of actual game results.\n    :param guess: List of guesses.\n    :return: List of absolute differences between game results and guesses.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        difference = abs(game[i] - guess[i])\n        result.append(difference)\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1029,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Finds the strongest extension and returns a string in the format ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, the first one is returned.\n    \"\"\"\n    strongest_strength = float('-inf')\n    strongest_extension = None\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
        "test": "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids": 1430,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n    \"\"\"\n\n    n = len(a)\n    m = len(b)\n\n    # Check if the length of b is greater than a\n    if m > n:\n        return False\n\n    # Rotate the string b by 1 and check if it's a substring of a\n    for i in range(m):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Define the roman numeral symbols and their values\n    roman_dict = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1,\n    }\n\n    # Initialize the result string\n    result = ''\n\n    # Iterate over the roman symbols from largest to smallest\n    for symbol, value in roman_dict.items():\n        # If the number is greater than or equal to the value of the current symbol,\n        # add the symbol to the result and subtract its value from the number\n        while number >= value:\n            result += symbol\n            number -= value\n\n    # Return the result in lowercase\n    return result.lower()\n",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 1614,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the sum of the lengths of any two sides is greater than or equal to the length of the third side\n    if a + b >= c or a + c >= b or b + c >= a:\n        # Check if the square of the longest side is equal to the sum of squares of the other two sides\n        if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n            return True\n    return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 818,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings. \n    The list contains different words. Return the word with maximum number \n    of unique characters. If multiple strings have maximum number of unique \n    characters, return the one which comes first in lexicographical order. \n    \n    find_max([\"name\", \"of\", \"string\"]) == \"string\" \n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\" \n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\" \n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                        the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = remaining - min(need, remaining)\n    return [total_eaten, remaining_carrots]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 1448,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Initialize the expression string with the first operand\n    expression = str(operand[0])\n    \n    # Loop through the operator and operand lists\n    for i in range(len(operator)):\n        # Add the current operator and operand to the expression string\n        expression += operator[i]\n        expression += str(operand[i+1])\n    \n    # Evaluate the expression and return the result\n    return eval(expression)",
        "test": "assert do_algebra(['+', '-'], [2, 3, 4]) == 1",
        "num_ids": 1139,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is. If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    \n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # If it's a letter, reverse its case\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            # If it's not a letter, keep it as it is\n            result += char\n            \n    # If the string contains no letters, reverse it\n    if not any(char.isalpha() for char in s):\n        result = s[::-1]\n        \n    return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 924,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 850,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a  # swap the numbers if a is greater than b\n    even_digits = [str(i) for i in range(a, b+1) if all(int(digit)%2 == 0 for digit in str(i))]\n    return sorted(list(map(int, even_digits)))\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 955,
        "indeed": false
    }
]