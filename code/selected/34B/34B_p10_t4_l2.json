[
    {
        "number": 0,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 3233,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those. \n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n\n    # Initialize a list to store the separate groups\n    groups = []\n\n    # Initialize a variable to keep track of the current group being processed\n    current_group = ''\n\n    # Loop through each character in the input string\n    for char in paren_string:\n        # If the current character is an opening parenthesis, start a new group\n        if char == '(':\n            current_group += '('\n        # If the current character is a closing parenthesis, add it to the current group and check if it's complete\n        elif char == ')':\n            current_group += ')'\n            # If the current group is complete (i.e. it has as many opening as closing parentheses), add it to the list of groups\n            if current_group.count('(') == current_group.count(')'):\n                groups.append(current_group)\n                current_group = ''\n\n    # Return the list of groups\n    return groups\n",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 3416,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1863,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1793,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(numbers)\n    return mad\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 3248,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
        "num_ids": 2680,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def max_depth(paren_string: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for char in paren_string:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [max_depth(group) for group in paren_string.split()]\n",
        "test": "assert parse_nested_parens('() (()) ((()))') == [1, 2, 3]",
        "num_ids": 3047,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 2300,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2652,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 3031,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n\n    n = len(string)\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2653,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert the strings into lists of integers\n    a_list = [int(i) for i in a]\n    b_list = [int(i) for i in b]\n\n    # Perform XOR operation on the corresponding elements of the lists\n    result_list = [a_list[i] ^ b_list[i] for i in range(len(a_list))]\n\n    # Convert the result list into a string\n    result_string = ''.join([str(i) for i in result_list])\n\n    return result_string\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 2549,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str",
        "test": "assert longest([]) == None",
        "num_ids": 2114,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1772,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert all_prefixes(\"\") == []",
        "num_ids": 1841,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))\n",
        "test": "assert string_sequence(0) == \"0\"",
        "num_ids": 1724,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lower case to ignore the case\n    string = string.lower()\n    \n    # Create an empty set to store the distinct characters\n    distinct_characters = set()\n    \n    # Loop through each character in the string\n    for char in string:\n        # Add the character to the set if it's not already there\n        if char not in distinct_characters:\n            distinct_characters.add(char)\n    \n    # Return the length of the set\n    return len(distinct_characters)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 2313,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    durations = [note_map[note] for note in notes]\n    return durations",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 6412,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while True:\n        i = string.find(substring, i)\n        if i == -1:\n            break\n        count += 1\n        i += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 2127,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n        Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n        Return the string with numbers sorted from smallest to largest\n        >>> sort_numbers('three one five')\n        'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)\n",
        "test": "assert sort_numbers(\"three one five\") == \"one three five\"",
        "num_ids": 2990,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest\n    to each other and return them in order (smaller number, larger number).\n    \"\"\"\n    # Sort the list of numbers\n    sorted_numbers = sorted(numbers)\n\n    # Initialize variables to store the closest pair of numbers and their difference\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_diff = abs(sorted_numbers[1] - sorted_numbers[0])\n\n    # Loop through the sorted list of numbers starting from the second element\n    for i in range(1, len(sorted_numbers)):\n        # Calculate the difference between the current number and the previous one\n        diff = abs(sorted_numbers[i] - sorted_numbers[i-1])\n\n        # If the difference is smaller than the current minimum, update the closest pair and the minimum difference\n        if diff < min_diff:\n            closest_pair = (sorted_numbers[i-1], sorted_numbers[i])\n            min_diff = diff\n\n    return closest_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 5050,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    diff = max_num - min_num\n    return [(num - min_num) / diff for num in numbers]\n\n\nif __name__ == \"__main__\":\n    print(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 4011,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 2161,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 1077,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "test": "assert largest_divisor(25) == 5",
        "num_ids": 1595,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    i = 2\n\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\n    if n > 1:\n        factors.append(n)\n\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 2616,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2580,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 1752,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 1428,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 2273,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 3035,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    # 1 is not a prime number\n    if n == 1:\n        return False\n\n    # Check if n is divisible by any number between 2 and n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True\n",
        "test": "assert is_prime(2) == True",
        "num_ids": 1855,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients must be even.\")\n\n    max_coeff = max(xs)\n    if max_coeff == 0:\n        raise ValueError(\"Largest non-zero coefficient not found.\")\n\n    # Use the bisection method to find a zero point\n    a, b = -1, 1\n    while b - a > 1e-8:\n        mid = (a + b) / 2\n        if poly(xs, mid) * poly(xs, a) > 0:\n            a = mid\n        else:\n            b = mid\n\n    return round((a + b) / 2, 2)",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 4887,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_sorted = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    return [l_sorted.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]\n",
        "test": "assert sort_third([]) == []",
        "num_ids": 4214,
        "indeed": true
    },
    {
        "number": 34,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 2005,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 2117,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 1803,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    return [l[i] if i % 2 == 1 else sorted(l[::2])[i//2] for i in range(len(l))]\n",
        "test": "assert sort_even([]) == []",
        "num_ids": 3908,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 34,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse the cycling for each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"ab\")) == \"ab\"",
        "num_ids": 3126,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> int:\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n            if count == n:\n                return fibonacci(i)\n        i += 1",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 2705,
        "indeed": true
    },
    {
        "number": 40,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 4046,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.  n cars are driving left\n    to right;  simultaneously, a different set of n cars are driving right to left.  The two\n    sets of cars start out being very far from each other.  All cars move in the same speed.  Two\n    cars are said to collide when a car that's moving left to right hits a car that's moving right\n    to left.  However, the cars are infinitely sturdy and strong; as a result, they continue\n    moving in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n // 2",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 2812,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 2605,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    # Create an empty dictionary to store the count of each element\n    count_dict = {}\n    \n    # Iterate through the list and update the count of each element in the dictionary\n    for i in l:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    \n    # Check if there are two distinct elements that sum to zero\n    for i in count_dict:\n        if -i in count_dict and (i != -i or count_dict[i] > 1):\n            return True\n    \n    # If no such pair is found, return False\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 2858,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    \n    # Convert the input number to the desired base using division and modulus operations\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    \n    return result\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2522,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5, \"Expected area is incorrect.\"",
        "num_ids": 1373,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        return fib[n]",
        "test": "assert fib4(5) == 4",
        "num_ids": 3136,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (sorted(l)[n//2-1] + sorted(l)[n//2]) / 2\n    else:\n        return sorted(l)[n//2]\n",
        "test": "assert median([1, 1, 1, 1, 1]) == 1",
        "num_ids": 2277,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    \n    # Removing spaces and converting string to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # Checking if the reversed string is the same as the original string\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True ",
        "num_ids": 1797,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 2033,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 36,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert decode_shift(encode_shift(\"abcde\")) == \"abcde\"",
        "num_ids": 2474,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 2258,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1769,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 1119,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    s0_chars = set(s0)\n    s1_chars = set(s1)\n    return s0_chars == s1_chars",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 2613,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(10) == 55",
        "num_ids": 1517,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack  # return True if stack is empty\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 2049,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    direction = l[1] - l[0]\n    for i in range(2, len(l)):\n        new_direction = l[i] - l[i-1]\n        if new_direction * direction < 0:\n            return False\n        direction = new_direction\n    return True\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 2620,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(set1.intersection(set2))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2904,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 1623,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 2092,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 2076,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    \n    # If the polynomial has no terms, its derivative is also zero.\n    if len(xs) == 0:\n        return []\n    \n    # Calculate the derivative of each term and return the result.\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    \n    return result\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 2869,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    # Initialize the first three elements of the sequence\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Compute the remaining elements of the sequence recursively\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(1) == 0",
        "num_ids": 3158,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set('aeiouy')\n    count = 0\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.lower() == 'y' and i != len(s)-1:\n                continue\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 2471,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def circular_shift(x, shift):\n    \"\"\"\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 2412,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    \n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Add the ASCII code of the character to the sum variable\n            sum += ord(char)\n    \n    # Return the sum\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 2224,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    # Initialize counters for apples and oranges\n    apples = 0\n    oranges = 0\n    # Loop over the words and update the counters\n    for i in range(len(words)):\n        if words[i] == 'apples':\n            apples = int(words[i-1])\n        elif words[i] == 'oranges':\n            oranges = int(words[i-1])\n    # Calculate the number of mangoes and return it\n    return n - apples - oranges\n",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 4594,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                        so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n\n    if not even_nodes:\n        return []\n    else:\n        smallest_even_node = min(even_nodes)\n        return [smallest_even_node[0], smallest_even_node[1]]\n",
        "test": "assert pluck([4,2,3]) == [2, 1], \"Test 1 failed\"",
        "num_ids": 5285,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list. \n    If no such a value exist, return -1. \n    Examples: \n        search([4, 1, 2, 2, 3, 1]) == 2 \n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 \n        search([5, 5, 4, 4, 4]) == -1 \n    '''\n    \n    # Create a dictionary to store the frequency of each integer\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the greatest integer greater than zero that has a frequency greater than or equal to its value\n    max_num = -1\n    for num in freq_dict:\n        if num > 0 and freq_dict[num] >= num and num > max_num:\n            max_num = num\n    \n    return max_num\n",
        "test": "assert search([5, 5, 4, 4, 4]) == -1",
        "num_ids": 3946,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    res = []\n    while lst:\n        res.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            res.append(max(lst))\n            lst.remove(max(lst))\n    return res\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 3364,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00 # valid triangle with sides 3, 4, 5",
        "num_ids": 3413,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    \n    # checking if the list is a palindrome\n    if q == q[::-1]:\n        # checking if the sum of elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 3727,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 3304,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 4144,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise. Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    def is_prime(n):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Check if the given number is a multiplication of three prime numbers.\n    for i in range(2, int(a/2)+1):\n        if is_prime(i) and is_prime(a/i):\n            return True\n    return False\n",
        "test": "assert is_multiply_prime(69) == True",
        "num_ids": 2918,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == n:\n        return True\n    i = 0\n    while x > 1:\n        x = x / n\n        i += 1\n    return x == 1 and int(x) == x\n",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 2604,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    \n    if a == 0:\n        return True\n    else:\n        for i in range(1, abs(a)+1):\n            if i**3 == abs(a):\n                return True\n        return False\n",
        "test": "assert iscube(1) == True",
        "num_ids": 2139,
        "indeed": true
    },
    {
        "number": 78,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,... \n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase. \n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in range(len(num)):\n        if num[i].isdigit():\n            if int(num[i]) in primes:\n                count += 1\n        else:\n            if int(num[i], 16) in primes:\n                count += 1\n    return count\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 4051,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # convert to binary and remove '0b' prefix\n    return f\"db{binary}db\"\n",
        "test": "assert decimal_to_binary(255) == \"db11111111db\"",
        "num_ids": 2147,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    \n    return True\n",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 2570,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs as input and returns a list of letter grades.\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa >= 3.7:\n            letter_grades.append(\"A\")\n        elif gpa >= 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa >= 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa >= 2.7:\n            letter_grades.append(\"B\")\n        elif gpa >= 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa >= 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa >= 1.7:\n            letter_grades.append(\"C\")\n        elif gpa >= 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa >= 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa >= 0.7:\n            letter_grades.append(\"D\")\n        elif gpa >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0]) == ['A+']",
        "num_ids": 6645,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def prime_length(string):\n    \"\"\"\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    # Get the length of the string\n    length = len(string)\n\n    # Check if the length is less than 2 (which is not a prime number)\n    if length < 2:\n        return False\n\n    # Check if the length is 2 (which is a prime number)\n    if length == 2:\n        return True\n\n    # Check if the length is divisible by any number between 2 and length-1\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n\n    # If the length is not divisible by any number between 2 and length-1, it is a prime number\n    return True\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 1999,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1  # 1 starts and ends with 1",
        "num_ids": 2884,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    \n    # Convert the integer to a string\n    num_str = str(N)\n    \n    # Initialize the sum\n    binary_sum = 0\n    \n    # Iterate through each character in the string\n    for char in num_str:\n        # Convert the character to an integer and add it to the sum\n        binary_sum += int(char)\n    \n    # Convert the sum to binary and return the result as a string\n    return bin(binary_sum)[2:]",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 3174,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
        "test": "assert add([4, 2, 6, 7]) == 2",
        "num_ids": 2001,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. \n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    words = s.split(\" \") # split the string into words\n    new_words = [] # initialize an empty list to store the ordered words\n    for word in words:\n        new_word = \"\".join(sorted(word)) # sort the characters in each word and join them back\n        new_words.append(new_word) # add the ordered word to the list\n    return \" \".join(new_words) # join the words with spaces and return the result\n",
        "test": "assert anti_shuffle(\"Hi\") == \"Hi\"",
        "num_ids": 3108,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row in range(len(lst)):\n        for col in range(len(lst[row])-1, -1, -1):\n            if lst[row][col] == x:\n                result.append((row, col))\n    return sorted(result, key=lambda x: (x[0], -x[1]))",
        "test": "assert get_row([], 1) == []",
        "num_ids": 4252,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even.\n    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    array_copy = array.copy()\n    if len(array_copy) <= 1:\n        return array_copy\n\n    if (array_copy[0] + array_copy[-1]) % 2 == 1:\n        array_copy.sort()\n    else:\n        array_copy.sort(reverse=True)\n    \n    return array_copy\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 4194,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = \"\"\n    for char in s:\n        # check if character is uppercase or lowercase\n        if char.isupper():\n            # shift uppercase letters by two multiplied by two places\n            result += chr((ord(char) - 65 + (2 * 2)) % 26 + 65)\n        elif char.islower():\n            # shift lowercase letters by two multiplied by two places\n            result += chr((ord(char) - 97 + (2 * 2)) % 26 + 97)\n        else:\n            # leave non-letter characters as they are\n            result += char\n    return result\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 3413,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 2576,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    sentences = S.split(\".\")\n    boredoms = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 2925,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \n    '''\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    return any(i in [x+y, x+z, y+z] for i in (x, y, z))\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 2497,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            if char.isupper():\n                result += chr(ord(char) + 2)\n            else:\n                result += chr(ord(char) + 2).lower()\n        else:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n    return result",
        "test": "assert encode('Python is fun') == 'tGNGGG S CGGZ CGGY'",
        "num_ids": 3397,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n\n    def is_prime(n):\n        \"\"\"\n        Returns True if n is a prime number, else False.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Remove all non-prime numbers from the list\n    primes = [n for n in lst if is_prime(n)]\n    \n    # Find the largest prime number\n    largest_prime = max(primes)\n\n    # Sum the digits of the largest prime number\n    digits_sum = sum(int(digit) for digit in str(largest_prime))\n\n    return digits_sum\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 6244,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(d) == 0:\n        return False\n    \n    lower = True\n    upper = True\n    for key in d.keys():\n        if not isinstance(key, str):\n            return False\n        if key != key.lower() and key != key.upper():\n            return False\n        if key != key.lower():\n            lower = False\n        if key != key.upper():\n            upper = False\n    \n    return lower or upper\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 4249,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_up_to(n):\n    \"\"\"\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    \n    # Initialize an empty list to store the prime numbers\n    prime_list = []\n\n    # Loop through all numbers less than n\n    for num in range(2, n):\n        # Check if the number is prime or not\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, add it to the list\n        if is_prime:\n            prime_list.append(num)\n\n        # If the list length equals n, return the list\n        if len(prime_list) == n:\n            return prime_list\n\n    # Return the list of prime numbers\n    return prime_list\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 3707,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Get the unit digits of the input numbers\n    unit_a = a % 10\n    unit_b = b % 10\n    # Return the product of the unit digits\n    return unit_a * unit_b\n",
        "test": "assert multiply(2020, 1851) == 0",
        "num_ids": 2417,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0 # test case 2",
        "num_ids": 1896,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 3226,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones_in_each_level = [n]\n    for i in range(1, n):\n        stones_in_each_level.append(stones_in_each_level[i-1]+2)\n    return stones_in_each_level\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 3298,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces.\n    Your task is to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.replace(',', ' ').split()\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 3011,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Check if x and y are positive integers\n    if not (isinstance(x, int) and isinstance(y, int) and x > 0 and y > 0):\n        raise ValueError(\"x and y must be positive integers\")\n\n    # Find the biggest even integer in the range [x, y]\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    # If there's no even number in the range, return -1\n    return -1\n",
        "test": "assert choose_num(10, 10) == 10",
        "num_ids": 2974,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    avg = round(total / (m - n + 1))\n    binary_avg = bin(avg)\n    return binary_avg",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 3291,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit. \n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    result = []\n    for i in x:\n        has_even_digit = False\n        for digit in str(i):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(i)\n    result.sort()\n    return result\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 3278,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    \n         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n         -> sort arr -> [-1, 1, 55]\n         -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Define a dictionary to map digits to their corresponding names\n    digit_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # Filter out numbers not between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the filtered array and reverse it\n    sorted_arr = sorted(filtered_arr, reverse=True)\n\n    # Replace each digit with its corresponding name\n    result = [digit_to_name[num] for num in sorted_arr]\n\n    return result\n",
        "test": "assert by_length([1, -1, 55]) == ['One']",
        "num_ids": 5873,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def factorial(n):\n    \"\"\"Return the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise. \n    i starts from 1. \n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). \n    Example: \n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result",
        "test": "assert f(5) == [1, 2, 6, 24, 15]",
        "num_ids": 3569,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Checks if a given number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, returns a tuple with the number of even and odd integer palindromes within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 3105,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0. \n    If a number is negative, then its first signed digit will be negative: \n    e.g. -123 has signed digits -1, 2, and 3. \n    >>> count_nums([]) == 0 \n    >>> count_nums([-1, 11, -11]) == 1 \n    >>> count_nums([1, 1, 2]) == 3 \n    \"\"\"\n    count = 0\n    \n    for num in arr:\n        digit_sum = sum(int(digit) for digit in str(abs(num)))\n        if num < 0:\n            digit_sum += 1\n        if digit_sum > 0:\n            count += 1\n    \n    return count\n",
        "test": "assert count_nums([]) == 0 # test empty array",
        "num_ids": 2838,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    Returns True if it is possible to sort the array in non-decreasing order\n    by performing right shift operations, otherwise returns False.\n    \"\"\"\n    if not arr:  # empty array is already sorted\n        return True\n    \n    n = len(arr)\n    leftmost_incorrect = -1  # index of leftmost incorrect element\n    for i in range(n):\n        if leftmost_incorrect == -1:\n            if i < n-1 and arr[i] > arr[i+1]:\n                leftmost_incorrect = i\n        else:\n            if arr[i] < arr[leftmost_incorrect]:\n                return False\n    \n    return True\n",
        "test": "assert move_one_ball([])==True # Test case 3",
        "num_ids": 4777,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    # Count the number of odd elements in lst1 and even elements in lst2\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    even_count = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If there are more odd elements in lst1 than even elements in lst2, it's not possible to make all elements of lst1 even\n    if odd_count > even_count:\n        return \"NO\"\n    \n    # Otherwise, it's possible to make all elements of lst1 even by exchanging elements with lst2\n    return \"YES\"\n",
        "test": "assert exchange([3, 1, 2, 5], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 4407,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Split the string into a list of characters\n    chars = test.split()\n    \n    # Create an empty dictionary to store the letter counts\n    counts = {}\n    \n    # Loop through each character in the list\n    for char in chars:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in counts:\n            counts[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            counts[char] = 1\n            \n    # Find the maximum count in the dictionary\n    max_count = max(counts.values())\n    \n    # Create an empty dictionary to store the letters with the maximum count\n    max_letters = {}\n    \n    # Loop through the keys and values in the counts dictionary\n    for key, value in counts.items():\n        # If the value is equal to the maximum count, add the key to the max_letters dictionary\n        if value == max_count:\n            max_letters[key] = value\n    \n    return max_letters\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 4628,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd', False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef', False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc', True)\n    \"\"\"\n    # Delete all characters in s that are equal to any character in c\n    s = ''.join(ch for ch in s if ch not in c)\n    # Check if the result string is palindrome\n    is_palindrome = s == s[::-1]\n    # Return the result string and True/False for the check\n    return s, is_palindrome\n",
        "test": "assert reverse_delete(\"abcde\",\"ae\") == (\"bcd\",False)",
        "num_ids": 2951,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_count(lst):\n    result = []\n    for s in lst:\n        n_odd = sum(int(c) % 2 == 1 for c in s)\n        result.append(f\"the number of odd elements {n_odd}n the str{n_odd}ng {n_odd} of the {n_odd}nput.\")\n    return result\n",
        "test": "assert odd_count([]) == []",
        "num_ids": 4587,
        "indeed": true
    },
    {
        "number": 114,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    curr_sum = 0\n    start = 0\n    \n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        \n        if curr_sum < min_sum:\n            min_sum = curr_sum\n            \n        if curr_sum > 0:\n            curr_sum = 0\n            start = i + 1\n            \n    return min_sum\n",
        "test": "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
        "num_ids": 2865,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 33,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    # Calculate the total amount of water\n    total_water = sum(sum(row) for row in grid)\n\n    # Calculate the number of buckets needed\n    num_buckets = math.ceil(total_water / capacity)\n\n    return num_buckets",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0, \"Test 3 failed\"",
        "num_ids": 5869,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array by the number of ones in their binary representation\n    arr.sort(key=lambda x: bin(x).count('1'))\n    # Sort the array by decimal value if the number of ones in their binary representation is the same\n    arr.sort()\n    return arr\n",
        "test": "assert sort_array([0, 2, 3, 1]) == [0, 1, 2, 3]",
        "num_ids": 3807,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    # Split the string into words\n    words = s.split()\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    # Initialize an empty list to store the matching words\n    matches = []\n    # Iterate over the words and check if they have exactly n consonants\n    for word in words:\n        if sum(1 for char in word if char.lower() in consonants) == n:\n            matches.append(word)\n    return matches\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 2929,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\"",
        "num_ids": 3285,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_good(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    for s1 in lst:\n        for s2 in lst:\n            if is_good(s1 + s2):\n                return 'Yes'\n    return 'No'",
        "test": "assert match_parens(['()()', '()()']) == 'Yes'",
        "num_ids": 3740,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # create a new list and copy the elements of arr into it\n    temp_arr = []\n    for i in range(len(arr)):\n        temp_arr.append(arr[i])\n\n    # sort the new list in descending order\n    temp_arr.sort(reverse=True)\n\n    # create a new list to store the k maximum numbers\n    result = []\n    for i in range(k):\n        result.append(temp_arr[i])\n\n    # sort the result list in ascending order\n    result.sort()\n\n    return result\n",
        "test": "assert maximum([5, 5, 5, 5, 5], 3) == [5, 5, 5]",
        "num_ids": 4327,
        "indeed": true
    },
    {
        "number": 121,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    odd_elements_in_even_positions = []\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            odd_elements_in_even_positions.append(lst[i])\n    return sum(odd_elements_in_even_positions)\n",
        "test": "assert solution([2, 4, 6, 8, 10]) == 0 # Testing no odd element in even position",
        "num_ids": 2226,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    for i in range(k):\n        if arr[i] < 100:\n            total_sum += arr[i]\n    return total_sum",
        "test": "assert add_elements([1,2,3,4,5,6,7,8,9], 9) == 45 # sum of all elements",
        "num_ids": 3702,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n       1. Collatz(1) is [1].\n       2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_seq = []\n    while n != 1:\n        collatz_seq.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    collatz_seq.append(1)\n\n    odd_numbers = []\n    for num in collatz_seq:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return sorted(odd_numbers)\n",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 7347,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # Check if the date string is empty\n    if date == '':\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = date.split('-')\n\n    # Check if the year is a leap year\n    leap_year = False\n    if (int(year) % 4 == 0) and (int(year) % 100 != 0) or (int(year) % 400 == 0):\n        leap_year = True\n\n    # Check if the month is valid\n    if int(month) < 1 or int(month) > 12:\n        return False\n\n    # Check if the number of days is valid\n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and (int(day) < 1 or int(day) > 31):\n        return False\n    elif int(month) in [4, 6, 9, 11] and (int(day) < 1 or int(day) > 30):\n        return False\n    elif int(month) == 2 and leap_year and (int(day) < 1 or int(day) > 29):\n        return False\n    elif int(month) == 2 and not leap_year and (int(day) < 1 or int(day) > 28):\n        return False\n\n    # Check if the date is in the correct format\n    if len(year) != 4 or len(month) != 2 or len(day) != 2:\n        return False\n\n    return True\n",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 5486,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if ord(char) % 2 != 0:\n                count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 3120,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        elif lst[i] == lst[i + 1]:\n            count = 1\n            j = i + 1\n            while j < len(lst) and lst[j] == lst[i]:\n                count += 1\n                j += 1\n            if count > 1:\n                return False\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 4462,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"\n    Determines whether the length of intersection of two intervals is a prime number.\n    Returns \"YES\" if it is, \"NO\" otherwise.\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    # Find the intersection of the two intervals\n    start = max(start1, start2)\n    end = min(end1, end2)\n    intersection_length = end - start\n    # Check if the length of intersection is a prime number\n    if intersection_length <= 0:\n        return \"NO\"\n    elif is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef is_prime(n):\n    \"\"\"\n    Determines whether a number is prime or not.\n    Returns True if it is, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert intersection((-3, -1), (-5, 5)) == \"YES\"",
        "num_ids": 4186,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    \n    signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        signs *= 1 if num > 0 else -1 if num else 0\n        sum_of_magnitudes += abs(num)\n    \n    return sum_of_magnitudes * signs\n",
        "test": "assert prod_signs([]) == None",
        "num_ids": 3031,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def isValid(x, y):\n        return 0 <= x < len(grid) and 0 <= y < len(grid)\n\n    def dfs(x, y, k):\n        if k == 0:\n            return []\n\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if isValid(nx, ny) and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                return [grid[x][y]] + dfs(nx, ny, k - 1)\n\n    visited = set()\n    for i in range(len(grid)):\n        for j in range(len(grid)):\n            visited.add((i, j))\n            path = dfs(i, j, k)\n            if path:\n                return path",
        "test": "assert minPath([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1) == [1]",
        "num_ids": 5875,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4) \n               = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    # Define the first three elements of the Tribonacci sequence\n    tribonacci = [1, 3, 2]\n\n    # If n is less than or equal to 2, return the first n + 1 elements of the sequence\n    if n <= 2:\n        return tribonacci[:n + 1]\n\n    # Calculate the remaining elements of the Tribonacci sequence\n    for i in range(3, n + 1):\n        tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n\n    return tribonacci\n",
        "test": "assert tri(0) == [1] # First element of the sequence is 1 for n=0",
        "num_ids": 3712,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    if has_odd:\n        return product\n    else:\n        return 0",
        "test": "assert digits(4) == 0",
        "num_ids": 2029,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 2111,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    # Round each element to the upper int(Ceiling)\n    rounded_lst = [math.ceil(x) for x in lst]\n    \n    # Calculate the sum of squared numbers\n    sum_of_squares = sum([x**2 for x in rounded_lst])\n    \n    return sum_of_squares",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 2996,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    # If the string is empty or the last character is not an alphabetical character, return False\n    if not txt or not txt[-1].isalpha():\n        return False\n\n    # Split the string into words and get the last word\n    words = txt.split()\n    last_word = words[-1]\n\n    # If the last word has length 1 and the last character is an alphabetical character, return True\n    if len(last_word) == 1 and last_word.isalpha():\n        return True\n\n    # Otherwise, return False\n    return False",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False ",
        "num_ids": 3587,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    max_index = -1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_index = i\n            break\n    return max_index\n",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 2514,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    a = max(negative_integers) if negative_integers else None\n    b = min(positive_integers) if positive_integers else None\n\n    return (a, b)",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 3812,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    # convert a and b to the same data type\n    if type(a) != type(b):\n        if type(a) == str:\n            a = a.replace(',', '.')\n            a = float(a)\n        elif type(b) == str:\n            b = b.replace(',', '.')\n            b = float(b)\n    # compare a and b and return the larger one\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 3717,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    for i in range(2, n):\n        for j in range(2, n):\n            for k in range(2, n):\n                for l in range(2, n):\n                    if i + j + k + l == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:\n                        return True\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 2698,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    for j in range(n-1, 0, -1):\n        result *= j\n    return result\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 2316,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace 3 or more consecutive underscores with a single -\n    text = text.replace(\"___\", \"-\")\n    \n    return text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2557,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def file_name_check(file_name):\n    \"\"\"\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if there are more than three digits in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    file_parts = file_name.split('.')\n    if not file_parts[0] or not file_parts[1]:\n        return 'No'\n\n    if not file_parts[0][0].isalpha():\n        return 'No'\n\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    if file_name.count('0') + file_name.count('1') + file_name.count('2') + \\\n       file_name.count('3') + file_name.count('4') + file_name.count('5') + \\\n       file_name.count('6') + file_name.count('7') + file_name.count('8') + \\\n       file_name.count('9') > 3:\n        return 'No'\n\n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == \"Yes\"",
        "num_ids": 4990,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] *= lst[i]\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] *= lst[i] * lst[i]\n    return sum(lst)\n",
        "test": "assert sum_squares([1, 2, 3]) == 6",
        "num_ids": 3489,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes a number as input and returns True if it is prime, otherwise False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    This function takes a string representing a sentence as input and returns a string containing the words whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 3195,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Your task is to implement a function that will simplify the expression x * n.\n    The function returns True if x * n evaluates to a whole number and False otherwise.\n    Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator>\n    where both numerator and denominator are positive whole numbers.\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Split the input strings into numerator and denominator parts\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    # Convert the parts to integers\n    x_num, x_den, n_num, n_den = int(x_num), int(x_den), int(n_num), int(n_den)\n    # Calculate the product of the fractions\n    prod_num = x_num * n_num\n    prod_den = x_den * n_den\n    # Simplify the product by dividing numerator and denominator by their greatest common divisor\n    gcd = find_gcd(prod_num, prod_den)\n    prod_num //= gcd\n    prod_den //= gcd\n    # Check if the product is a whole number\n    is_whole = prod_den == 1\n    return is_whole\n\n\ndef find_gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two integers using Euclid's algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 4063,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits. \n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # If the list is empty, return an empty list.\n    if not nums:\n        return []\n\n    # Calculate the sum of digits for each number and store it in a list.\n    digit_sums = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(abs(num)):\n            digit_sum += int(digit)\n        digit_sums.append(digit_sum)\n\n    # Sort the list of numbers based on the digit sums and their index in the original list.\n    sorted_nums = sorted(enumerate(nums), key=lambda x: (x[1], x[0]))\n\n    # Extract the sorted numbers from the sorted list of tuples.\n    sorted_nums = [num for index, num in sorted_nums]\n\n    return sorted_nums\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 3945,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 == 1 and last_digit % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert specialFilter([13, 24, 35, 46, 57, 68, 79]) == 4",
        "num_ids": 3120,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n",
        "test": "assert get_max_triples(5) == 1  # Example from problem statement",
        "num_ids": 3947,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n    except ValueError:\n        return ()\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 3035,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order.\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. The order of the list should be ascending by length of each word,\n    and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Delete strings with odd lengths from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length and then alphabetically\n    lst = sorted(lst, key=lambda x: (len(x), x))\n\n    return lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 4229,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 2656,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    \n    sum = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum += num ** 2\n    return sum\n",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 10",
        "num_ids": 2896,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def compare(game, guess):\n    \"\"\"\n    Returns an array of the same length denoting how far off each guess was.\n    If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 3504,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = ''\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        cap_letters = sum(1 for c in extension if c.isupper())\n        sm_letters = sum(1 for c in extension if c.islower())\n        strength = cap_letters - sm_letters\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 4986,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n    \"\"\"\n\n    # length of the strings\n    n, m = len(a), len(b)\n\n    # check if b is a substring of a by using the built-in method \"in\"\n    if b in a:\n        return True\n\n    # generate all rotations of b and check if any of them is a substring of a\n    for i in range(m - 1):\n        rotation = b[i + 1:] + b[:i + 1]\n        if rotation in a:\n            return True\n\n    # if no rotation is a substring of a, return False\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 3122,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 2362,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numeral_mapping = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_numeral = ''\n    for value, numeral in roman_numeral_mapping.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n\n    return roman_numeral.lower()\n",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 4354,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the given sides form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Check if it's a right-angled triangle\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 2888,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_max(words):\n    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_word = word\n            max_unique = unique_chars\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 3278,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                        the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    \n    total_eaten = number + min(need, remaining)\n    remaining_carrots = remaining - min(need, remaining)\n    \n    return [total_eaten, remaining_carrots]",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 4743,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator=['+', '*', '-']\n    operand=[2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = []\n    for i in range(len(operand)):\n        if i == 0:\n            expression.append(operand[i])\n        else:\n            expression.append(operator[i-1])\n            expression.append(operand[i])\n    \n    result = eval(' '.join(str(i) for i in expression))\n    return result\n",
        "test": "assert do_algebra(['+', '+', '+'], [1, 2, 3, 4]) == 10",
        "num_ids": 4904,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    contains_letter = False\n    for char in s:\n        if char.isalpha():\n            contains_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not contains_letter:\n        return result[::-1]\n    else:\n        return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 2629,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 2889,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # swap a and b if a > b\n    if a > b:\n        a, b = b, a\n\n    # initialize empty list to store even digits between a and b\n    even_digits = []\n\n    # loop through all numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # convert num to string to access each digit\n        num_str = str(num)\n\n        # check if all digits in num are even\n        if all(int(digit) % 2 == 0 for digit in num_str):\n            # if num has even digits, append it to even_digits list\n            even_digits.append(num)\n\n    # return even_digits list sorted in ascending order\n    return sorted(even_digits)\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 4376,
        "indeed": false
    }
]