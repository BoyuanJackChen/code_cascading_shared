[
    {
        "number": 0,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 3270,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those. \n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def separate(paren_string: str, start: int, end: int, result: List[str]) -> None:\n        \"\"\" Helper function to separate parentheses recursively.\n        \"\"\"\n        if start == end:\n            return\n        \n        level = 0\n        for i in range(start, end + 1):\n            if paren_string[i] == '(':\n                level += 1\n            elif paren_string[i] == ')':\n                level -= 1\n                if level == 0:\n                    result.append(paren_string[start:i+1])\n                    separate(paren_string, i+1, end, result)\n                    return\n\n    paren_string = ''.join(paren_string.split())\n    result = []\n    separate(paren_string, 0, len(paren_string) - 1, result)\n    return result\n",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 4199,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \n    Example:\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return round(number - int(number), 10)\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1945,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False, \"Invalid output for input [1, 2, 3]\"",
        "num_ids": 2242,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 3230,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
        "num_ids": 2681,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    def max_depth(paren_string: str) -> int:\n        depth = 0\n        max_depth = 0\n        for paren in paren_string:\n            if paren == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif paren == ')':\n                depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    return [max_depth(group) for group in groups]\n",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 3238,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 2406,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    \n    for number in numbers:\n        product_of_numbers *= number\n    \n    return (sum_of_numbers, product_of_numbers)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2778,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for i in numbers:\n        max_so_far = max(max_so_far, i)\n        result.append(max_so_far)\n    return result\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 2940,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string[::-1]\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2801,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = \"\"\n    for x, y in zip(a, b):\n        result += str(int(x) ^ int(y))\n    return result\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 2569,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str\n",
        "test": "assert longest([]) == None",
        "num_ids": 2323,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1797,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 1907,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == \"0\"",
        "num_ids": 1601,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    string = string.lower()\n    distinct_characters = set(string)\n    return len(distinct_characters)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 2090,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes_map = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split(' ')\n    beats_list = [notes_map[note] for note in music_list]\n    return beats_list",
        "test": "assert parse_music('o') == [4]",
        "num_ids": 6163,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 2021,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    \n    # Define a mapping of numberal strings to their corresponding integer values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of numberal strings\n    number_strings = numbers.split()\n    \n    # Convert the list of numberal strings to a list of integers\n    numbers = [number_map[num_str] for num_str in number_strings]\n    \n    # Sort the list of integers\n    numbers.sort()\n    \n    # Convert the sorted list of integers back to a list of numberal strings\n    sorted_number_strings = [list(number_map.keys())[list(number_map.values()).index(num)] for num in numbers]\n    \n    # Join the sorted list of numberal strings into a single string and return it\n    return ' '.join(sorted_number_strings)\n",
        "test": "assert sort_numbers('one two three') == 'one two three'",
        "num_ids": 3897,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    \n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables for the closest numbers and their difference\n    closest_numbers = (sorted_numbers[0], sorted_numbers[1])\n    closest_diff = closest_numbers[1] - closest_numbers[0]\n    \n    # Loop through the sorted list to find the closest numbers\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i+1] - sorted_numbers[i]\n        if diff < closest_diff:\n            closest_numbers = (sorted_numbers[i], sorted_numbers[i+1])\n            closest_diff = diff\n    \n    return closest_numbers\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 5199,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List should have at least two elements\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n\n    if range_val == 0:\n        return [0] * len(numbers)\n\n    rescaled_numbers = [(x - min_val) / range_val for x in numbers]\n    return rescaled_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 4146,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n",
        "test": "assert filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2259,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 1042,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n    \"\"\"\n    max_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    i = 2\n\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\n    if n > 1:\n        factors.append(n)\n\n    return factors\n",
        "test": "assert factorize(2) == [2]",
        "num_ids": 3085,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "test": "assert remove_duplicates([]) == []",
        "num_ids": 2542,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase. \n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n",
        "test": "assert flip_case('hello') == 'HELLO'",
        "num_ids": 1714,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = ''\n    for string in strings:\n        result += string\n    return result\n",
        "test": "assert concatenate([]) == \"\"",
        "num_ids": 1503,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 2340,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_positive(l):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 2800,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 1622,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have an even number of coefficients\")\n    \n    # Find the largest non-zero coefficient\n    max_coeff = max(xs)\n    max_coeff_index = xs.index(max_coeff)\n    \n    if max_coeff_index == 0:\n        raise ValueError(\"Leading coefficient cannot be zero\")\n    \n    # Calculate the zero point\n    zero_point = -xs[0] / max_coeff\n    return zero_point\n",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 4893,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_sorted = sorted(l[i] for i in range(len(l)) if i % 3 == 2)\n    for i in range(len(l)):\n        if i % 3 == 2:\n            l[i] = l_sorted.pop(0)\n    return l\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 4135,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1633,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 2147,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n",
        "test": "assert fizz_buzz(50) == 0 # Test case 1",
        "num_ids": 1932,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted([l[i] for i in even_indices])\n    sorted_list = l.copy()\n    for i, value in zip(even_indices, even_values):\n        sorted_list[i] = value\n    return sorted_list\n\nif __name__ == \"__main__\":\n    print(sort_even([1, 2, 3]))\n    print(sort_even([5, 6, 3, 4]))",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 4010,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 33,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(\"\") == \"\"",
        "num_ids": 3123,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n            if count == n:\n                return fibonacci(i)\n        i += 1\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 3124,
        "indeed": true
    },
    {
        "number": 40,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    n = len(l)\n\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 4244,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.  n cars are driving left\n    to right;  simultaneously, a different set of n cars are driving right to left.  The\n    two sets of cars start out being very far from each other.  All cars move in the same speed.\n    Two cars are said to collide when a car that's moving left to right hits a car that's moving right\n    to left.  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Calculate the number of collisions based on the formula: n*(n-1)/2\n    num_collisions = n * (n - 1) // 2\n    \n    return num_collisions\n",
        "test": "assert car_race_collision(0) == 0 # no cars, no collisions",
        "num_ids": 3086,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 2638,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 2878,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    elif x < 0:\n        is_negative = True\n        x = abs(x)\n    else:\n        is_negative = False\n    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    if is_negative:\n        res = '-' + res\n    return res\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2550,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(3, 4) == 6",
        "num_ids": 1405,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fib4(n: int):\n    \"\"\"\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.\n    Do not use recursion.\n\n    Examples:\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    if n <= 3:\n        return [0, 0, 2, 0][n]\n\n    fib = [0] * (n + 1)\n    fib[0] = 0\n    fib[1] = 0\n    fib[2] = 2\n    fib[3] = 0\n\n    for i in range(4, n + 1):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4]\n\n    return fib[n]\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 3658,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (sorted(l)[n//2 - 1] + sorted(l)[n//2])/2\n    else:\n        return sorted(l)[n//2]\n",
        "test": "assert median([1, 2, 3]) == 2",
        "num_ids": 2163,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # convert string to lowercase and remove all non-alphanumeric characters\n    text = ''.join(c.lower() for c in text if c.isalnum())\n    # check if the reversed string is the same as the original string\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 1774,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        temp = modp(n // 2, p)\n        return (temp * temp) % p\n    else:\n        temp = modp((n - 1) // 2, p)\n        return (2 * temp * temp) % p\n",
        "test": "assert modp(0, 101) == 1",
        "num_ids": 1854,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 2165,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1614,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1897,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    # convert both strings to sets of characters\n    set0 = set(s0)\n    set1 = set(s1)\n\n    # if the sets are equal, the strings have the same characters\n    return set0 == set1\n",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 3203,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            c = a + b\n            a, b = b, c\n        return b\n",
        "test": "assert fib(1) == 1",
        "num_ids": 1380,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 2161,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            increasing = False\n        elif l[i] < l[i+1]:\n            decreasing = False\n        \n        if not increasing and not decreasing:\n            return False\n    \n    return True\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 2531,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(set1.intersection(set2))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 3082,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 1712,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Add numbers from 1 to n to the sum variable\n    for i in range(1, n+1):\n        sum += i\n\n    # Return the final sum\n    return sum\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 2058,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 2008,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial. \n        xs[0] + xs[1] * x + xs[2] * x^2 + ....\n        Return derivative of this polynomial in the same form.\n        >>> derivative([3, 1, 2, 4, 5])\n        [1, 4, 12, 20]\n        >>> derivative([1, 2, 3])\n        [2, 6]\n    \"\"\"\n    res = []\n    for i in range(1, len(xs)):\n        res.append(i * xs[i])\n    return res\n",
        "test": "assert derivative([0, 0, 0]) == [0, 0]",
        "num_ids": 2565,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fibfib(n: int):\n    \"\"\"\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib = [0, 0, 1]\n        for i in range(3, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n        return fib[n]\n",
        "test": "assert fibfib(1) == 0",
        "num_ids": 3357,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    if s[-1] == 'y' or s[-1] == 'Y':\n        return sum(1 for char in s if char in vowels) + 1\n    else:\n        return sum(1 for char in s if char in vowels)",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1952,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]\n",
        "test": "assert circular_shift(1234, 2) == \"3412\"",
        "num_ids": 2427,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 2363,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Extract the number of apples and oranges from the input string\n    num_apples = int(s.split()[0])\n    num_oranges = int(s.split()[-2])\n\n    # Calculate the number of mangoes\n    num_mangoes = n - num_apples - num_oranges\n\n    return num_mangoes",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 4544,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                    so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    even_nodes = [(node, index) for index, node in enumerate(arr) if node % 2 == 0]\n\n    if not even_nodes:\n        return []\n\n    smallest_even_value = min(even_nodes, key=lambda x: x[0])[0]\n    smallest_even_nodes = [(node, index) for node, index in even_nodes if node == smallest_even_value]\n    smallest_even_node = min(smallest_even_nodes, key=lambda x: x[1])\n\n    return [smallest_even_node[0], smallest_even_node[1]]",
        "test": "assert pluck([1,2,3]) == [2, 1]",
        "num_ids": 4998,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    freq_dict = {}\n    max_freq = -1\n    max_num = -1\n    \n    for num in lst:\n        if num > 0:\n            if num in freq_dict:\n                freq_dict[num] += 1\n            else:\n                freq_dict[num] = 1\n            \n            if freq_dict[num] >= num and num > max_num:\n                max_freq = freq_dict[num]\n                max_num = num\n    \n    return max_num if max_num > 0 else -1\n",
        "test": "assert search([4, 1, 2, 2, 3, 1]) == 2",
        "num_ids": 3533,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    \n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(min(lst))\n            lst.remove(min(lst))\n        else:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 3667,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or b + c <= a or c + a <= b:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00 # test case 1",
        "num_ids": 3281,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    \n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    \n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    \n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    \n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    \n    # Check if the list is balanced\n    if q == q[::-1]:\n        # Check if the sum of elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 3227,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4 #True",
        "num_ids": 3016,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    lst1_chars = sum([len(x) for x in lst1])\n    lst2_chars = sum([len(x) for x in lst2])\n    \n    if lst1_chars < lst2_chars:\n        return lst1\n    elif lst2_chars < lst1_chars:\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 3929,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise. Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(2, 11):\n        for j in range(i, 11):\n            for k in range(j, 11):\n                if i * j * k == a and is_prime(i) and is_prime(j) and is_prime(k):\n                    return True\n    return False\n",
        "test": "assert is_multiply_prime(60) == False",
        "num_ids": 2778,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    # check if x is a power of n\n    i = 0\n    while n**i <= x:\n        if n**i == x:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 2690,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    n = abs(a)\n    x = n ** (1/3)\n    return int(x + 0.5) ** 3 == n\n",
        "test": "assert iscube(1) == True",
        "num_ids": 2206,
        "indeed": true
    },
    {
        "number": 78,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def hex_key(num):\n    \"\"\"\n    Counts the number of hexadecimal digits that are primes (2, 3, 5, 7, B, D).\n    \"\"\"\n    # Define a set of prime hexadecimal digits\n    prime_hex = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Convert the hexadecimal string to uppercase\n    num = num.upper()\n    \n    # Initialize a counter for prime digits\n    count = 0\n    \n    # Iterate over the hexadecimal digits and count primes\n    for digit in num:\n        if digit in prime_hex:\n            count += 1\n    \n    return count\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 3577,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to binary format.\"\"\"\n    binary = bin(decimal)[2:] # convert to binary and remove '0b' prefix\n    return f\"db{binary}db\"",
        "test": "assert decimal_to_binary(1023) == \"db1111111111db\"",
        "num_ids": 2316,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    \n    return True\n",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 2613,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of numerical grades to a list of letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0]) == ['A+']",
        "num_ids": 6733,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_length(string):\n    \"\"\"\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"\n    return is_prime(len(string))\n",
        "test": "assert prime_length(\"Hello\") == True",
        "num_ids": 2058,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1  # 1 starts with 1",
        "num_ids": 2258,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    # Convert N to a string and reverse it\n    n_str = str(N)[::-1]\n    # Initialize the sum variable to 0\n    digit_sum = 0\n    # Loop through each character in the reversed string\n    for char in n_str:\n        # Convert the character to an integer and add it to the sum variable\n        digit_sum += int(char)\n    # Convert the digit sum to binary and return it as a string\n    return bin(digit_sum)[2:]\n",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 3182,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop through the list starting from index 1 (second element)\n    for i in range(1, len(lst), 2):\n        # Check if the element at the current index is even\n        if lst[i] % 2 == 0:\n            # If it is even, add it to the total\n            total += lst[i]\n    \n    # Return the total\n    return total\n",
        "test": "assert add([2, 4, 6, 8]) == 12  # Explanation: The even numbers at odd indices (2, 4, and 6) are added together to give 12.",
        "num_ids": 2103,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. \n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\n    # Split the string into words\n    words = s.split()\n\n    # Iterate over each word and sort its characters\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n\n    # Join the sorted words and return the final string\n    return ' '.join(words)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 3043,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, which is similar to matrix.\n    Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1] ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row[::-1]):\n            if val == x:\n                result.append((i, len(row)-j-1))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row([], 1) == []",
        "num_ids": 4311,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n\n    if (array[0] + array[-1]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 4217,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places. \n    For example: \n    encrypt('hi') returns 'lm' \n    encrypt('asdfghjkl') returns 'ewhjklnop' \n    encrypt('gf') returns 'kj' \n    encrypt('et') returns 'ix' \n    \"\"\"\n    \n    encrypted_string = ''\n    \n    for char in s:\n        if char.isalpha():\n            shift_amount = 2 * 2\n            if char.islower():\n                shifted_char = chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                shifted_char = chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n            encrypted_string += shifted_char\n        else:\n            encrypted_string += char\n            \n    return encrypted_string\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 3532,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    return lst[1]",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 2812,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 36,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    # split the string into sentences based on the delimiters\n    sentences = S.split(\". \")\n    # initialize the boredom count\n    count = 0\n\n    # loop through the sentences\n    for sentence in sentences:\n        # check if the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            # increment the boredom count\n            count += 1\n\n    return count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 2784,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \n    '''\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 2713,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    \n    for letter in message:\n        if letter.lower() in vowels:\n            encoded_letter = chr(ord(letter.lower()) + 2)\n            if letter.isupper():\n                encoded_message += encoded_letter.upper()\n            else:\n                encoded_message += encoded_letter.lower()\n        else:\n            encoded_message += letter.swapcase()\n            \n    return encoded_message\n",
        "test": "assert encode('Python is fun') == 'tScp S JFN'",
        "num_ids": 3449,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers. You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(d) for d in str(largest_prime))\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 6027,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not d:\n        return False\n\n    lower_case = all(isinstance(k, str) and k.islower() for k in d.keys())\n    upper_case = all(isinstance(k, str) and k.isupper() for k in d.keys())\n\n    return lower_case or upper_case",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 3985,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_up_to(n):\n    \"\"\"\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**(0.5))+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        if len(primes) == n - 2:\n            break\n    return primes\n",
        "test": "assert count_up_to(5) == [2,3]",
        "num_ids": 3625,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    product = unit_digit_a * unit_digit_b\n    return product",
        "test": "assert multiply(2020, 1851) == 0",
        "num_ids": 2377,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    vowels = set('AEIOU')\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 2019,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Convert the input string to a float\n    float_value = float(value)\n    \n    # Round the float value to the nearest integer using the round() function\n    rounded_integer = round(float_value)\n    \n    # Check if the rounded integer is equidistant from two integers\n    if float_value % 1 == 0.5:\n        # If the float value is positive, round it away from zero by adding 1\n        if float_value > 0:\n            rounded_integer += 1\n        # If the float value is negative, round it away from zero by subtracting 1\n        else:\n            rounded_integer -= 1\n    \n    # Return the rounded integer as the closest integer\n    return rounded_integer\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 3677,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. The number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = [n]  # start with n stones on the first level\n    for i in range(n-1):\n        # add the next level's stones to the list\n        stones.append(stones[-1] + 2)  # add 2 if n is odd, otherwise add 1\n    return stones\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 3241,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces.\n    Your task is to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Replace commas with spaces\n    s = s.replace(\",\", \" \")\n    # Split the string into words using spaces as delimiter\n    words = s.split()\n    # Return the array of words\n    return words\n",
        "test": "assert words_string(\"one1two2three3four4\") == [\"one1two2three3four4\"]",
        "num_ids": 2892,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    even_numbers = [num for num in range(x, y+1) if num % 2 == 0]\n    if len(even_numbers) > 0:\n        return max(even_numbers)\n    else:\n        return -1\n",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 2706,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n\n    average = round(total / count)\n    binary = bin(average)[2:]\n\n    return binary if binary.startswith('0b') else '0b' + binary\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 3265,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    result.sort()\n    return result\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 3330,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive, \n    reverse the resulting array, and then replace each digit by its corresponding name from \n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n        -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n        -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n    \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n      -> sort arr -> [-1, 1, 55]\n      -> reverse arr -> [55, 1, -1]\n    return = ['One']\n    \"\"\"\n    numbers = {\"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\": \"Four\", \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\", \"9\": \"Nine\"}\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))[::-1]\n    result = []\n    for num in sorted_arr:\n        result.append(numbers[str(num)])\n    return result\n",
        "test": "assert by_length([]) == []",
        "num_ids": 5315,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # calculate factorial of i\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            # calculate sum of numbers from 1 to i\n            s = 0\n            for j in range(1, i+1):\n                s += j\n            result.append(s)\n    return result\n",
        "test": "assert f(5) == [1, 2, 6, 24, 15]",
        "num_ids": 3419,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a given number is a palindrome or not.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome += 1\n            else:\n                odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 3022,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(num):\n        if num < 0:\n            num = abs(num)\n            digits = str(num)\n            return -int(digits[0]) + sum(int(d) for d in digits[1:])\n        else:\n            return sum(int(d) for d in str(num))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)",
        "test": "assert count_nums([]) == 0",
        "num_ids": 3018,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n                 \n    \"\"\"\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] == sorted_arr[i:]:\n            return True\n    return False",
        "test": "assert move_one_ball([]) == True",
        "num_ids": 4587,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    # Check if lst1 already contains only even numbers\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    \n    # Check if lst2 contains any even numbers that are not in lst1\n    even_numbers = [num for num in lst2 if num % 2 == 0 and num not in lst1]\n    if len(even_numbers) >= len(lst1) - sum(1 for num in lst1 if num % 2 != 0):\n        return \"YES\"\n    \n    # Check if there are enough odd numbers in lst1 and even numbers in lst2\n    # to make all the elements of lst1 even\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    even_count = sum(1 for num in lst2 if num % 2 == 0)\n    if odd_count <= even_count:\n        return \"YES\"\n    \n    return \"NO\"\n",
        "test": "assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"",
        "num_ids": 4603,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    # Split the input string into a list of characters\n    test_list = test.split()\n\n    # Initialize an empty dictionary to store the letter counts\n    letter_counts = {}\n\n    # Iterate through the list of characters and count their occurrences\n    for char in test_list:\n        if char in letter_counts:\n            letter_counts[char] += 1\n        else:\n            letter_counts[char] = 1\n\n    # Find the maximum count among the letters\n    max_count = max(letter_counts.values())\n\n    # Create a new dictionary to store the letters with the maximum count(s)\n    max_count_letters = {}\n\n    # Iterate through the letter counts dictionary and add the letters with the maximum count(s)\n    for key, value in letter_counts.items():\n        if value == max_count:\n            max_count_letters[key] = value\n\n    return max_count_letters\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 4544,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome. \n    A string is called palindrome if it reads the same backward as forward. \n    You should return a tuple containing the result string and True/False for the check. \n    Example \n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False) \n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False) \n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True) \n    \"\"\"\n    # delete characters from s that are in c\n    s = ''.join([char for char in s if char not in c])\n    # check if the result string is palindrome\n    is_palindrome = s == s[::-1]\n    return s, is_palindrome\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 3442,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = [d for d in s if int(d) % 2 == 1]\n        count = len(odd_digits)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {i} of the {count}nput.\")\n    return result\n",
        "test": "assert odd_count([]) == []",
        "num_ids": 4632,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        \n        if current_sum > 0:\n            current_sum = 0\n            \n    return min_sum\n",
        "test": "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
        "num_ids": 2928,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 33,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    total_water = sum(sum(row) for row in grid)\n    max_fills = math.ceil(total_water / capacity)\n    return max_fills\n",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
        "num_ids": 5640,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array first based on decimal value\n    arr.sort()\n    \n    # Define a function to count number of ones in binary representation of a number\n    def count_ones(num):\n        return bin(num)[2:].count('1')\n    \n    # Sort the array again based on number of ones in binary representation\n    arr.sort(key=count_ones)\n    \n    return arr\n",
        "test": "assert sort_array([]) == []",
        "num_ids": 4121,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s. \n    If the string s is empty then the function should return an empty list. \n    Note: you may assume the input string contains only letters and spaces. \n    Examples: \n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"] \n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] \n    select_words(\"simple white space\", 2) ==> [] \n    select_words(\"Hello world\", 4) ==> [\"world\"] \n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"] \n    \"\"\"\n    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for c in word if c.lower() in \"bcdfghjklmnpqrstvwxyz\")\n        if consonants == n:\n            result.append(word)\n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 3369,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    word = list(word)\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i+1] not in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 3078,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_good(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    for s1 in lst:\n        for s2 in lst:\n            if is_good(s1 + s2):\n                return 'Yes'\n    return 'No'\n",
        "test": "assert match_parens(['(', ')']) == 'Yes'",
        "num_ids": 4109,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    if k == 0:\n        return []\n    if k >= len(arr):\n        return sorted(arr)\n    return sorted(arr)[-k:]",
        "test": "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
        "num_ids": 4113,
        "indeed": true
    },
    {
        "number": 121,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i%2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum\n",
        "test": "assert solution([2, 4, 6, 8]) == 0",
        "num_ids": 2318,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add_elements(arr, k):\n    total = 0\n    for num in arr[:k]:\n        if len(str(num)) <= 2:\n            total += num\n    return total\n",
        "test": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24 # sum of 21 + 3",
        "num_ids": 4063,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n\n    # Initialize the list with the starting number (n) if it's odd\n    odd_numbers = [n] if n % 2 != 0 else []\n\n    # Compute the collatz sequence until reaching 1\n    while n != 1:\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n        if n % 2 != 0:\n            odd_numbers.append(n)\n\n    return sorted(odd_numbers)\n",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 4988,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid otherwise False.\n    \"\"\"\n\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n\n    # Check if the month is valid (1-12)\n    if not (1 <= int(month) <= 12):\n        return False\n\n    # Check if the day is valid for the given month\n    if month in ['01', '03', '05', '07', '08', '10', '12'] and not (1 <= int(day) <= 31):\n        return False\n    elif month in ['04', '06', '09', '11'] and not (1 <= int(day) <= 30):\n        return False\n    elif month == '02' and not (1 <= int(day) <= 29):  # Handle leap years later\n        return False\n\n    # Check if the year is a valid integer\n    if not year.isdigit():\n        return False\n\n    # Check for leap years\n    if month == '02' and int(day) == 29:\n        if year.startswith('19'):\n            if (int(year) % 4) == 0 and ((int(year) % 100) != 0 or (int(year) % 400) == 0):\n                return True\n            else:\n                return False\n        elif year.startswith('2000') or year.startswith('2400') or year.startswith('2800'):\n            return True\n        else:\n            return False\n\n    return True\n",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 5736,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    \n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for letter in txt:\n            if ord(letter) % 2 == 1:\n                count += 1\n        return count",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 3097,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # Check if list is sorted in ascending order\n    if lst == sorted(lst):\n        # Check if list has more than 1 duplicate of the same number\n        for i in range(len(lst)):\n            if i < len(lst) - 1 and lst[i] == lst[i + 1]:\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 4483,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    You are given two intervals, where each interval is a pair of integers.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two intervals is a prime number.\n    If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Check if the intervals intersect\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    # Find the intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the intersection length is prime\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 3725,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    prod = 1\n    sum_mag = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif num < 0:\n            prod *= -1\n        elif num == 0:\n            return 0\n        sum_mag += abs(num)\n    return sum_mag * prod\n",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 3104,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef minPath(grid, k):\n    def is_valid(x, y):\n        return 0 <= x < len(grid) and 0 <= y < len(grid[0])\n\n    def bfs(start_x, start_y, k):\n        queue = deque([(start_x, start_y)])\n        visited = set([(start_x, start_y)])\n        path = [grid[start_x][start_y]]\n\n        while queue and len(path) < k:\n            x, y = queue.popleft()\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                new_x, new_y = x + dx, y + dy\n                if is_valid(new_x, new_y) and (new_x, new_y) not in visited:\n                    queue.append((new_x, new_y))\n                    visited.add((new_x, new_y))\n                    path.append(grid[new_x][new_y])\n\n        return path\n\n    result = min(bfs(x, y, k) for x in range(len(grid)) for y in range(len(grid[0])) if grid[x][y] == 1)\n    return result[:k]",
        "test": "assert minPath([[1,1,1], [1,1,1], [1,1,1]], 3) == [1, 1, 1] # All cells have the same value",
        "num_ids": 6132,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def tri(n):\n    \"\"\"\n    Returns the first n+1 numbers of the Tribonacci sequence.\n    \"\"\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        trib = [1, 3, 2]\n        for i in range(3, n+1):\n            trib.append(trib[i-1] + trib[i-2] + trib[i-3])\n        return trib\n",
        "test": "assert tri(1) == [1, 3] # check the first value",
        "num_ids": 2949,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n",
        "test": "assert digits(4) == 0",
        "num_ids": 2090,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 2626,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    # Round each element in the list to the upper int(Ceiling) first\n    lst = [int(num) + 1 if num - int(num) > 0 else int(num) for num in lst]\n    # Compute the sum of squared numbers in the list\n    result = sum([num ** 2 for num in lst])\n    return result\n",
        "test": "assert sum_squares([1.4,4.2,0]) == 29 # Ceilings are [2, 5, 1], squared sum is 2^2 + 5^2 + 1^2 = 29",
        "num_ids": 3213,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # check for empty string\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        words = txt.split()\n        if len(words) > 0 and last_char in words[-1]:\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False",
        "num_ids": 3688,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n            break\n    return max_index\n",
        "test": "assert can_arrange([1,2,4,3,5]) == 3",
        "num_ids": 2528,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    if len(negatives) == 0:\n        a = None\n    else:\n        a = max(negatives)\n        \n    if len(positives) == 0:\n        b = None\n    else:\n        b = min(positives)\n    \n    return (a, b)\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 3793,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Convert string inputs to float\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare values and return the larger one\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n",
        "test": "assert compare_one(\"1\", 1) == None",
        "num_ids": 3682,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 38,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # check if n is even\n    if n % 2 != 0:\n        return False\n\n    # check if n is a multiple of 4\n    if n % 4 != 0:\n        return False\n\n    # check if n can be written as the sum of 4 even numbers\n    for i in range(2, n//2+1):\n        for j in range(2, n//2+1):\n            for k in range(2, n//2+1):\n                for l in range(2, n//2+1):\n                    if i + j + k + l == n:\n                        return True\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 2929,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    \n    for j in range(1, n):\n        result *= j\n        \n    return result\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 2359,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace multiple consecutive underscores with a single underscore\n    text = text.replace(\"__\", \"_\")\n\n    # Replace multiple consecutive hyphens with a single hyphen\n    text = text.replace(\"---\", \"-\")\n\n    # Replace all remaining consecutive spaces with a single hyphen\n    text = text.replace(\" \", \"-\")\n\n    return text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2651,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 255:\n        return 'No'\n\n    dot_count = 0\n    for char in file_name:\n        if char == '.':\n            dot_count += 1\n    \n    if dot_count != 1:\n        return 'No'\n    \n    parts = file_name.split('.')\n    if len(parts[0]) == 0 or len(parts[1]) == 0:\n        return 'No'\n    \n    if not parts[0][0].isalpha():\n        return 'No'\n    \n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    digit_count = 0\n    for char in file_name:\n        if char.isdigit():\n            digit_count += 1\n            if digit_count > 3:\n                return 'No'\n    \n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == 'Yes'",
        "num_ids": 5050,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n",
        "test": "assert sum_squares([1,2,3]) == 6",
        "num_ids": 3477,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence, the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 3020,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    if result_numerator % result_denominator == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False  # Test case 2: not a whole number",
        "num_ids": 3602,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Sort the list based on the sum of digits and the index of the number in the original list\n    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n    return sorted_nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 3493,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        num_str = str(abs(num))\n        if len(num_str) > 1 and num > 10 and int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n            count += 1\n    return count",
        "test": "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
        "num_ids": 3020,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n+1)] # creating the array a\n    count = 0 # initializing the count to zero\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 4094,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    i1 = planets.index(planet1)\n    i2 = planets.index(planet2)\n    if i1 < i2:\n        return tuple(planets[i1+1:i2])\n    else:\n        return tuple(planets[i2+1:i1])\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 2518,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order, \n    The list is always a list of strings and never an array of numbers, \n    and it may contain duplicates. \n    The order of the list should be ascending by length of each word, and you \n    should return the list sorted by that rule. \n    If two words have the same length, sort the list alphabetically. \n    The function should return a list of strings in sorted order. \n    You may assume that all words will have the same length. \n    For example: \n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"] \n    \"\"\"\n    # remove odd length strings\n    lst = [word for word in lst if len(word) % 2 == 0]  \n    # sort by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 3866,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"\n    A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Examples:\n    x_or_y(7, 34, 12) == 34\n    x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(2, 34, 12) == 34 # if n is a prime number, returns x",
        "num_ids": 2485,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    \n    result = 0\n    \n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            result += num ** 2\n    \n    return result\n",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 10",
        "num_ids": 3155,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def compare(game, guess):\n    \"\"\"\n    Compares the game and guess arrays and returns an array of absolute differences.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 2826,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class.\n    The strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    \n    strongest_extension = \"\"\n    strongest_strength = float('-inf')\n    \n    for extension in extensions:\n        cap_letters = sum(1 for c in extension if c.isupper())\n        sm_letters = sum(1 for c in extension if c.islower())\n        \n        strength = cap_letters - sm_letters\n        \n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    \n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 5521,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n\n    def is_substring(a, b):\n        return a in b\n\n    def rotate(word):\n        return word[1:] + word[0]\n\n    rotations = set()\n    for _ in range(len(b)):\n        rotations.add(b)\n        b = rotate(b)\n\n    for rotation in rotations:\n        if is_substring(rotation, a):\n            return True\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 2857,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # Converting the integer to a string and then splitting it into a list of digits\n    digits = [int(d) for d in str(abs(num))]\n\n    # Counting the number of even and odd digits\n    even_count = digits.count(0) + digits.count(2) + digits.count(4) + digits.count(6) + digits.count(8)\n    odd_count = len(digits) - even_count\n\n    # Returning the tuple of even and odd counts\n    return even_count, odd_count\n",
        "test": "assert even_odd_count(12345) == (2, 3)",
        "num_ids": 2509,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 4344,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def right_angle_triangle(a, b, c):\n    # Check if the given sides form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the angles using the law of cosines\n        cos_a = (b**2 + c**2 - a**2) / (2 * b * c)\n        cos_b = (c**2 + a**2 - b**2) / (2 * c * a)\n        cos_c = (a**2 + b**2 - c**2) / (2 * a * b)\n        # Check if any angle is a right angle (cos = 0)\n        if cos_a == 0 or cos_b == 0 or cos_c == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 2722,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_max(words):\n    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 3238,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 4448,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = ''\n    for i in range(len(operand)):\n        expression += str(operand[i])\n        if i < len(operator):\n            expression += operator[i]\n    return eval(expression)\n",
        "test": "assert do_algebra(['+', '-'], [10, 5, 3]) == 12",
        "num_ids": 4963,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s. If s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is. If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples:\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    # Check if string contains any letters\n    contains_letters = any(c.isalpha() for c in s)\n    \n    # If string contains letters, reverse the case of each letter\n    if contains_letters:\n        new_s = \"\"\n        for c in s:\n            if c.isalpha():\n                new_s += c.upper() if c.islower() else c.lower()\n            else:\n                new_s += c\n        return new_s\n    \n    # If string contains no letters, reverse the string\n    else:\n        return s[::-1]\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 2958,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        md5_hash = hashlib.md5(text.encode())\n        return md5_hash.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' # test case 1",
        "num_ids": 2835,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 33,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # convert a and b to strings\n    a_str = str(a)\n    b_str = str(b)\n    \n    # get the minimum and maximum strings\n    min_str = min(a_str, b_str)\n    max_str = max(a_str, b_str)\n    \n    # initialize the even digits list\n    even_digits = []\n    \n    # iterate over the range of numbers from min_str to max_str (inclusive)\n    for num in range(int(min_str), int(max_str)+1):\n        # convert the current number to a string and get its digits\n        num_str = str(num)\n        digits = [int(d) for d in num_str]\n        \n        # check if all digits are even, if so, add the number to the even digits list\n        if all(d % 2 == 0 for d in digits):\n            even_digits.append(num)\n    \n    return even_digits\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 4526,
        "indeed": false
    }
]