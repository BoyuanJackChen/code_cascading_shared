[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 896,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = ''\n    stack = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group += char\n                if not stack:\n                    groups.append(current_group)\n                    current_group = ''\n            else:\n                current_group = ''\n                \n    return groups\n",
        "test": "assert separate_paren_groups('()') == ['()']",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    abs_diff = [abs(x - mean) for x in numbers]\n    return sum(abs_diff) / len(numbers)\n\n\nif __name__ == \"__main__\":\n    print(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))",
        "test": "assert mean_absolute_deviation([1, 2, 3, 4]) == 1.0",
        "num_ids": 960,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def helper(s: str) -> int:\n        stack = []\n        max_depth = 0\n        current_depth = 0\n        for char in s:\n            if char == '(':\n                stack.append(char)\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                stack.pop()\n                current_depth -= 1\n            else:\n                raise ValueError(\"Invalid input: Only parentheses are allowed.\")\n        return max_depth\n\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        result.append(helper(group))\n\n    return result\n",
        "test": "assert parse_nested_parens(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    if not numbers:  # if numbers is empty, return (0, 1)\n        return (0, 1)\n    \n    s = sum(numbers)  # calculate sum\n    p = 1  # initialize product to 1\n    for n in numbers:\n        p *= n\n    \n    return (s, p)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 878,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_value = float('-inf')\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n        result.append(max_value)\n    return result\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n\nif __name__ == \"__main__\":\n    print(make_palindrome(''))  # ''\n    print(make_palindrome('cat'))  # 'catac'\n    print(make_palindrome('cata'))  # 'catac'",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "test": "assert longest([]) == None",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ignore case\n    string = string.lower()\n    # Create an empty set to store the distinct characters\n    distinct_chars = set()\n    # Iterate over each character in the string\n    for char in string:\n        # Add the character to the set of distinct characters\n        distinct_chars.add(char)\n    # Return the count of distinct characters\n    return len(distinct_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 755,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    note_values = [note_map[note] for note in notes]\n    return note_values",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1288,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: number_map[x])\n    return ' '.join(num_list)\n",
        "test": "assert sort_numbers('') == ''",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Sort the list of numbers\n    sorted_numbers = sorted(numbers)\n\n    # Initialize variables to store the minimum difference and the two closest numbers\n    min_diff = float('inf')\n    closest_numbers = (sorted_numbers[0], sorted_numbers[1])\n\n    # Iterate through the sorted list of numbers and calculate the difference between adjacent numbers\n    for i in range(len(sorted_numbers) - 1):\n        diff = abs(sorted_numbers[i] - sorted_numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_numbers = (sorted_numbers[i], sorted_numbers[i+1])\n\n    return closest_numbers\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 1590,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    if min_value == max_value:\n        return [0.5] * len(numbers)\n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1302,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "test": "assert remove_duplicates([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 761,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == \"\"",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_list = []\n    for num in l:\n        if num > 0:\n            positive_list.append(num)\n    return positive_list\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial. \n    find_zero find x such that poly(x) = 0. \n    find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients \n    and largest non zero coefficient as it guarantees \n    a solution. \n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"Largest non zero coefficient not found\")\n    x0 = -xs[-2] / (len(xs) // 2 * xs[-1])\n    while abs(poly(xs, x0)) > 1e-6:\n        x0 = x0 - poly(xs, x0) / poly(xs, x0, math.fdiff(xs, x0))\n    return x0\n",
        "test": "assert find_zero([1, 2]) == -0.5 ",
        "num_ids": 1583,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = l.copy()\n    third_indicies = [i for i in range(len(l)) if (i + 1) % 3 == 0]\n    for i in third_indicies:\n        l_prime[i] = sorted(l_prime[i-2:i+1])[1]\n    return l_prime\n",
        "test": "assert sort_third([]) == [] # Test case 4",
        "num_ids": 1080,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123] # example from docstring",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += str(i).count('7')\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_even(l):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    # Create a new list with the even elements sorted\n    even_sorted = sorted(l[i] for i in range(len(l)) if i % 2 == 0)\n    # Create a new list with the odd elements\n    odd = [l[i] for i in range(len(l)) if i % 2 == 1]\n    # Combine the two lists into the final result\n    result = []\n    for i in range(len(even_sorted)):\n        result.append(even_sorted[i])\n        if i < len(odd):\n            result.append(odd[i])\n    # Return the final result\n    return result\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # de-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"a\")) == \"a\"",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    i = 1\n    while True:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib\n        i += 1",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1342,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line. \n    n cars are driving left to right; simultaneously, a different set of n cars \n    are driving right to left. The two sets of cars start out being very far from \n    each other. All cars move in the same speed. Two cars are said to collide \n    when a car that's moving left to right hits a car that's moving right to left. \n    However, the cars are infinitely sturdy and strong; as a result, they continue moving \n    in their trajectory as if they did not collide. \n    \n    This function outputs the number of such collisions. \n    \"\"\"\n    return n\n",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Create an empty dictionary to store the elements of the list as keys\n    # and their count as values\n    counts = {}\n    for num in l:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # Iterate through the keys in the dictionary\n    for key in counts.keys():\n        # If the negative of the key is also a key and its count is greater than 0,\n        # return True because we have found two distinct elements that sum to zero\n        if -key in counts and counts[-key] > 0 and key != 0:\n            return True\n\n    # If we have iterated through all the keys and haven't returned True yet,\n    # return False because there are no two distinct elements that sum to zero\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n        digit = x % base\n        result = str(digit) + result\n        x = x // base\n    return result\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 723,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(3, 4) == 6.0, \"Invalid output for triangle_area(3, 4)\"",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib = [0, 0, 2, 0]\n\n    for i in range(4, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n    return fib[n]\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (sorted(l)[n//2-1] + sorted(l)[n//2])/2\n    else:\n        return sorted(l)[n//2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 729,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Remove spaces and convert to lowercase\n    text = text.replace(' ', '').lower()\n\n    # Check if the reversed string is equal to the original string\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return 2**n % p\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(\"mjqqt\") == \"hello\"",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 558,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return set(s0) == set(s1)\n",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nprint(fib(10)) # 55\nprint(fib(1)) # 1\nprint(fib(8)) # 21 ",
        "test": "assert fib(1) == 1",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # check if list is monotonically increasing or decreasing\n    is_increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    is_decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return is_increasing or is_decreasing\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 944,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) < 2:\n        return []\n    else:\n        return [i * xs[i] for i in range(1, len(xs))]\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20] # Test case 1",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "test": "assert fibfib(1) == 0",
        "num_ids": 919,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def vowels_count(s):\n    \"\"\"\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set('aeiou')\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if char.lower() == 'y' and s[-1].lower() != 'y':\n                count -= 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def circular_shift(x, shift):\n    \"\"\"\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fruit_distribution(s,n):\n    # split the string into a list of numbers and words\n    # then iterate through the list and add up all the numbers\n    # subtract the total from n to get the number of mango fruits\n    fruits = s.split()\n    total = 0\n    for fruit in fruits:\n        if fruit.isdigit():\n            total += int(fruit)\n    return n - total",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 884,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                        so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n\n    if not even_nodes:\n        return []\n\n    smallest_even_value = min(even_nodes, key=lambda x: x[0])[0]\n    smallest_even_nodes = [(val, idx) for val, idx in even_nodes if val == smallest_even_value]\n\n    smallest_even_node = min(smallest_even_nodes, key=lambda x: x[1])\n\n    return [smallest_even_node[0], smallest_even_node[1]]\n",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 1822,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    # Remove all non-positive integers from the list\n    lst = [x for x in lst if x > 0]\n    \n    # If the list is empty after removing non-positive integers, return -1\n    if not lst:\n        return -1\n    \n    # Create a dictionary to count the frequency of each integer in the list\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    \n    # Sort the list of unique integers in descending order\n    unique_nums = sorted(set(lst), reverse=True)\n    \n    # Loop through the unique integers and return the first integer that meets the condition\n    for num in unique_nums:\n        if freq_dict[num] >= num:\n            return num\n    \n    # If no integer meets the condition, return -1\n    return -1\n",
        "test": "assert search([5, 5, 4, 4, 4]) == -1",
        "num_ids": 1208,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            sorted_lst.append(max(lst))\n            lst.remove(max(lst))\n    return sorted_lst\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 1228,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00 # valid triangle with sides 3, 4, and 5",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    \n    # Check if the list is palindromic\n    if q == q[::-1]:\n        # Check if the sum of the elements is less than or equal to the maximum possible weight w\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic.\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    len1 = sum(len(s) for s in lst1)\n    len2 = sum(len(s) for s in lst2)\n\n    if len1 < len2:\n        return lst1\n    elif len2 < len1:\n        return lst2\n    else:\n        return lst1",
        "test": "assert total_match([], []) == []",
        "num_ids": 1234,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a < 6:\n        return False\n    for i in range(2, int(a/2) + 1):\n        if is_prime(i) and is_prime(a//i):\n            return True\n    return False\n\nprint(is_multiply_prime(30)) # True\nprint(is_multiply_prime(45)) # False ",
        "test": "assert is_multiply_prime(30) == True",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    if x == 1:\n        return True\n\n    power = 0\n    while n ** power < x:\n        power += 1\n\n    return n ** power == x\n",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def iscube(a):\n    if a == 0:\n        return True\n    else:\n        x = abs(a) ** (1/3)\n        return int(x + 0.5) ** 3 == abs(a)\n",
        "test": "assert iscube(1) == True",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 78,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    \n    primes = {2, 3, 5, 7, 11, 13}\n    hex_digits = \"0123456789ABCDEF\"\n    count = 0\n    \n    for digit in num:\n        if hex_digits.index(digit) < 10:\n            if int(digit) in primes:\n                count += 1\n        else:\n            if int(hex_digits.index(digit)) in primes:\n                count += 1\n    \n    return count\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 1315,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n    \n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    \n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]  # Convert decimal to binary and remove the '0b' prefix\n    binary = 'db' + binary + 'db'  # Add the extra characters\n    return binary\n",
        "test": "assert decimal_to_binary(1023) == \"db1111111111db\"",
        "num_ids": 701,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True\n",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs as input and returns a list of corresponding letter grades.\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 2198,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    return is_prime(len(string))\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1  # 1",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    # Convert N to binary string\n    binary_str = bin(N)[2:]\n    # Calculate the sum of digits in binary string\n    binary_sum = sum(int(digit) for digit in binary_str)\n    # Convert the binary sum to binary string\n    binary_sum_str = bin(binary_sum)[2:]\n    return binary_sum_str",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
        "test": "assert add([4, 2, 6, 7]) == 2",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.  \n    Note: You should keep the order of words and blank spaces in the sentence.  \n    \n    For example:  \n    anti_shuffle('Hi') returns 'Hi'  \n    anti_shuffle('hello') returns 'ehllo'  \n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'  \n    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 883,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, which is similar to matrix,\n    however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, \n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
        "num_ids": 1364,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array.copy()\n\n    first_last_sum = array[0] + array[-1]\n    if first_last_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
        "test": "assert sort_array([]) == []",
        "num_ids": 1243,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def encrypt(s):\n    \"\"\"\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places. \n    For example: \n    encrypt('hi') returns 'lm' \n    encrypt('asdfghjkl') returns 'ewhjklnop' \n    encrypt('gf') returns 'kj' \n    encrypt('et') returns 'ix' \n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[2*2:]+alphabet[:2*2] # rotating the alphabet by 2*2 places\n    table = str.maketrans(alphabet, shifted_alphabet) # creating a translation table\n    encrypted_string = s.translate(table) # translating the string using the table\n    return encrypted_string\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    lst_sorted = sorted(set(lst))\n    if len(lst_sorted) < 2:\n        return None\n    \n    return lst_sorted[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 884,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # split the input string into sentences\n    sentences = S.split('.') + S.split('!') + S.split('?')\n    # initialize the count of boredoms to 0\n    count = 0\n    # iterate over the sentences and check if they start with the word \"I\"\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    # return the count of boredoms\n    return count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if char.isupper():\n                encoded_message += chr(ord(char) - 6)\n            else:\n                encoded_message += chr(ord(char) + 6)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message\n",
        "test": "assert encode('Python') == 'tGdFp'",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(max_prime))\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 2071,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False. \n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not d:\n        return False\n    lower = all(isinstance(key, str) and key.islower() for key in d.keys())\n    upper = all(isinstance(key, str) and key.isupper() for key in d.keys())\n    return lower or upper\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1224,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        if len(primes) == n-2:\n            break\n    return primes\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a = abs(a) % 10\n    b = abs(b) % 10\n    return a * b\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = set(['A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    num = float(value)\n\n    if num > 0:\n        int_num = int(num)\n        decimal = num - int_num\n        if decimal < 0.5:\n            return int_num\n        else:\n            return int_num + 1\n    elif num < 0:\n        int_num = int(num)\n        decimal = abs(num) - abs(int_num)\n        if decimal < 0.5:\n            return int_num\n        else:\n            return int_num - 1\n    else:\n        return 0\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1127,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]  # Initialize the pile with the first level\n    for i in range(n-1):\n        if n % 2 == 0:\n            pile.append(pile[-1] + 2)  # Add the next even number of stones\n        else:\n            pile.append(pile[-1] + 1)  # Add the next odd number of stones\n    return pile\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces.\n    Your task is to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split(',')\n    result = []\n    for word in words:\n        if ' ' in word:\n            sub_words = word.split(' ')\n            for sub_word in sub_words:\n                if sub_word.strip():\n                    result.append(sub_word.strip())\n        else:\n            result.append(word.strip())\n    return result\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Initialize the even number variable\n    even_number = -1\n    # Loop through the range [x, y] inclusive\n    for num in range(x, y+1):\n        # Check if the current number is even\n        if num % 2 == 0:\n            # Update the even_number variable if the current even number is greater than the previous one\n            if num > even_number:\n                even_number = num\n    return even_number\n",
        "test": "assert choose_num(12, 15) == 14",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total / count)\n    binary = bin(avg)[2:]\n    return binary if binary.startswith('0b') else '0b' + binary\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 986,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        has_even_digit = any(d in \"02468\" for d in str(num))\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1007,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    \n             -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n             -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n             -> sort arr -> [-1, 1, 55]\n             -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    digits = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n\n    # Sort the array\n    arr.sort()\n\n    # Reverse the array\n    arr.reverse()\n\n    # Iterate through the array and replace digits with their corresponding names\n    for num in arr:\n        if num >= 1 and num <= 9:\n            result.append(digits[num-1])\n\n    return result\n",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
        "num_ids": 1852,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter, and returns a list of size n, such that\n    the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise.\n    i starts from 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0: # i is even\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else: # i is odd\n            result.append(sum(range(1, i+1)))\n    return result\n",
        "test": "assert f(5) == [1, 2, 6, 24, 15]",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even = 0\n    odd = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return (even, odd)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1165,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def digit_sum(num):\n        if num < 0:\n            num = -num\n        return sum(int(d) for d in str(num))\n\n    return sum(1 for num in arr if digit_sum(num) > 0)",
        "test": "assert count_nums([]) == 0",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n    \"\"\"\n    \n    if not arr:\n        return True\n    \n    for i in range(len(arr)):\n        j = i + 1\n        while j < len(arr):\n            if arr[i] > arr[j]:\n                return False\n            j += 1\n    \n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False # Testcase 2",
        "num_ids": 1545,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Count the number of odd and even elements in lst1\n    odd_count = 0\n    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Check if it's possible to exchange elements between lst1 and lst2 to make all elements of lst1 even\n    if odd_count == 0:\n        return \"YES\"\n    elif odd_count > len(lst2):\n        return \"NO\"\n    else:\n        lst2_copy = lst2.copy()\n        for num in lst1:\n            if num % 2 != 0:\n                for i in lst2_copy:\n                    if i % 2 == 0:\n                        lst1.remove(num)\n                        lst2.remove(i)\n                        lst1.append(i)\n                        lst2.append(num)\n                        lst2_copy.remove(i)\n                        break\n                    else:\n                        continue\n                odd_count -= 1\n                if odd_count == 0:\n                    return \"YES\"\n        return \"NO\"\n",
        "test": "assert exchange([1, 3, 5], [2, 4, 7]) == \"NO\"",
        "num_ids": 1615,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    \n    if test == \"\":\n        return {}\n    \n    test_list = test.split()\n    letter_count = {}\n    \n    for letter in test_list:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    \n    max_count = max(letter_count.values())\n    max_letters = [letter for letter, count in letter_count.items() if count == max_count]\n    result = {}\n    \n    for letter in max_letters:\n        result[letter] = max_count\n        \n    return result\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 1447,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_delete(s, c):\n    # deleting all characters in s that are equal to any character in c\n    s = ''.join([ch for ch in s if ch not in c])\n    # checking if the result string is palindrome\n    is_palindrome = s == s[::-1]\n    return s, is_palindrome",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for string in lst:\n        count = sum(int(digit) % 2 == 1 for digit in string)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, len(string), len(string), len(string)))\n    return result\n",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
        "num_ids": 1284,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return None\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n            \n    return min_sum\n",
        "test": "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    total_water = sum(sum(row) for row in grid)\n    if total_water == 0:\n        return 0\n\n    num_buckets = total_water // capacity\n    remaining_water = total_water % capacity\n\n    if remaining_water > 0:\n        num_buckets += 1\n\n    return num_buckets\n",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Example 1 Failed\"",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    \n    # Define a function to count the number of ones in the binary representation of a number\n    def count_ones(n):\n        return bin(n).count('1')\n    \n    # Sort the array first by the number of ones in the binary representation, and then by the decimal value\n    arr.sort(key=lambda x: (count_ones(x), x))\n    \n    return arr\n",
        "test": "assert sort_array([9, 9, 9, 9, 9]) == [9, 9, 9, 9, 9]",
        "num_ids": 1248,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. \n    Note: you may assume the input string contains only letters and spaces. \n    Examples: \n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"] \n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] \n    select_words(\"simple white space\", 2) ==> [] \n    select_words(\"Hello world\", 4) ==> [\"world\"] \n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\"\"\"\n    \n    # If the input string is empty, return an empty list\n    if not s:\n        return []\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Filter the words based on the number of consonants and return the result\n    result = [word for word in words if sum(1 for c in word if c.lower() not in \"aeiou\") == n]\n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 1210,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n    \n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    word = list(word)\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if (i == len(word)-1 or word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "test": "assert get_closest_vowel(\"ab\") == \"\"",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_good(s):\n        '''\n        Helper function to check if a string is good or not.\n        '''\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    for s1 in lst[0]:\n        for s2 in lst[1]:\n            s = s1 + s2\n            if is_good(s):\n                return 'Yes'\n    return 'No'\n",
        "test": "assert match_parens(['(', ')']) == 'Yes'",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    if k == 0:\n        return []\n    elif k == 1:\n        return [max(arr)]\n    else:\n        arr.sort(reverse=True)\n        return arr[:k]\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # Initialize a variable to store the sum\n    sum_of_odds = 0\n    # Loop through the list\n    for i in range(len(lst)):\n        # Check if the element is odd and in an even position\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            # Add the element to the sum\n            sum_of_odds += lst[i]\n    # Return the sum\n    return sum_of_odds\n",
        "test": "assert solution([2, 4, 6, 8]) == 0",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Initialize sum to 0\n    total_sum = 0\n\n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # If the element has at most two digits, add it to the sum\n        if arr[i] < 100:\n            total_sum += arr[i]\n\n    # Return the total sum\n    return total_sum\n",
        "test": "assert add_elements([100,200,300,400,500], 3) == 0",
        "num_ids": 991,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def collatz_sequence(n):\n    \"\"\"\n    Returns the Collatz sequence for a given positive integer n.\n    \"\"\"\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sequence\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        * Collatz(1) is [1].\n        * returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    sequence = collatz_sequence(n)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_numbers)",
        "test": "assert get_odd_collatz(5) == [1, 5]",
        "num_ids": 1442,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def valid_date(date):\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n    3. The months should not be less than 1 or higher than 12. \n    4. The date should be in the format: mm-dd-yyyy \n\n    for example: \n    valid_date('03-11-2000') => True \n\n    valid_date('15-01-2012') => False \n\n    valid_date('04-0-2040') => False \n\n    valid_date('06-04-2020') => True \n\n    valid_date('06/04/2020') => False \n    \"\"\"\n    # Check if the date string is empty\n    if date == \"\":\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n\n    # Check if the month is valid\n    if int(month) < 1 or int(month) > 12:\n        return False\n\n    # Check if the year is valid\n    if len(year) != 4 or not year.isdigit():\n        return False\n\n    # Check if the day is valid based on the month and year\n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and (int(day) < 1 or int(day) > 31):\n        return False\n    elif int(month) in [4, 6, 9, 11] and (int(day) < 1 or int(day) > 30):\n        return False\n    elif int(month) == 2 and (int(day) < 1 or int(day) > 29):\n        return False\n\n    # Check if the date is in the format: mm-dd-yyyy\n    if len(month) != 2 or len(day) != 2 or len(year) != 4:\n        return False\n\n    return True\n",
        "test": "assert valid_date('01-01-1900') == True",
        "num_ids": 2121,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([x for x in txt if x.islower() and ord(x) % 2 == 1])",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n        elif lst[i] == lst[i-1] and lst.count(lst[i]) > 1:\n            return False\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1430,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"\n    You are given two intervals, where each interval is a pair of integers.\n    For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end)\n    includes both start and end. For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two intervals is a prime number.\n    If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n\n    start = max(start1, start2)\n    end = min(end1, end2)\n\n    if start > end:\n        return \"NO\"\n\n    intersection_length = end - start + 1\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1301,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    product = 1\n    for num in arr:\n        if num < 0:\n            product *= -1\n    sum = 0\n    for num in arr:\n        sum += abs(num)\n    return sum * product\n",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n    # Convert the grid into a one-dimensional list\n    values = [grid[i // n][i % n] for i in range(n * n)]\n    # Sort the values and remove duplicates\n    unique_values = sorted(set(values))\n    # Convert the unique values back to a grid\n    grid = [unique_values[i:i + n] for i in range(0, len(unique_values), n)]\n    # Initialize the result list with the first value\n    result = [unique_values[0]]\n    # Initialize the visited cells set\n    visited = {(0, 0)}\n    # Initialize the current position\n    current_position = (0, 0)\n    # Initialize the current value\n    current_value = grid[0][0]\n    # Initialize the remaining steps\n    remaining_steps = k - 1\n    # Traverse the grid\n    while remaining_steps > 0:\n        # Find the next cell to go to\n        next_position = None\n        next_value = None\n        min_value = float('inf')\n        for row in range(max(0, current_position[0] - 1), min(n, current_position[0] + 2)):\n            for col in range(max(0, current_position[1] - 1), min(n, current_position[1] + 2)):\n                if (row, col) not in visited and grid[row][col] < min_value:\n                    min_value = grid[row][col]\n                    next_position = (row, col)\n                    next_value = grid[row][col]\n        # Update the current position and value\n        current_position = next_position\n        current_value = next_value\n        # Update the visited cells set\n        visited.add(current_position)\n        # Update the result list\n        result.append(current_value)\n        # Decrement the remaining steps\n        remaining_steps -= 1\n    return result",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 1798,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tri(n):\n    \"\"\"\n    Returns the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    tribonacci = [1, 3, 2]\n    if n < 3:\n        return tribonacci[:n+1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1])\n    return tribonacci\n",
        "test": "assert tri(1) == [1, 3] # check the first two numbers of the sequence",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    found_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            found_odd = True\n        n //= 10\n    if found_odd:\n        return product\n    else:\n        return 0\n",
        "test": "assert digits(1) == 1",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    Returns the sum of squared numbers in the given list, after rounding each element to the upper int(Ceiling) first.\n    \"\"\"\n    # Round each element in the list to the upper int(Ceiling)\n    lst = [int(i+1) if i-int(i)!=0 else int(i) for i in lst]\n    \n    # Calculate the sum of squares of the rounded elements\n    sum_of_squares = sum([i**2 for i in lst])\n    \n    # Return the sum_of_squares\n    return sum_of_squares\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise. \n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt:  # If string is empty\n        return False\n    else:\n        words = txt.split()  # Split the string into a list of words\n        last_word = words[-1]  # Get the last word in the list\n        last_char = last_word[-1]  # Get the last character of the last word\n        if last_char.isalpha():  # Check if the last character is an alphabetical character\n            if len(words[-1]) == 1:  # Check if the last word only contains one character\n                if len(words) == 1:  # Check if there is only one word in the string\n                    return True\n                else:  # If there are more than one word, check if the last character of the second last word is not an alphabetical character\n                    second_last_char = words[-2][-1]\n                    if not second_last_char.isalpha():\n                        return True\n                    else:\n                        return False\n            else:  # If the last word contains more than one character, return False\n                return False\n        else:  # If the last character is not an alphabetical character, return False\n            return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False ",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n            break\n    return largest_index\n",
        "test": "assert can_arrange([1,2,4,3,5]) == 3",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. \n    If there is no negative or positive integers, return them as None.\n    \n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 1128,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    if type(a) == str:\n        a = a.replace(',', '.')\n        a = float(a)\n    if type(b) == str:\n        b = b.replace(',', '.')\n        b = float(b)\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    count = 0\n    for i in range(2, n+1, 2):\n        for j in range(2, n+1, 2):\n            for k in range(2, n+1, 2):\n                for l in range(2, n+1, 2):\n                    if i+j+k+l == n:\n                        count += 1\n                        if count > 1:\n                            return True\n                        else:\n                            return False\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n        for j in range(1, i):\n            result *= j\n\n    return result\n",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace multiple consecutive spaces with a single -\n    i = 0\n    while i < len(text) - 2:\n        if text[i] == \"_\" and text[i+1] == \"_\" and text[i+2] == \"_\":\n            text = text[:i+1] + \"-\" + text[i+3:]\n        i += 1\n\n    return text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if the file name has more than three digits\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    \n    # Split the file name by dot '.' and check if there is exactly one dot in the file name\n    name_parts = file_name.split('.')\n    if len(name_parts) != 2:\n        return 'No'\n    \n    # Check if the substring before the dot starts with a latin alphapet letter\n    if not name_parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all conditions are met, return 'Yes'\n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == 'Yes' # valid file name",
        "num_ids": 1600,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n",
        "test": "assert sum_squares([1,2,3]) == 6",
        "num_ids": 1004,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence, the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
        "num_ids": 976,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Convert x and n to fractions\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Compute the product of x and n\n    prod_num = x_num * n_num\n    prod_den = x_den * n_den\n\n    # Check if the product is a whole number\n    return prod_num % prod_den == 0\n",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits, \n    order them based on their index in original list.\n    \n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Define a helper function to calculate the sum of digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    # Sort the list of integers based on the sum of their digits and their index in the list\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def specialFilter(nums):\n    \"\"\"\n    Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 == 1 and last_digit % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
        "num_ids": 1095,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    # Create the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Initialize the count of valid triples\n    count = 0\n\n    # Iterate through all possible triples (i, j, k)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                # Check if the sum of triple is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count",
        "test": "assert get_max_triples(5) == 1 # [1, 3, 7, 13, 21] (only triple is (1, 7, 13))",
        "num_ids": 1556,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1+1:idx2])\n\nprint(bf(\"Jupiter\", \"Neptune\")) # should return (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\")) # should return (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\")) # should return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order.\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    \n    # Filter out the strings with odd lengths\n    even_length_strings = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    \n    return sorted_list\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1249,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is a prime number, otherwise False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"\n    This function takes three integers n, x, and y as input and returns the value of x if n is a prime number,\n    and the value of y otherwise.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(2, 34, 12) == 34 # should return x for prime n = 2",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            result += num ** 2\n    return result\n",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 10",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def compare(game, guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing. \n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score. \n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i]-guess[i]))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1342,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = \"\"\n    strongest_strength = float('-inf')\n\n    for extension in extensions:\n        cap_letters = sum(1 for c in extension if c.isupper())\n        sm_letters = sum(1 for c in extension if c.islower())\n        strength = cap_letters - sm_letters\n\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\"",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 1823,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word.\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    n = len(b)\n    for i in range(n):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    num_str = str(abs(num))  # Convert the number to a string\n    even_count = 0\n    odd_count = 0\n\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(-12) == (1, 1)",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Define the mapping between integers and roman numerals\n    roman_mapping = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    # Convert the integer to a roman numeral\n    result = ''\n    for value, numeral in roman_mapping.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()\n",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 1239,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_max(words):\n    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                        the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = remaining - min(need, remaining)\n    return [total_eaten, remaining_carrots]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations,\n    and the second list is a list of integers. Use the two given lists to build the\n    algebric expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    expression = []\n    for i in range(len(operand)):\n        expression.append(str(operand[i]))\n        if i < len(operator):\n            expression.append(operator[i])\n    expression = ''.join(expression)\n    result = eval(expression)\n    return result\n",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9  # addition, multiplication, subtraction",
        "num_ids": 1569,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is. If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    # check if the string contains at least one letter\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            break\n\n    # if the string contains at least one letter, reverse its case for letters, keep others\n    if has_letter:\n        result = \"\"\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result += char.upper()\n                else:\n                    result += char.lower()\n            else:\n                result += char\n    else:\n        # if the string contains no letters, reverse it\n        result = s[::-1]\n\n    return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 922,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n\n    even_digits = []\n    for num in range(a, b + 1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n\n    return sorted(list(set(even_digits)))\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1267,
        "indeed": false
    }
]