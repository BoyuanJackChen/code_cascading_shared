[
    {
        "number": 0,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    n = len(numbers)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if abs(numbers[i]-numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False ",
        "num_ids": 2269,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove any spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n\n    # Initialize an empty list to store the separate groups of parentheses\n    separate_groups = []\n\n    # Initialize variables to keep track of the current open and close parentheses\n    open_parens = 0\n    close_parens = 0\n\n    # Initialize a variable to keep track of the start of the current group of parentheses\n    start_index = 0\n\n    # Iterate through the input string\n    for i, char in enumerate(paren_string):\n        # If we encounter an open parenthesis, increment the open parenthesis count\n        if char == '(':\n            open_parens += 1\n\n        # If we encounter a close parenthesis, decrement the close parenthesis count\n        elif char == ')':\n            close_parens += 1\n\n        # If we encounter a close parenthesis without a matching open parenthesis,\n        # we've encountered an invalid input string\n        if close_parens > open_parens:\n            raise ValueError(\"Invalid input string\")\n\n        # If we've encountered a close parenthesis that matches an open parenthesis,\n        # we've found the end of a group of parentheses\n        if open_parens == close_parens:\n            # Add the current group of parentheses to the list of separate groups\n            separate_groups.append(paren_string[start_index:i+1])\n\n            # Reset the open and close parenthesis counts and the start index\n            open_parens = 0\n            close_parens = 0\n            start_index = i+1\n\n    # If we've reached the end of the input string without finding any groups of parentheses,\n    # there's only one group\n    if start_index == 0:\n        separate_groups.append(paren_string)\n\n    return separate_groups\n",
        "test": "assert separate_paren_groups('()') == ['()']",
        "num_ids": 4333,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    decimal = number - int(number)\n    return decimal\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1433,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False ",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1998,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset. Mean Absolute Deviation is the average\n    absolute difference between each element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n\n    :param numbers: A list of floats\n    :return: The mean absolute deviation of the given list\n    \"\"\"\n\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute differences between each number and the mean\n    absolute_differences = [abs(number - mean) for number in numbers]\n\n    # Calculate the mean of the absolute differences\n    return sum(absolute_differences) / len(absolute_differences)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Error in mean_absolute_deviation calculation for [1.0, 2.0, 3.0, 4.0]\"",
        "num_ids": 2393,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list 'numbers'.\"\"\"\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 2064,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    level = 0\n    max_level = 0\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            if level > max_level:\n                max_level = level\n        elif char == ')':\n            level -= 1\n        if level == 0 and max_level > 0:\n            result.append(max_level)\n            max_level = 0\n    return result ",
        "test": "assert parse_nested_parens('()') == [1]",
        "num_ids": 2860,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1807,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return (total_sum, total_product)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1837,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 2607,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    while not is_palindrome(string + string[::-1][1:]):\n        string += string[-1]\n\n    return string + string[::-1][1:]\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2590,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Both strings should have same length\")\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n",
        "test": "assert string_xor(\"101\", \"010\") == \"111\"",
        "num_ids": 2342,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    longest_string = ''\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string if longest_string else None\n",
        "test": "assert longest(['a', 'b', 'c']) == 'a', \"longest(['a', 'b', 'c']) should return 'a'\"",
        "num_ids": 1852,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1783,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)+1)]\n",
        "test": "assert all_prefixes('') == []",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 1390,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n    # Convert the string to lower case\n    string = string.lower()\n\n    # Create an empty set to store distinct characters\n    distinct_chars = set()\n\n    # Loop through each character in the string\n    for char in string:\n        # Add the character to the set\n        distinct_chars.add(char)\n\n    # Return the length of the set, which represents the number of distinct characters in the string\n    return len(distinct_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 2004,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    notes = music_string.split()\n    result = []\n\n    for note in notes:\n        result.append(beats[note])\n\n    return result",
        "test": "assert parse_music(\"o o| .| o| o| .| .| .| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 4891,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring) - 1\n        i += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 1780,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # Define the order of the words based on their indices in the list\n    order = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    # Split the input string into a list of words\n    words = numbers.split()\n    # Sort the list based on the order of the words\n    sorted_words = sorted(words, key=lambda x: order[x])\n    # Join the sorted words into a single string\n    result = ' '.join(sorted_words)\n    return result\n",
        "test": "assert sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'",
        "num_ids": 3058,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = (float('inf'), float('-inf'))  # initialize the pair with the largest and smallest possible values\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(closest_pair[0] - closest_pair[1]):\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 3806,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    unit_numbers = []\n    \n    for num in numbers:\n        unit_num = (num - min_num) / (max_num - min_num)\n        unit_numbers.append(unit_num)\n    \n    return unit_numbers\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 3108,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 1627,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 1331,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    # divide n by 2 until it's not divisible by 2\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # check odd numbers up to the square root of n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # if n is still greater than 2, it must be a prime factor\n    if n > 2:\n        factors.append(n)\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 2464,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    \n    count = {}\n    for num in numbers:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    result = []\n    for num in numbers:\n        if count[num] == 1:\n            result.append(num)\n    \n    return result\n",
        "test": "assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 2061,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 1626,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return \"\".join(strings)\n",
        "test": "assert concatenate([]) == '', \"Incorrect concatenation of empty list\"",
        "num_ids": 1217,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1626,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 1731,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import math\n\n\ndef poly(xs, x):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many.\n    Moreoer, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    x = 0\n    while abs(poly(xs, x)) > 1e-10:\n        x += 1\n    return x\n",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0",
        "num_ids": 3531,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\"\"\"\n\n    # Create a copy of the original list and sort the values that are divisible by 3\n    l_copy = l.copy()\n    l_copy.sort()\n\n    # Initialize the output list with the original values\n    l_sorted = l.copy()\n\n    # Iterate over the original list and replace values that are divisible by 3 with the sorted values\n    for i in range(0, len(l), 3):\n        if l[i] % 3 == 0:\n            l_sorted[i] = l_copy.pop(0)\n\n    return l_sorted\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 2900,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1329,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1899,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(2, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 1526,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    l_even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    l_even.sort()\n    l_odd = [l[i] for i in range(len(l)) if i % 2 != 0]\n    l_sorted = [l_even[i//2] if i % 2 == 0 else l_odd[i//2] for i in range(len(l))]\n    return l_sorted\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]  # Test with even length list",
        "num_ids": 2709,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[0] + group[1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"abcd\")) == \"abcd\"",
        "num_ids": 3352,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef next_prime(num):\n    if is_prime(num):\n        return num\n    num += 1\n    while not is_prime(num):\n        num += 1\n    return num\n\n\ndef prime_fib(n: int):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib = [1, 1]\n        for i in range(2, n+1):\n            fib.append(fib[-1] + fib[-2])\n            if is_prime(fib[-1]) and next_prime(fib[-1]) == fib[0]:\n                return fib[-1]\n",
        "test": "assert prime_fib(2) == 3",
        "num_ids": 2283,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 3552,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.  n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.  The two sets of cars start out being very far from each other.  All cars move in the same speed.\n    Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Initialize variables for the left-to-right and right-to-left sets of cars\n    left_to_right_cars = n\n    right_to_left_cars = n\n\n    # Initialize a counter for the number of collisions\n    num_collisions = 0\n\n    # Iterate until one set of cars becomes empty\n    while left_to_right_cars > 0 and right_to_left_cars > 0:\n        # Move all left-to-right cars one unit to the right\n        left_to_right_cars -= 1\n        # Move all right-to-left cars one unit to the left\n        right_to_left_cars += 1\n        # Check if there was a collision\n        if left_to_right_cars == right_to_left_cars - 1:\n            num_collisions += 1\n            # Move the right-to-left cars one unit to the right to avoid overlapping\n            right_to_left_cars += 1\n\n    # Return the number of collisions\n    return num_collisions",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 3592,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    new_list = []\n    for i in l:\n        new_list.append(i+1)\n    return new_list",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1838,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l = list(set(l))  # Removing duplicates\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 2212,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    \n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Repeatedly divide the number by base and append the remainder to the result string\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n        \n    return result\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2284,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(5, 3) == 7.5, \"Incorrect area for triangle_area(5, 3)\"",
        "num_ids": 1103,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c = 0, 2, 0\n        for i in range(4, n+1):\n            c = a + b + a + b\n            a, b = b, c\n        return c\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 3291,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    \n    n = len(l)\n    l.sort()\n    \n    if n % 2 == 0:\n        median = (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        median = l[n//2]\n        \n    return median\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 2023,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # Remove non-alphanumeric characters and convert to lowercase\n    cleaned_text = ''.join(c.lower() for c in text if c.isalnum())\n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]\n",
        "test": "assert is_palindrome('') == True, \"Test 1 failed\"",
        "num_ids": 1296,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    if n == 0:\n        return 1\n    elif p == 2:\n        return 0\n    else:\n        result = 1\n        for _ in range(n):\n            result = (result * 2) % p\n        return result",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 1687,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 1783,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    result = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1417,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 783,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert the strings to sets to remove duplicates\n    s0_set = set(s0)\n    s1_set = set(s1)\n\n    # Check if the sets have the same length\n    if len(s0_set) != len(s1_set):\n        return False\n\n    # Check if all the characters in s0 are in s1\n    for char in s0_set:\n        if char not in s1_set:\n            return False\n\n    return True\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 1717,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(1) == 1",
        "num_ids": 1026,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        elif b == '>':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 2029,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    n = len(l)\n    if n == 0 or n == 1:\n        return True\n    elif n == 2:\n        return l[0] <= l[1]\n    else:\n        for i in range(1, n):\n            if l[i] < l[i-1]:\n                return False\n        return True\n",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 2455,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Create a set to store the common elements\n    commons = set()\n    # Loop through the elements of the first list\n    for num in l1:\n        # If the element is present in the second list, add it to the set of common elements\n        if num in l2:\n            commons.add(num)\n    # Sort the set of common elements and return it as a list\n    return sorted(commons)\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2035,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    max_prime_factor = 1\n    while n % 2 == 0:\n        max_prime_factor = 2\n        n //= 2\n    \n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime_factor = i\n            n //= i\n    \n    if n > 2:\n        max_prime_factor = n\n    \n    return max_prime_factor\n",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 2161,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))",
        "test": "assert sum_to_n(30) == 465, \"Error: sum_to_n(30) should be 465.\"",
        "num_ids": 1867,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 1872,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = [0] * (len(xs) - 1)\n    for i in range(1, len(xs)):\n        result[i-1] = xs[i] * i\n    return result\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 2297,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(0) == 0",
        "num_ids": 2597,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def vowels_count(s):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 2022,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    num_digits = len(digits)\n    if shift > num_digits:\n        return ''.join(str(d) for d in reversed(digits))\n    else:\n        shifted_digits = digits[-shift:] + digits[:-shift]\n        return ''.join(str(d) for d in shifted_digits)",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 2190,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    \n    # initialize the sum variable to zero\n    sum = 0\n    \n    # iterate through each character in the string\n    for char in s:\n        # check if the character is uppercase and add its ASCII code to the sum\n        if char.isupper():\n            sum += ord(char)\n    \n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 2045,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # split the string into two parts\n    parts = s.split(' and ')\n    # extract the number of apples and oranges from the parts\n    apples = int(parts[0].strip('apples'))\n    oranges = int(parts[1].strip('oranges'))\n\n    # calculate the number of mango fruits\n    mango = n - apples - oranges\n    \n    return mango\n",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 2759,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found, return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                            so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        1 <= nodes.length <= 10000\n        0 <= node.value\n    \"\"\"\n\n    if not arr:\n        return []\n\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even_value:\n                smallest_even_value = value\n                smallest_even_index = index\n            elif value == smallest_even_value and index < smallest_even_index:\n                smallest_even_index = index\n        if smallest_index == -1 or value < arr[smallest_index]:\n            smallest_index = index\n\n    if smallest_even_value == float('inf'):\n        return []\n    else:\n        return [smallest_even_value, smallest_even_index]",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 3622,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    for num in sorted(freq.keys(), reverse=True):\n        if num > 0 and freq[num] >= num:\n            return num\n    \n    return -1\n",
        "test": "assert search([4, 1, 2, 2, 3, 1]) == 2",
        "num_ids": 2373,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    lst_sorted = []\n    while lst:\n        lst_sorted.append(min(lst))\n        lst.remove(min(lst))\n        lst_sorted.append(max(lst))\n        lst.remove(max(lst))\n    return lst_sorted\n",
        "test": "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
        "num_ids": 3274,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    # check if sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # calculate semi-perimeter\n        s = (a + b + c) / 2\n        # calculate area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # return area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # sides do not form a valid triangle\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00, \"Error: Incorrect calculation\"",
        "num_ids": 2630,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False  \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    # convert the list to a palindromic list\n    q = q[::-1]\n\n    # check if it's balanced\n    if q != q[::-1]:\n        return False\n\n    # check if the sum of elements is less than or equal to the maximum possible weight\n    return sum(q) <= w\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 3203,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # Convert the array to a string for easy comparison\n    arr_str = ''.join(str(x) for x in arr)\n\n    # Reverse the string and compare it to the original string\n    rev_str = arr_str[::-1]\n\n    # Count the number of differences between the two strings\n    count = 0\n    for i in range(len(arr_str)):\n        if arr_str[i] != rev_str[i]:\n            count += 1\n\n    return count//2  # Return the minimum number of changes required\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 3677,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    if not lst1 and not lst2:\n        return []\n    \n    count1 = 0\n    count2 = 0\n    \n    for word in lst1:\n        count1 += len(word)\n        \n    for word in lst2:\n        count2 += len(word)\n        \n    if count1 == count2:\n        return lst1\n    elif count1 < count2:\n        return lst1\n    else:\n        return lst2",
        "test": "assert total_match([], []) == []",
        "num_ids": 2486,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        count = 0\n        for i in range(2, a):\n            if is_prime(i) and a % i == 0:\n                count += 1\n        if count == 3:\n            return True\n    return False\n",
        "test": "assert is_multiply_prime(2) == False # 2 is not the multiplication of 3 prime numbers",
        "num_ids": 2978,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x == n ** int(x / n) ",
        "test": "assert is_simple_power(1, 4) == True",
        "num_ids": 2120,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Check if a is a perfect cube\n    if a < 0:\n        a = -a\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "test": "assert iscube(1) == True",
        "num_ids": 2077,
        "indeed": true
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    prime_digits = {2, 3, 5, 7, 11, 13}\n    hex_digits = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n\n    num_primes = 0\n    for digit in num:\n        if int(digit, 16) in prime_digits:\n            num_primes += 1\n\n    return num_primes ",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 4157,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def decimal_to_binary(decimal):\n    # Convert the decimal number to binary format\n    binary_str = bin(decimal)[2:]\n\n    # Add the 'db' characters to the beginning and end of the string\n    binary_str = 'db' + binary_str + 'db'\n\n    # Return the final string\n    return binary_str\n",
        "test": "assert decimal_to_binary(32) == \"db100000db\"",
        "num_ids": 2364,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    if len(s) < 3:\n        return False\n    \n    s = s.lower()\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True",
        "test": "assert is_happy('abcd'), 'Example 1'",
        "num_ids": 2021,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n            GPA       |        Letter grade\n              4.0             A+\n            > 3.7             A  \n            > 3.3             A-  \n            > 3.0             B+\n            > 2.7             B   \n            > 2.3             B-\n            > 2.0             C+\n            > 1.7             C\n            > 1.3             C-\n            > 1.0             D+  \n            > 0.7             D   \n            > 0.0             D-\n              0.0             E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0]) == ['A+']",
        "num_ids": 6332,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Get the length of the string\n    length = len(string)\n\n    # Check if the length is prime\n    if length == 2 or length == 3:\n        return True\n    elif length < 2 or length % 2 == 0:\n        return False\n    else:\n        # Check if length is divisible by any number from 3 to the square root of length\n        for i in range(3, int(length**0.5)+1, 2):\n            if length % i == 0:\n                return False\n        return True\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 1709,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Define the count variable\n    count = 0\n    \n    # Define the starting value of the range function\n    start = 10**(n-1)\n    \n    # Define the ending value of the range function\n    end = 10**n\n    \n    # Iterate through the numbers in the range\n    for num in range(start, end):\n        # Check if the number starts or ends with 1\n        if str(num)[0] == '1' or str(num)[-1] == '1':\n            # Increment the count variable if the condition is met\n            count += 1\n    \n    # Return the count variable\n    return count\n",
        "test": "assert starts_one_ends(2) == 18, \"Error: Incorrect count for n=2\"",
        "num_ids": 2776,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n        @sum_digits integer\n            Sum of digits in binary\n    \n    Output:\n        a string of binary number\n    \"\"\"\n    sum_digits = 0\n    while N > 0:\n        remainder = N % 10\n        sum_digits += remainder\n        N //= 10\n    binary_sum = bin(sum_digits)[2:]\n    return binary_sum\n",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 2108,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n",
        "test": "assert add([2, 4, 6, 8]) == 12 # Test the function with a different list of even numbers at odd indices.",
        "num_ids": 1827,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.\n    \n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # Split the input string into words\n    words = s.split()\n    \n    # Create an empty list to store the ordered words\n    ordered_words = []\n    \n    # Loop through each word and order it\n    for word in words:\n        # Check if the word is empty or contains only spaces\n        if len(word) == 0 or word.isspace():\n            ordered_words.append(word)\n        else:\n            # Create a list of characters in the word\n            chars = list(word)\n            \n            # Sort the characters in ascending order of ascii value\n            chars.sort()\n            \n            # Join the characters back to form a new word\n            ordered_word = ''.join(chars)\n            \n            # Append the ordered word to the list of ordered words\n            ordered_words.append(ordered_word)\n    \n    # Join the ordered words back to form the ordered string\n    ordered_string = ' '.join(ordered_words)\n    \n    return ordered_string\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 3087,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 110,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n\n    sorted_coordinates = sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))\n\n    return sorted_coordinates",
        "test": "assert get_row([], 1) == []",
        "num_ids": 3837,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    if not array:\n        return []\n    \n    first_element = array[0]\n    last_element = array[-1]\n    \n    if sum([first_element, last_element]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 2615,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    s = s.lower() # convert the string to lowercase\n    new_s = ''\n    for c in s:\n        if c.isalpha():\n            new_c = chr((ord(c) - 97 + 2*2) % 26 + 97)\n            new_s += new_c\n        else:\n            new_s += c\n    return new_s\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 2697,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(lst)\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 2322,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    sentences = S.split(\".\") + S.split(\"?\") + S.split(\"!\")\n    boredom_count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0].lower() == \"i\":\n            boredom_count += 1\n    return boredom_count ",
        "test": "assert is_bored(\"Hello world\") == 0  # should return 0",
        "num_ids": 2131,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    any_int(3.6, -2.2, 2) \u279e False\n    \n    '''\n    if type(x) == int and type(y) == int and type(z) == int:\n        if (x == y + z) or (y == x + z) or (z == x + y):\n            return True\n    return False",
        "test": "assert any_int(5, 2, 7) == True, \"Test 1 failed\"",
        "num_ids": 2465,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'AEIOUaeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.upper() in vowels:\n                shift = vowels.index(char.upper()) + 2\n                encoded_message += vowels[shift%5] + vowels[shift%5].upper()\n            else:\n                shift = ord(char.upper()) - ord('A') + 2\n                encoded_message += chr(((ord(char.upper()) - ord('A') + shift) % 26) + ord('A'))\n        else:\n            encoded_message += char\n    return encoded_message.swapcase()\n",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
        "num_ids": 3509,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(num):\n    \"\"\"Check if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    if largest_prime is not None:\n        return sum(int(digit) for digit in str(largest_prime))\n    else:\n        return 0",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 5277,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lower_case_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    upper_case_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    if lower_case_keys or upper_case_keys:\n        return True\n    else:\n        return False",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 3275,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n. For example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 2401,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Convert the integers to strings to get the unit digits\n    a_str = str(a)\n    b_str = str(b)\n    \n    # Extract the unit digits and convert them back to integers\n    a_unit_digit = int(a_str[-1])\n    b_unit_digit = int(b_str[-1])\n    \n    # Multiply the unit digits\n    result = a_unit_digit * b_unit_digit\n    \n    return result ",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 2355,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 1354,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def closest_integer(value):\n    try:\n        float_value = float(value)\n        if float_value < 0:\n            int_value = int(float_value - 0.5)\n        else:\n            int_value = int(float_value + 0.5)\n        return int_value\n    except ValueError:\n        return None",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 2063,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(n-1):\n        if n % 2 == 1:\n            n += 2\n        else:\n            n += 1\n        pile.append(n)\n    return pile",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 2756,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def words_string(s):\n    # Split the string into words using spaces or commas\n    words = s.split(\", \")\n\n    # Return the resulting list of words\n    return words",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 2118,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    biggest_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            if i > biggest_even:\n                biggest_even = i\n    return biggest_even\n",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 2207,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1772,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # Create an empty list to store the result.\n    result = []\n\n    # Loop through each element in the list.\n    for num in x:\n\n        # Check if the number has any even digit.\n        even_digit_exists = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digit_exists = True\n                break\n\n        # If no even digit exists, add the number to the result list.\n        if not even_digit_exists:\n            result.append(num)\n\n    # Return the sorted result list.\n    return sorted(result)\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 3053,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n                 -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]  -> sort arr -> [-1, 1, 55]\n                 -> reverse arr -> [55, 1, -1]\n    return = ['One']\n    \"\"\"\n\n    # If the array is empty, return an empty array\n    if not arr:\n        return []\n\n    # Sort the array in ascending order and reverse it\n    arr.sort()\n    arr.reverse()\n\n    # Create a dictionary to map numbers to names\n    name_map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    # Create an empty list to store the names\n    names = []\n\n    # Loop through each number in the array\n    for num in arr:\n        # If the number is between 1 and 9, add its name to the list\n        if 1 <= num <= 9:\n            names.append(name_map[num])\n        else:\n            # If the number is not between 1 and 9, ignore it\n            pass\n\n    return names\n",
        "test": "assert by_length([]) == []",
        "num_ids": 3752,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise. i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of n recursively.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "test": "assert f(1) == [1]",
        "num_ids": 2518,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 3226,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1579,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                    array by performing any number of right shift operations.\n                    \n    \"\"\"\n\n    # If array is empty then return True\n    if len(arr) == 0:\n        return True\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # If the array is sorted in non-decreasing order then return True\n    if arr[0] == min(arr):\n        return True\n\n    # If the array is not sorted in non-decreasing order then return False\n    return False\n",
        "test": "assert move_one_ball([3, 4, 5, 1, 2]) == True",
        "num_ids": 4716,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers, \n    and determines whether it is possible to perform an exchange of elements \n    between them to make lst1 a list of only even numbers. \n    There is no limit on the number of exchanged elements between lst1 and lst2. \n    If it is possible to exchange elements between the lst1 and lst2 to make \n    all the elements of lst1 to be even, return \"YES\". \n    Otherwise, return \"NO\". \n    For example: \n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" \n    It is assumed that the input lists will be non-empty. \n    \"\"\" \n    \n    # Initialize the count of even and odd elements in lst1 and lst2\n    even_count_lst1 = 0\n    odd_count_lst1 = 0\n    even_count_lst2 = 0\n    odd_count_lst2 = 0\n    \n    for num in lst1:\n        if num % 2 == 0:\n            even_count_lst1 += 1\n        else:\n            odd_count_lst1 += 1\n            \n    for num in lst2:\n        if num % 2 == 0:\n            even_count_lst2 += 1\n        else:\n            odd_count_lst2 += 1\n    \n    # Check if it is possible to swap all odd elements of lst1 with even elements of lst2\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 4477,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    counts = {}\n    for char in test.split():\n        counts[char] = counts.get(char, 0) + 1\n    max_count = max(counts.values()) if counts else 0\n    result = {char: count for char, count in counts.items() if count == max_count}\n    return result\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 3759,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task:\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome. \n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check. \n    Example:\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\",  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Remove characters in c from s\n    new_s = ''.join([char for char in s if char not in c])\n    # Check if new_s is a palindrome\n    is_palindrome = new_s == new_s[::-1]\n    return (new_s, is_palindrome)\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 2639,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567']) #doctest: +NORMALIZE_WHITESPACE\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"]) #doctest: +NORMALIZE_WHITESPACE\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for digit in lst[i]:\n            if int(digit) % 2 == 1:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{} of the {}nput.\".format(count, i+1, len(lst)))\n    return result\n",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
        "num_ids": 3685,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums. \n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    \n    # Initialize variables\n    n = len(nums)\n    if n == 0:\n        return 0\n    \n    # Initialize variables\n    curr_sum = 0\n    min_sum = float('inf')\n    \n    # Loop through each element in the array\n    for i in range(n):\n        curr_sum += nums[i]\n        \n        # If the current sum is less than the minimum sum seen so far\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n            \n        # If the current element is negative and the sum is zero, start again from that element\n        if nums[i] < 0 and curr_sum == 0:\n            curr_sum = 0\n            \n    return min_sum\n",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6",
        "num_ids": 2533,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \n    # Initialize variables\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    num_buckets = num_rows * num_cols\n    filled_wells = 0\n    remaining_capacity = capacity\n    num_lowerings = 0\n    \n    # Iterate through each row and column in the grid\n    for i in range(num_rows):\n        for j in range(num_cols):\n            # If there is water in the well, add it to the bucket and check if it can be emptied\n            if grid[i][j]:\n                filled_wells += 1\n                remaining_capacity -= 1\n            \n            # If the bucket is full, empty it and record a lowering\n            if remaining_capacity == 0:\n                num_buckets -= filled_wells\n                num_lowerings += 1\n                filled_wells = 0\n                remaining_capacity = capacity\n    \n    # If there are any remaining wells in the last row, record a lowering\n    if filled_wells > 0:\n        num_buckets -= filled_wells\n        num_lowerings += 1\n    \n    # Return the number of lowerings required to empty the wells\n    return num_lowerings\n",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
        "num_ids": 3766,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order. \n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    \n    # Convert each integer to binary and count number of ones\n    binary_count = [(bin(x)[2:], x) for x in arr]\n    \n    # Sort based on number of ones and then decimal value\n    binary_count.sort(key=lambda x: (len(x[0]), x[1]))\n    \n    # Extract sorted array\n    sorted_arr = [x[1] for x in binary_count]\n    \n    return sorted_arr\n",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 3086,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. \n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # split the string into words\n    words = s.split()\n\n    # initialize an empty list to store the words with exactly n consonants\n    result = []\n\n    # loop through each word in the list of words\n    for word in words:\n        # initialize a counter for consonants\n        count = 0\n\n        # loop through each letter in the word\n        for letter in word:\n            # check if the letter is a consonant\n            if letter not in ['a', 'e', 'i', 'o', 'u']:\n                # increment the counter for consonants\n                count += 1\n\n        # if the word has exactly n consonants, append it to the result list\n        if count == n:\n            result.append(word)\n\n    # return the result list\n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 3905,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] not in vowels:\n            if word[i+1] in vowels and word[i+2] not in vowels:\n                return word[i+1]\n    return \"\"\n",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 2316,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only. \n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good. \n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_balanced(s):\n        \"\"\"\n        Check if a string is balanced or not.\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n\n    # Check if it's possible to concatenate the two strings in some order\n    # that the resulting string will be balanced\n    for i in range(len(lst) - 1):\n        if is_balanced(lst[i] + lst[i + 1]):\n            return 'Yes'\n    return 'No'\n",
        "test": "assert match_parens(['()(', ')']) == 'Yes'",
        "num_ids": 3236,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements in the sorted array\n    return arr[:k] ",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 3012,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 2430,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Initialize sum variable\n    sum = 0\n\n    # Loop through the first k elements of arr\n    for i in range(k):\n        # If the element has at most two digits, add it to sum\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n\n    return sum\n",
        "test": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
        "num_ids": 2651,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append((3 * sequence[-1]) + 1)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_numbers)",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 4034,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    \n    if month == 2 and (day < 1 or day > 29):\n        return False\n    \n    return True\n",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 4474,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # Check if there are whitespaces in the text\n    if ' ' in txt:\n        # Split the text on whitespace and return the list\n        return txt.split()\n    # Check if there are commas in the text\n    elif ',' in txt:\n        # Split the text on commas and return the list\n        return txt.split(',')\n    # If there are no whitespaces or commas in the text, return the number of lower-case letters with odd order in the alphabet\n    else:\n        # Initialize a variable to store the number of lower-case letters with odd order in the alphabet\n        odd_order_letters = 0\n        # Loop through the characters in the text\n        for char in txt:\n            # Check if the character is a lower-case letter\n            if 'a' <= char <= 'z':\n                # Calculate the order of the character in the alphabet\n                order = ord(char) - ord('a')\n                # Check if the order is odd\n                if order % 2 == 1:\n                    # Increment the number of lower-case letters with odd order in the alphabet\n                    odd_order_letters += 1\n        # Return the number of lower-case letters with odd order in the alphabet\n        return odd_order_letters\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 2163,
        "indeed": true
    },
    {
        "number": 126,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    if len(lst) != len(set(lst)):\n        return False\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 3015,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if length > 1 and all(length % i != 0 for i in range(2, length)):\n            return \"YES\"\n    return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 2905,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    prod_sign = 1\n    for sign in signs:\n        prod_sign *= sign\n    sum_mags = sum([abs(x) for x in arr])\n    return sum_mags * prod_sign\n",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 2147,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid. \n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells, \n    in other words, you can go to cells which share an edge with you current \n    cell. Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid. \n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k) \n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j]. \n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through. \n    \n    Examples:\n    \n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n        \n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    # Initialize the dynamic programming matrix\n    n = len(grid)\n    dp = [[[None] * k for _ in range(n)] for _ in range(n)]\n\n    # Fill the dynamic programming matrix\n    for i in range(n):\n        for j in range(n):\n            dp[i][j][0] = [grid[i][j]]\n\n    # Fill the rest of the dynamic programming matrix\n    for kk in range(1, k):\n        for i in range(n):\n            for j in range(n):\n                # Initialize the list to the smallest value in the current cell\n                min_lst = [grid[i][j]]\n\n                # Check the neighboring cells and add their minimum path to the current cell\n                if i > 0:\n                    min_lst = min_lst + dp[i-1][j][kk-1]\n                if j > 0:\n                    min_lst = min_lst + dp[i][j-1][kk-1]\n                if i < n-1:\n                    min_lst = min_lst + dp[i+1][j][kk-1]\n                if j < n-1:\n                    min_lst = min_lst + dp[i][j+1][kk-1]\n\n                # Sort the list and add the current cell's value\n                min_lst.sort()\n                min_lst = min_lst + [grid[i][j]]\n\n                # Store the minimum path\n                dp[i][j][kk] = min_lst\n\n    # Construct the minimum path from the bottom-right cell to the top-left cell\n    min_lst = dp[0][0][k-1]\n    min_lst.sort()\n    return min_lst\n",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 4969,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1, 3, 2]\n    elif n == 1:\n        return [1, 3, 2, 8]\n    else:\n        tribonacci_sequence = [1, 3, 2]\n        for i in range(n - 1):\n            tribonacci_sequence.append(tribonacci_sequence[i] + tribonacci_sequence[i + 1] + tribonacci_sequence[i + 2])\n        return tribonacci_sequence\n",
        "test": "assert tri(0) == [1, 3, 2]",
        "num_ids": 4111,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n        else:\n            return 0\n    return product\n",
        "test": "assert digits(1) == 1",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack and stack[-1] == '[':\n                return True\n    return len(stack) == 0\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squared numbers in the list, \n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    result = 0\n    for num in lst:\n        rounded_num = int(math.ceil(num))\n        result += rounded_num**2\n    return result\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 2609,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    '''\n    \n    if txt == \"\":\n        return False\n    \n    words = txt.split()\n    if not words:\n        return False\n    \n    last_word = words[-1]\n    if len(last_word) == 1 and last_word.isalpha():\n        return True\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
        "num_ids": 2481,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1\n",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 2197,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. If there is no negative or positive integers, return them as None.\n    \n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    # Initialize variables to store the largest negative integer and smallest positive integer\n    largest_neg = None\n    smallest_pos = None\n    \n    # Iterate through the list and find the largest negative integer and smallest positive integer\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        elif num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n    \n    # Return the tuple (a, b) with the largest negative integer and smallest positive integer\n    return (largest_neg, smallest_pos)\n",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 3231,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    def convert_to_float(num):\n        if isinstance(num, str):\n            if ',' in num:\n                num = num.replace(',', '.')\n            return float(num)\n        else:\n            return float(num)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b ",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 2998,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    \n    # check if n is even\n    if n % 2 != 0:\n        return False\n    \n    # check if n can be written as the sum of 4 positive even numbers\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            for j in range(i, n+1):\n                if j % 2 == 0:\n                    for k in range(j, n+1):\n                        if k % 2 == 0:\n                            for l in range(k, n+1):\n                                if l % 2 == 0:\n                                    if i+j+k+l == n:\n                                        return True\n    \n    # if no such combination is found\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 2873,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    special_factorial = 1\n    for i in range(1, n+1):\n        special_factorial *= i\n    return special_factorial\n",
        "test": "assert special_factorial(1) == 1, \"special_factorial(1) should be 1\"",
        "num_ids": 2007,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces, then replace all\n    consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    # Initialize an empty list to store the new text without spaces\n    new_text = []\n\n    # Initialize a variable to keep track of consecutive spaces\n    consecutive_spaces = 0\n\n    # Iterate through each character in the text\n    for char in text:\n        # If the character is a space, increase the consecutive spaces counter\n        if char == ' ':\n            consecutive_spaces += 1\n        # If the character is not a space and there are consecutive spaces,\n        # replace them with underscores or hyphens based on the number of spaces\n        elif consecutive_spaces > 0:\n            if consecutive_spaces == 1:\n                new_text.append('_')\n            elif consecutive_spaces > 1:\n                new_text.append('-' * consecutive_spaces)\n            new_text.append(char)\n            consecutive_spaces = 0\n        # If the character is not a space, append it to the new text without spaces\n        else:\n            new_text.append(char)\n\n    # Convert the list of characters to a string\n    return ''.join(new_text)\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2869,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise. \n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check for more than three digits in the file name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n\n    # Check for the presence of more than one dot in the file name\n    if file_name.count('.') > 1:\n        return 'No'\n\n    # Split the file name into its components\n    components = file_name.split('.')\n    if len(components) != 2:\n        return 'No'\n\n    # Check if the file name starts with a letter\n    if not components[0][0].isalpha():\n        return 'No'\n\n    # Check if the file extension is one of the valid ones\n    if components[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all conditions are met, the file name is considered valid\n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == 'Yes'",
        "num_ids": 4706,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    total = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total += value ** 2\n        elif index % 4 == 0:\n            total += value ** 3\n    \n    return total",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 2818,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Given a string representing a sentence, the sentence contains some words separated by a space,\n    and we have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()  # split the sentence into words\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)  # join the prime words with a space to form the output string\n",
        "test": "assert words_in_sentence(\"lets go for swimming\") == \"go for\", \"Incorrect output for 'lets go for swimming'\"",
        "num_ids": 2208,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    \n    # Convert the string representation of the fractions to floats\n    x_num, x_den = x.split(\"/\")\n    n_num, n_den = n.split(\"/\")\n    x_float = float(x_num) / float(x_den)\n    n_float = float(n_num) / float(n_den)\n    \n    # Check if x * n evaluates to a whole number\n    if int(x_float * n_float) == x_float * n_float:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 2829,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_of_digits(num):\n    return sum(int(digit) for digit in str(abs(num)))\n\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum_of_digits(x), x))",
        "test": "assert order_by_points([]) == []",
        "num_ids": 3128,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            if int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1, \"Error in specialFilter with input [15, -73, 14, -15]\"",
        "num_ids": 1595,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]  # create the array a\n    count = 0  # initialize the count of valid triples to zero\n\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:  # if the sum is a multiple of 3\n                    count += 1  # increment the count of valid triples\n    \n    return count\n",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 2227,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2 are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planet_order or planet2 not in planet_order:\n        return ()\n    index1, index2 = planet_order.index(planet1), planet_order.index(planet2)\n    if index1 == index2:\n        return ()\n    elif index1 < index2:\n        return tuple(planet_order[index1+1:index2])\n    else:\n        return tuple(reversed(planet_order[index2+1:index1]))\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 3998,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule. If two words have the same length,\n    sort the list alphabetically. The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Create a list to store the sorted words\n    sorted_words = []\n\n    # Loop through the list and check if the word has odd length\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_words.append(word)\n\n    # Sort the list by length and then alphabetically if the length is the same\n    sorted_words.sort(key=lambda x: (len(x), x))\n\n    return sorted_words\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 2671,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    # Check if n is prime\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n    \n    # Return x if n is prime, otherwise return y\n    if is_prime:\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 2159,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers. \n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    \n    if not lst:  # check if the list is empty\n        return 0\n    \n    result = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0:  # check if the number is positive and odd\n            result += num**2  # add the square of the number to the result\n    \n    return result\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 3044,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 2875,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions. \n    The extensions are to be used to load additional classes to the class. The \n    strength of the extension is as follows: Let CAP be the number of the uppercase \n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName. \n    If there are two or more extensions with the same strength, you should \n    choose the one that comes first in the list. \n    For example, if you are given \"Slices\" as the class and a list of the \n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should \n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1). \n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    \n    # find the strongest extension name and its strength\n    strongest_extension = ''\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    \n    # return the strongest extension name in the format ClassName.StrongestExtensionName\n    return f'{class_name}.{strongest_extension}'\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 4259,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n\n    if b in a:\n        return True\n\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n\n    return False",
        "test": "assert cycpattern_check(\"abcd\", \"abd\") == False",
        "num_ids": 2626,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1753,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Define the mapping of roman numerals\n    roman_map = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    # Initialize an empty string to store the roman numeral equivalent\n    roman_numeral = ''\n\n    # Loop through the mapping and add the appropriate roman numerals to the string\n    for value, numeral in roman_map.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n\n    return roman_numeral\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 3703,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the sum of the lengths of any two sides equals the length of the third side\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 2533,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_char = set()\n    for word in words:\n        word_char = set(word)\n        if len(word_char) > len(max_char):\n            max_word = word\n            max_char = word_char\n        elif len(word_char) == len(max_char):\n            if word < max_word:\n                max_word = word\n    return max_word",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 2128,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals. \n    You should return an array of [ total number of eaten carrots after your meals,\n                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    0 <= number <= 1000\n    0 <= need <= 1000\n    0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    total_carrots = number + min(remaining, need)\n    remaining_carrots = remaining - min(remaining, need)\n    return [total_carrots, remaining_carrots]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 4258,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = do_algebra(operator, operand)\n    print(result)  # Output: 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(1, len(operator)+1):\n        if operator[i-1] == '+':\n            expression += ' + ' + str(operand[i])\n        elif operator[i-1] == '-':\n            expression += ' - ' + str(operand[i])\n        elif operator[i-1] == '*':\n            expression += ' * ' + str(operand[i])\n        elif operator[i-1] == '//':\n            expression += ' // ' + str(operand[i])\n        elif operator[i-1] == '**':\n            expression += ' ** ' + str(operand[i])\n\n    return eval(expression)\n",
        "test": "assert do_algebra(['+'], [2, 3]) == 5 ",
        "num_ids": 3983,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return result\n",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 2251,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 1684,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def generate_integers(a, b):\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n    \n    # Initialize an empty list to store even numbers\n    even_numbers = []\n    \n    # Use a loop to iterate through all even numbers between a and b\n    i = a\n    while i <= b:\n        # Check if i is even (i % 2 == 0)\n        if i % 2 == 0:\n            # If it is, append it to the list of even numbers\n            even_numbers.append(i)\n        \n        # Move on to the next number\n        i += 1\n    \n    # Return the list of even numbers\n    return even_numbers\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 2667,
        "indeed": false
    }
]