[
    {
        "number": 0,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 2656,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    groups = []\n    current_group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            if not stack:\n                raise ValueError('Unbalanced parentheses')\n            stack.pop()\n            current_group += char\n            if not stack:\n                groups.append(current_group)\n                current_group = ''\n        else:\n            continue\n    \n    if stack:\n        raise ValueError('Unbalanced parentheses')\n    \n    return groups\n",
        "test": "assert separate_paren_groups('()') == ['()']",
        "num_ids": 4084,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    decimal_part = number - int(number)\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1888,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 2251,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum([abs(x - mean) for x in numbers]) / len(numbers)\n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 2995,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 2733,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    result = []\n    level = 0\n    max_level = 0\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            if level > max_level:\n                max_level = level\n        elif char == ')':\n            level -= 1\n            if level == 0:\n                result.append(max_level)\n                max_level = 0\n    return result\n",
        "test": "assert parse_nested_parens('') == []",
        "num_ids": 3742,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 2265,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    if not numbers:\n        return (0, 1)\n\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n\n    return (sum, product)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2603,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        max_list.append(max_so_far)\n    return max_list\n",
        "test": "assert rolling_max([1]) == [1] ",
        "num_ids": 3219,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        i = 1\n        while not is_palindrome(string[:-i] + string[::-1]):\n            i += 1\n        return string[:-i] + string[::-1]\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2693,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert the strings to lists of characters\n    a_list = list(a)\n    b_list = list(b)\n\n    # Perform XOR on the corresponding characters\n    for i in range(len(a_list)):\n        if a_list[i] == b_list[i]:\n            a_list[i] = '0'\n        else:\n            a_list[i] = '1'\n\n    # Convert the list of characters back to a string\n    result = ''.join(a_list)\n\n    return result\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 3007,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str\n",
        "test": "assert longest([]) == None, \"Test case 1 failed\"",
        "num_ids": 2176,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n\n    return a",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 2028,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)+1)]\n",
        "test": "assert all_prefixes('a') == ['a']",
        "num_ids": 1472,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    numbers = [str(i) for i in range(n+1)]\n    return ' '.join(numbers)\n",
        "test": "assert string_sequence(0) == \"0\"",
        "num_ids": 2355,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    \n    # Convert the string to lowercase and remove spaces\n    string = string.lower().replace(' ', '')\n    \n    # Initialize a set to keep track of distinct characters\n    distinct_chars = set()\n    \n    # Iterate over each character in the string\n    for char in string:\n        # If the character is not in the set, add it\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    \n    # Return the length of the set\n    return len(distinct_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3, 'Test case 1 failed'",
        "num_ids": 2250,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_notes = music_string.split()\n    beats = []\n    for note in music_notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n",
        "test": "assert parse_music('') == []",
        "num_ids": 5150,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    count = 0\n    index = 0\n\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 2157,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 38,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = [num_dict[num] for num in numbers.split()]\n    num_list.sort()\n    sorted_nums = [list(num_dict.keys())[num] for num in num_list]\n    return ' '.join(sorted_nums)\n",
        "test": "assert sort_numbers('four four four') == 'four four four'",
        "num_ids": 3294,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    \n    min_distance = float('inf')\n    result = (float('nan'), float('nan'))\n    \n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                result = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    \n    return result\n",
        "test": "assert find_closest_elements([2.0, 2.0, 2.0, 2.0, 2.0, 2.0]) == (2.0, 2.0)",
        "num_ids": 4267,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [0.0 if i == min_num else (i - min_num) / (max_num - min_num) for i in numbers]\n    return rescaled_numbers\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0]) == [0.0, 0.5, 1.0]",
        "num_ids": 4625,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 1823,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def strlen(string: str) -> int:\n    \"\"\"Return length of given string\"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisor = n - 1\n    while True:\n        if n % divisor == 0:\n            return divisor\n        divisor -= 1\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 1686,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    \n    factors = []\n    divisor = 2\n    \n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    \n    return factors",
        "test": "assert factorize(70) == [2, 5, 7]",
        "num_ids": 2960,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    freq_dict = {}\n    for num in numbers:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    output = []\n    for num in numbers:\n        if freq_dict[num] == 1:\n            output.append(num)\n\n    return output\n",
        "test": "assert remove_duplicates([]) == []",
        "num_ids": 2218,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n",
        "test": "assert flip_case('Hello') == 'hELLO', \"Incorrect result for flip_case('Hello')\"",
        "num_ids": 1762,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c']) \n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == '', \"Empty list should return empty string\"",
        "num_ids": 1659,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == [], \"Error: Empty list returned\"",
        "num_ids": 2251,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 2353,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 2311,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial. \n    find_zero find x such that poly(x) = 0. \n    find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients \n    and largest non zero coefficient as it guarantees \n    a solution. \n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n % 2 == 1:\n        return None\n    for i in range(n // 2):\n        if xs[i] != 0:\n            return -xs[i] / xs[n - i - 1]\n    return None\n",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 3925,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    l_copy = l.copy()  # Make a copy of the original list\n    for i in range(len(l_copy)):\n        if i % 3 == 0:\n            l_copy[i] = sorted([l_copy[i], l[i]])[0]\n    return l_copy\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 4192,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1871,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    \n    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 2287,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += str(i).count('7')\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 1624,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 34,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    sorted_list = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    return [x if i % 2 != 0 else sorted_list[i // 2] for i, x in enumerate(l)]\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 3530,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycling in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 3105,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 40,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    is_prime returns True if num is a prime number, otherwise it returns False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef next_fib(a: int, b: int) -> int:\n    \"\"\"\n    next_fib returns the next Fibonacci number starting from a and b.\n    \"\"\"\n    return a+b\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 0\n    a, b = 0, 1\n    while count < n:\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a+b\n    raise ValueError(\"Invalid input.\")\n",
        "test": "assert prime_fib(1) == 2, \"Error in prime_fib(1)\"",
        "num_ids": 2901,
        "indeed": true
    },
    {
        "number": 40,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 3825,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Initialize variables\n    n_collisions = 0\n    distance_left = 1000\n    distance_right = 1000\n\n    # Loop through cars and simulate collisions\n    while distance_left > distance_right:\n        distance_left -= 1\n        distance_right += 1\n        n_collisions += 1\n\n    return n_collisions\n",
        "test": "assert car_race_collision(0) == 0, \"Test 1: Expected 0, but got {}\".format(car_race_collision(0))",
        "num_ids": 3998,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 2874,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 3020,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2614,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and high return area for a triangle.\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(5, 3) == 7.5",
        "num_ids": 1538,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 3284,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    l.sort() # sorting the list in ascending order\n    n = len(l)\n\n    if n % 2 == 0: # if the length of list is even\n        median = (l[n//2 - 1] + l[n//2]) / 2\n    else: # if the length of list is odd\n        median = l[n//2]\n\n    return median\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 2464,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Convert text to lowercase and remove all non-alphanumeric characters\n    text = ''.join(c.lower() for c in text if c.isalnum())\n    # Reverse the text\n    reverse_text = text[::-1]\n    # Check if the reversed text is equal to the original text\n    if reverse_text == text:\n        return True\n    else:\n        return False ",
        "test": "assert is_palindrome('') == True, \"Test 1 failed\"",
        "num_ids": 1774,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p ",
        "test": "assert modp(0, 101) == 1",
        "num_ids": 2233,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"  # Should return True since decode_shift should be able to decode the encoded string \"hello\" correctly.",
        "num_ids": 2119,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in text if char not in vowels)",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1740,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1740,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 1230,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert the words to sets to remove duplicates and sort them\n    s0_set = set(s0)\n    s1_set = set(s1)\n    \n    # Check if the sorted sets are equal\n    return sorted(s0_set) == sorted(s1_set)\n",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 1913,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(2) == 1",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"<\") == False  # should return False",
        "num_ids": 2223,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 38,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    n = len(l)\n    if n < 2:\n        return True  # a list with 1 or fewer elements is always monotonic\n    diff = l[1] - l[0]\n    if diff == 0:\n        return True  # a list with all equal elements is monotonic\n    for i in range(2, n):\n        d = l[i] - l[i-1]\n        if d * diff <= 0:\n            return False  # difference changed sign or became zero\n    return True\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 2878,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def common(l1, l2):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert lists to sets for faster lookup\n    set1 = set(l1)\n    set2 = set(l2)\n    # Find common elements and sort them\n    result = sorted(set1 & set2)\n    return result\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2770,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    \n    # Initialize the largest prime factor to 1\n    largest_factor = 1\n    \n    # Check if n is divisible by 2\n    while n % 2 == 0:\n        # If n is divisible by 2, update the largest factor and divide n by 2\n        largest_factor = 2\n        n //= 2\n        \n    # Check odd numbers up to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            # If n is divisible by i, update the largest factor and divide n by i\n            largest_factor = i\n            n //= i\n            \n    # If n is still greater than 2, it must be prime\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n",
        "test": "assert largest_prime_factor(2048) == 2, \"Test 2 failed\"",
        "num_ids": 3077,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n",
        "test": "assert sum_to_n(30) == 465, \"sum_to_n(30) should return 465\"",
        "num_ids": 2049,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 2436,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    result = [0] * (n-1)\n    for i in range(1, n):\n        result[i-1] = xs[i] * i\n    return result\n",
        "test": "assert derivative([]) == []",
        "num_ids": 2695,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1) # should return 0\n    0\n    >>> fibfib(5) # should return 4\n    4\n    >>> fibfib(8) # should return 24\n    24\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 2893,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 2673,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    \"\"\"\n\n    # Convert the integer to a string\n    x = str(x)\n\n    # If shift is greater than the number of digits in x, return the reversed digits\n    if shift > len(x):\n        return x[::-1]\n\n    # Otherwise, shift the digits to the right by shift\n    shifted_x = x[-shift:] + x[:-shift]\n\n    # Convert the shifted digits back to a string\n    return str(int(shifted_x))\n",
        "test": "assert circular_shift(1234, 2) == \"3412\"",
        "num_ids": 2847,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digitSum(s):\n    \"\"\"\n    Task:\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    upper_sum = 0\n    for char in s:\n        if char.isupper():\n            upper_sum += ord(char)\n    return upper_sum",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 2234,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def fruit_distribution(s, n):\n    # Split the string into two parts: the number of apples and the number of oranges\n    parts = s.split()\n    num_apples = int(parts[0])\n    num_oranges = int(parts[2])\n    \n    # Calculate the total number of fruits in the basket\n    total_fruits = num_apples + num_oranges\n    \n    # Calculate the number of mango fruits in the basket\n    num_mango = n - total_fruits\n    \n    return num_mango\n",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19 ",
        "num_ids": 3229,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                            so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        1 <= nodes.length <= 10000\n        0 <= node.value\n    \"\"\"\n\n    if len(arr) == 0:\n        return []\n\n    min_value = min(arr)\n    min_index = arr.index(min_value)\n\n    if min_value % 2 == 0:\n        return [min_value, min_index]\n    else:\n        for i in range(min_index + 1, len(arr)):\n            if arr[i] % 2 == 0:\n                return [arr[i], i]\n        return []",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 3346,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def search(lst):\n    # Initialize variables to keep track of the greatest integer and its frequency\n    greatest_int = -1\n    greatest_int_count = 0\n    \n    # Loop through the list of integers\n    for i in range(len(lst)):\n        # If the current integer is greater than 0 and has a frequency greater than or equal to its value\n        if lst[i] > 0 and lst.count(lst[i]) >= lst[i]:\n            # Update the greatest integer and its frequency if the current integer is greater\n            if lst[i] > greatest_int:\n                greatest_int = lst[i]\n                greatest_int_count = 1\n            # If the current integer is equal to the greatest integer, increase its frequency\n            elif lst[i] == greatest_int:\n                greatest_int_count += 1\n    \n    # Return the greatest integer if it exists, otherwise return -1\n    if greatest_int != -1:\n        return greatest_int\n    else:\n        return -1\n",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 3395,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) < 2:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst.remove(min_val)\n        lst.remove(max_val)\n        return [min_val, max_val] + strange_sort_list(lst)\n",
        "test": "assert strange_sort_list([]) == []",
        "num_ids": 3538,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a+b > c and a+c > b and b+c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s-a) * (s-b) * (s-c)) ** 0.5\n        # Round the area to 2 decimal points\n        area = round(area, 2)\n        return area\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 3041,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def will_it_fly(q, w):\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False ",
        "test": "assert will_it_fly([3, 2, 3], 1) == False",
        "num_ids": 2346,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 31,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def smallest_change(arr):\n    n = len(arr)\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left, right = 0, n-1\n    # Initialize two variables to count the number of changes required\n    change_count = 0\n    \n    # Traverse the array until the two pointers meet in the middle\n    while left < right:\n        # If the current elements are equal, move both pointers\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        # If the current elements are not equal, check if the element at the left pointer is equal to any of the elements in the right half of the array\n        elif arr[left] in arr[right+1:]:\n            # If it is, move the left pointer to the next element\n            left += 1\n        # If the current element at the right pointer is not present in the left half of the array, we need to change it to make the array palindromic\n        else:\n            # We need to change the element at the right pointer to the element at the left pointer to make the array palindromic\n            change_count += 1\n            # Move both pointers to the next elements\n            left += 1\n            right -= 1\n            \n    return change_count\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4  # Example 1",
        "num_ids": 4043,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    if not lst1 or not lst2:\n        return []\n    \n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n\n    if total1 == total2:\n        return lst1\n    elif total1 < total2:\n        return lst1\n    else:\n        return lst2 ",
        "test": "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
        "num_ids": 3498,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\"\"\"\n    if a > 99:\n        return False\n    if a == 2 or a == 3:\n        return True\n    primes = []\n    for i in range(2, a // 2 + 1):\n        if is_prime(i):\n            primes.append(i)\n    if len(primes) < 3:\n        return False\n    for i in range(len(primes) - 2):\n        for j in range(i + 1, len(primes) - 1):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n",
        "test": "assert is_multiply_prime(24) == False",
        "num_ids": 3317,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int(log(x, n)) = x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    import math\n    if n == 1 or x == 1:\n        return True\n    power = int(math.log(x, n))\n    return n ** power == x",
        "test": "assert is_simple_power(3, 2) == False",
        "num_ids": 2323,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Check if the input is negative\n    if a < 0:\n        a = -a\n    # Check if the cube root of the input is an integer\n    return (round(a**(1/3))**3 == a)\n",
        "test": "assert iscube(1) == True",
        "num_ids": 2244,
        "indeed": true
    },
    {
        "number": 78,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,... \n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13). \n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase. \n    Examples: \n    For num = \"AB\" the output should be 1. \n    For num = \"1077E\" the output should be 2. \n    For num = \"ABED1A33\" the output should be 4. \n    For num = \"123456789ABCDEF0\" the output should be 6. \n    For num = \"2020\" the output should be 2. \n    \"\"\"\n\n    # Initialize a dictionary to store the counts of each digit\n    digit_count = {\n        '2': 0,\n        '3': 0,\n        '5': 0,\n        '7': 0,\n        'B': 0,\n        'D': 0\n    }\n\n    # Check for each character in the input string\n    for char in num:\n        # Convert the hexadecimal character to decimal\n        decimal = int(char, 16)\n\n        # If the decimal is prime, increment the count for that digit\n        if decimal in [2, 3, 5, 7, 11, 13]:\n            if char == '2':\n                digit_count['2'] += 1\n            elif char == '3':\n                digit_count['3'] += 1\n            elif char == '5':\n                digit_count['5'] += 1\n            elif char == '7':\n                digit_count['7'] += 1\n            elif char == 'B':\n                digit_count['B'] += 1\n            elif char == 'D':\n                digit_count['D'] += 1\n\n    # Return the total count of prime digits\n    return sum(digit_count.values())\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 5637,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 35,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string. \n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary_string = bin(decimal)[2:]\n    return 'db' + binary_string + 'db'\n",
        "test": "assert decimal_to_binary(255) == \"db11111111db\"",
        "num_ids": 2967,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n\n    return True\n",
        "test": "assert is_happy(\"abcd\") == True",
        "num_ids": 2464,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def numerical_letter_grade(grades):\n    letter_grades = []\n    \n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0]) == ['A+']",
        "num_ids": 6520,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"\n    # Get the length of the string\n    length = len(string)\n    \n    # Check if the length is less than 2\n    if length < 2:\n        return False\n    \n    # Check if the length is 2\n    if length == 2:\n        return True\n    \n    # Check if the length is divisible by 2\n    if length % 2 == 0:\n        return False\n    \n    # Check if the length is divisible by any odd number between 3 and sqrt(length)\n    for i in range(3, int(length ** 0.5) + 1, 2):\n        if length % i == 0:\n            return False\n    \n    # If the length is not divisible by any number, it is a prime number\n    return True\n",
        "test": "assert prime_length('Hello') == True  # Test case 1",
        "num_ids": 1990,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 390,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(4) == 9000 # there are 9000 4-digit numbers that start or end with 1",
        "num_ids": 5146,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 30,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def solve(N):\n    \"\"\"\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    # Convert the integer N to a string of digits\n    digits_str = str(N)\n    # Initialize the sum of digits to 0\n    digit_sum = 0\n    # Loop through each digit in the string\n    for digit in digits_str:\n        # Convert the digit to an integer and add it to the sum of digits\n        digit_sum += int(digit)\n    # Convert the sum of digits to binary and return it as a string\n    return format(digit_sum, 'b')\n",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 2846,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):  # iterate over odd indices\n        if lst[i] % 2 == 0:  # check if the element at that index is even\n            result += lst[i]\n    return result\n",
        "test": "assert add([4, 2, 6, 7]) == 2  # Test case 1",
        "num_ids": 2139,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        if word == '':\n            result.append('')\n        else:\n            ordered_word = ''.join(sorted(word))\n            result.append(ordered_word)\n\n    return ' '.join(result) ",
        "test": "assert anti_shuffle(\"Hi\") == \"Hi\"",
        "num_ids": 3463,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates ",
        "test": "assert get_row([], 1) == []",
        "num_ids": 4125,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting, \n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd, \n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \n    Note:\n    * don't change the given array.\n    \n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    \n    first_element = array[0]\n    last_element = array[-1]\n    \n    if (first_element + last_element) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 4193,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 40,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places. For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    \n    # Define the alphabet to be rotated\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize the encrypted string\n    encrypted = ''\n    \n    # Loop through each character in the input string\n    for char in s:\n        # If the character is a letter, shift it down by two places in the alphabet\n        if char.isalpha():\n            char = chr(((alphabet.index(char.lower()) + 2 * 2) % 26) + 97)\n        # If the character is not a letter, leave it as is\n        encrypted += char\n    \n    return encrypted\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 3566,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    lst = sorted(set(lst))  # remove duplicates and sort\n    min_val = lst[0]\n    lst.remove(min_val)\n    \n    if len(lst) == 0:\n        return None\n    \n    return lst[0]\n",
        "test": "assert next_smallest([]) == None, \"Test 3 failed\"",
        "num_ids": 2466,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for sentence in S.split(\".\"):\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 2873,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    return False\n",
        "test": "assert any_int(3, 2, 2) == False",
        "num_ids": 2690,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr((ord(char) + 2 - 65) % 26 + 65)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n",
        "test": "assert encode('') == ''",
        "num_ids": 3443,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    max_prime = max(num for num in lst if is_prime(num))\n    return sum_of_digits(max_prime) ",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 6820,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False. \n    The function should return False is the given dictionary is empty. \n    Examples: \n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True. \n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False. \n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False. \n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False. \n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    \n    all_keys_lower = True\n    all_keys_upper = True\n    \n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            all_keys_upper = False\n        elif key.isupper():\n            all_keys_lower = False\n        else:\n            return False\n    \n    if all_keys_lower or all_keys_upper:\n        return True\n    else:\n        return False\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True, \"Incorrect output for the given dictionary\"",
        "num_ids": 3718,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n < 2:\n        return []\n    \n    primes = [2]\n    num = 3\n    \n    while num < n:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    \n    return primes\n",
        "test": "assert count_up_to(0) == [], \"Incorrect output for count_up_to(0)\"",
        "num_ids": 2831,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits. Assumes the input is always valid.\n    \"\"\"\n    # Convert the integers to strings and extract the last digit\n    a_last_digit = int(str(a)[-1])\n    b_last_digit = int(str(b)[-1])\n    \n    # Multiply the last digits\n    product = a_last_digit * b_last_digit\n    \n    return product",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 2571,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and s[i] in 'AEIOU' and i % 2 == 0:\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 1554,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero. \n    \n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    \n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Convert the input value to float\n    value = float(value)\n    # Round the value to the nearest integer\n    rounded = round(value)\n    # Calculate the difference between the rounded value and the input value\n    diff = abs(rounded - value)\n    # Check if the difference is the minimum distance from zero\n    if diff == 0.5:\n        # If the difference is 0.5, round away from zero\n        if value > 0:\n            return rounded + 1\n        else:\n            return rounded - 1\n    else:\n        # If the difference is not 0.5, return the rounded value\n        return rounded\n",
        "test": "assert closest_integer(\"10\") == 10, \"Function does not return the correct integer for 10\"",
        "num_ids": 3158,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile\n",
        "test": "assert make_a_pile(1) == [1], \"Test 1 failed\"",
        "num_ids": 3338,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string using either spaces or commas as separators\n    words = s.split(\", \")\n    # If the string contains only one word, the split function returns a list with only one element\n    if len(words) == 1:\n        # Split using only spaces if the original string contained only one word\n        words = s.split()\n    return words\n",
        "test": "assert words_string(\"One two three four five six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 2915,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_num = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_num:\n            max_num = i\n    return max_num\n",
        "test": "assert choose_num(12, 12) == 12",
        "num_ids": 2616,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_rep = bin(rounded_avg)[2:]\n    return \"0b\" + binary_rep\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 2853,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x, return a sorted list of all elements\n    that hasn't any even digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    # Define a function to check if a number has an even digit\n    def has_even_digit(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return True\n        return False\n    \n    # Filter out numbers with even digits and sort the result\n    result = sorted(filter(lambda num: not has_even_digit(num), x))\n    return result\n",
        "test": "assert unique_digits([]) == []",
        "num_ids": 3483,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Check if the array is empty\n    if not arr:\n        return []\n\n    # Filter the array to only include integers between 1 and 9\n    arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the array\n    arr.sort()\n\n    # Reverse the array\n    arr.reverse()\n\n    # Replace each integer by its corresponding name\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [names[num-1] for num in arr]\n\n    return result\n",
        "test": "assert by_length([]) == []  # Empty array",
        "num_ids": 4941,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result",
        "test": "assert f(1) == [1]",
        "num_ids": 2658,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 3524,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(map(int, str(abs(num)))) > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1737,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                        be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                        array by performing any number of right shift operations.\n                        \n    \"\"\"\n    if not arr:\n        return True\n\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n\n    return True\n",
        "test": "assert move_one_ball([5, 3, 1]) == False",
        "num_ids": 4909,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 28,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers. \n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    even_lst1 = [x for x in lst1 if x % 2 == 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    # If both lists contain even numbers, return \"NO\"\n    if len(even_lst1) == 0 or len(even_lst2) == 0:\n        return \"NO\"\n    # If all the elements of lst1 are even, return \"YES\"\n    elif len(even_lst1) == len(lst1):\n        return \"YES\"\n    else:\n        # If lst1 has more even numbers than lst2, return \"NO\"\n        if len(even_lst1) > len(even_lst2):\n            return \"NO\"\n        # Otherwise, perform the exchange of elements\n        else:\n            while len(even_lst1) > len(even_lst2):\n                lst1.append(lst2.pop())\n                even_lst1 = [x for x in lst1 if x % 2 == 0]\n                even_lst2 = [x for x in lst2 if x % 2 == 0]\n            return \"YES\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 5521,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    \n    # split the input string into a list of lowercase letters\n    letters = test.split()\n    \n    # initialize an empty dictionary to store the count of each letter\n    count_dict = {}\n    \n    # loop through each letter in the list and update the count in the dictionary\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    \n    # find the maximum count and return the corresponding dictionary\n    max_count = max(count_dict.values())\n    result = {key: value for key, value in count_dict.items() if value == max_count}\n    \n    return result\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 4384,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Delete all characters in s that are equal to any character in c\n    for char in c:\n        s = s.replace(char, '')\n    # Check if the result string is palindrome\n    palindrome = True\n    for i in range(len(s) // 2):\n        if s[i] != s[-i-1]:\n            palindrome = False\n            break\n    return (s, palindrome)\n",
        "test": "assert reverse_delete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)",
        "num_ids": 2998,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \n    >>> odd_count(['1234567'])  \n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])  \n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",  \n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    result = []\n\n    for string in lst:\n        odd_count = sum(1 for i in string if int(i) % 2 != 0)\n        result.append(\"the number of odd elements {0}n the str{0}ng {0} of the {0}nput.\".format(odd_count))\n\n    return result\n",
        "test": "assert odd_count([]) == []",
        "num_ids": 4474,
        "indeed": true
    },
    {
        "number": 114,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = sum(nums[i:])\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = sum(nums[:i+1])\n        min_sum = min(min_sum, curr_sum)\n    return min_sum\n",
        "test": "assert minSubArraySum([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 2914,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 33,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    # Initialize variables\n    rows = len(grid)\n    cols = len(grid[0])\n    buckets = 0\n    bucket_capacity = capacity\n    total_water = 0\n\n    # Iterate through the grid\n    for i in range(rows):\n        for j in range(cols):\n            # If there is water, add to total water and check if the bucket is full\n            if grid[i][j] == 1:\n                total_water += 1\n                if total_water >= bucket_capacity:\n                    total_water = 0\n                    buckets += 1\n\n    # Check if there are any remaining water units\n    if total_water > 0:\n        buckets += 1\n\n    # Return the number of buckets needed\n    return buckets\n",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
        "num_ids": 4459,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(num):\n        count = 0\n        while num > 0:\n            if num & 1 == 1:\n                count += 1\n            num >>= 1\n        return count\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))",
        "test": "assert sort_array([]) == []  # Empty array should be sorted as is",
        "num_ids": 4802,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s. \n    If the string s is empty then the function should return an empty list. \n    Note: you may assume the input string contains only letters and spaces. \n    Examples: \n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"] \n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] \n    select_words(\"simple white space\", 2) ==> [] \n    select_words(\"Hello world\", 4) ==> [\"world\"] \n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Define a function to check if a character is a consonant\n    def is_consonant(char):\n        return char.lower() not in \"aeiou\"\n    \n    # Split the string into words and create a list of words\n    words = s.split()\n    \n    # Create an empty list to store the selected words\n    selected_words = []\n    \n    # Iterate through the list of words and append words with exactly n consonants to the selected_words list\n    for word in words:\n        if sum(1 for char in word if is_consonant(char)) == n:\n            selected_words.append(word)\n    \n    # Return the list of selected words\n    return selected_words\n",
        "test": "assert select_words(\"simple white space\", 2) == []",
        "num_ids": 4153,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.  \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = \"AEIOUaeiou\"\n    if len(word) < 3:\n        return \"\"\n    \n    for i in range(len(word)-2, -1, -1):\n        if word[i] not in vowels:\n            if word[i+1] in vowels and word[i+2] not in vowels:\n                return word[i+1]\n    \n    return \"\"\n",
        "test": "assert get_closest_vowel(\"ab\") == \"\"",
        "num_ids": 3019,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def match_parens(lst):\n    s1 = lst[0]\n    s2 = lst[1]\n\n    # check if s1 and s2 are balanced\n    stack = []\n    for char in s1 + s2:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return 'No'\n\n    # check if concatenating s1 and s2 results in a balanced string\n    stack = []\n    for char in s1 + s2:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return 'No'\n\n    return 'Yes'\n",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 2878,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import heapq\n\ndef maximum(arr, k):\n    heap = []\n    for num in arr:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            heapq.heappushpop(heap, num)\n    return sorted(heap)",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 3662,
        "indeed": true
    },
    {
        "number": 121,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    total = 0\n    \n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n            \n    return total\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 2425,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    count = 0\n    total = 0\n\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return total\n",
        "test": "assert add_elements([0, 0, 0, 0, 0], 5) == 0, \"Error in add_elements for input [0, 0, 0, 0, 0] and k=5\"",
        "num_ids": 2981,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    def collatz_sequence(num):\n        \"\"\"\n        Return the collatz sequence for a given number.\n        \"\"\"\n        sequence = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            sequence.append(num)\n        return sequence\n\n    def odd_numbers(sequence):\n        \"\"\"\n        Return a list of odd numbers in the collatz sequence.\n        \"\"\"\n        return [x for x in sequence if x % 2 != 0]\n\n    # Get the collatz sequence\n    sequence = collatz_sequence(n)\n\n    # Get the odd numbers in the sequence\n    odd_list = odd_numbers(sequence)\n\n    # Return the sorted list of odd numbers\n    return sorted(odd_list)",
        "test": "assert get_odd_collatz(2) == [1]",
        "num_ids": 4621,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    import re\n\n    # Check if the date string is not empty\n    if date == '':\n        return False\n\n    # Check if the date is in the format of mm-dd-yyyy\n    if not re.match(r'^[0-9]{2}-[0-9]{2}-[0-9]{4}$', date):\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid (1-12)\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid (1-31 for months 1,3,5,7,8,10,12; 1-30 for months 4,6,9,11; 1-29 for month 2)\n    if (month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31) or \\\n       (month in [4, 6, 9, 11] and day < 1 or day > 30) or \\\n       (month == 2 and day < 1 or day > 29):\n        return False\n\n    # Check if the year is a valid year (not less than 1000)\n    if year < 1000:\n        return False\n\n    return True\n",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 5700,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def split_words(txt):\n    # Remove leading and trailing whitespace\n    txt = txt.strip()\n    \n    # Check for whitespace or commas\n    if ' ' in txt:\n        # Split on whitespace and return list\n        return txt.split()\n    elif ',' in txt:\n        # Split on commas and return list\n        return txt.split(',')\n    else:\n        # Count lower-case letters with odd order in alphabet\n        count = 0\n        for char in txt.lower():\n            if ord(char) % 2 == 1:\n                count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"], \"Test 1 failed\"",
        "num_ids": 2155,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # Check for duplicates\n    if len(set(lst)) != len(lst):\n        return False\n\n    # Check if sorted\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True ",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 4180,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    if interval1[1] < interval2[0] or interval1[0] > interval2[1]:\n        return \"NO\"\n\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    if intersection_length < 2:\n        return \"NO\"\n\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    for i in range(2, intersection_length):\n        if i in prime_numbers:\n            return \"YES\"\n\n    return \"NO\"\n",
        "test": "assert intersection((-3, -1), (-5, 5)) == \"YES\" ",
        "num_ids": 2943,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >> prod_signs([1, 2, 2, -4]) == -9\n    >> prod_signs([0, 1]) == 0\n    >> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    sign_prod = 1\n    mag_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_prod *= 1\n        elif num < 0:\n            sign_prod *= -1\n        else:\n            sign_prod *= 0\n        mag_sum += abs(num)\n    return mag_sum * sign_prod\n",
        "test": "assert prod_signs([0, 1]) == 0",
        "num_ids": 2451,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def minPath(grid, k):\n    def is_valid(x, y):\n        return 0 <= x < len(grid) and 0 <= y < len(grid[0])\n\n    def find_min_path(x, y, k):\n        if k == 0:\n            return []\n        if k == 1:\n            return [grid[x][y]]\n\n        min_path = float('inf')\n        min_values = []\n\n        for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny):\n                if k > 2 and grid[x][y] == grid[nx][ny]:\n                    continue\n                new_path = find_min_path(nx, ny, k - 1)\n                if new_path:\n                    new_path.append(grid[x][y])\n                    new_path_sum = sum(new_path)\n                    if new_path_sum < min_path:\n                        min_path = new_path_sum\n                        min_values = new_path\n\n        return min_values\n\n    return find_min_path(0, 0, k)\n",
        "test": "assert minPath([ [1,2,3], [4,5,6], [7,8,9]], 1) == [1]",
        "num_ids": 4831,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    sequence = [1, 3, 2, 8]\n    if n < 4:\n        return sequence[:n + 1]\n    for i in range(4, n + 1):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + i / 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    return sequence\n\n\nprint(tri(3)) ",
        "test": "assert tri(3) == [1, 3, 2, 8] ",
        "num_ids": 4308,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def digits(n):\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        n //= 10\n        \n        if digit % 2 == 1:  # odd digit\n            product *= digit\n            has_odd = True\n        else:  # even digit\n            if has_odd:\n                break  # product can't be 0, so no need to continue\n    \n    return product if has_odd else 0\n",
        "test": "assert digits(235) == 15",
        "num_ids": 1833,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_nested(string):\n    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n        if len(stack) > 0 and i == ']' and stack[-1] == '[':\n            stack.pop()\n            stack.append(i)\n            return True\n    return False",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 2350,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    total_sum = 0\n    for num in lst:\n        rounded_num = int(math.ceil(num))\n        total_sum += rounded_num ** 2\n    return total_sum\n",
        "test": "assert sum_squares([1, 2, 3]) == 14",
        "num_ids": 3160,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:  # If the string is empty\n        return False\n    elif txt[-1].isalpha() and txt[-2].isspace():  # If the last character is an alphabetical character and is not part of a word\n        return True\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False ",
        "num_ids": 2901,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def can_arrange(arr):\n    \"\"\"\n    Returns the largest index of an element which is not greater than or equal\n    to the element immediately preceding it. If no such element exists then return -1.\n    The given array will not contain duplicate values.\n\n    Args:\n    arr: A list of integers\n\n    Returns:\n    int: The largest index of an element that can be arranged, or -1 if no such\n    element exists.\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 2325,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. If there is no negative or positive integers, return them as None.\n    \n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    negative_integers = []\n    positive_integers = []\n    \n    for i in lst:\n        if i < 0:\n            negative_integers.append(i)\n        elif i > 0:\n            positive_integers.append(i)\n    \n    if not negative_integers and not positive_integers:\n        return None, None\n    \n    if negative_integers:\n        a = max(negative_integers)\n    else:\n        a = None\n        \n    if positive_integers:\n        b = min(positive_integers)\n    else:\n        b = None\n    \n    return a, b ",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 3727,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        try:\n            a = float(a.replace(',', '.'))\n            b = float(b.replace(',', '.'))\n            return compare_one(a, b)\n        except ValueError:\n            return None\n    else:\n        return None\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 3519,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Check if n is even\n    if n % 2 != 0:\n        return False\n    # Check if n is less than or equal to 24\n    if n > 24:\n        return False\n    # Check if n is divisible by 4\n    if n % 4 != 0:\n        return False\n    # Check if n can be written as the sum of exactly 4 even numbers\n    for i in range(2, int(n/2)+1):\n        for j in range(2, int(n/2)+1):\n            for k in range(2, int(n/2)+1):\n                for l in range(2, int(n/2)+1):\n                    if i+j+k+l == n:\n                        return True\n    return False",
        "test": "assert is_equal_to_sum_even(10) == False",
        "num_ids": 2795,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(n, 0, -1):\n        factorial *= i\n    return factorial\n",
        "test": "assert special_factorial(1) == 1, \"special_factorial(1) should return 1\"",
        "num_ids": 2296,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    \n    result = \"\"\n    count_spaces = 0\n    \n    for char in text:\n        if char == \" \":\n            count_spaces += 1\n            if count_spaces == 1:\n                result += \"_\"\n            elif count_spaces == 2:\n                result += \"_\"\n            elif count_spaces > 2:\n                result += \"-\"\n        else:\n            count_spaces = 0\n            result += char\n    \n    return result\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2666,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise. \n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check for more than three digits in the file name\n    if file_name.count('0123456789') > 3:\n        return 'No'\n\n    # Check for exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Check if the substring before the dot is not empty and starts with a latin alphabet letter\n    prefix, suffix = file_name.split('.')\n    if len(prefix) == 0 or prefix[0].isdigit():\n        return 'No'\n    if prefix[0].isalpha() is False:\n        return 'No'\n\n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if suffix not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all conditions are met, return 'Yes'\n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.jpg\") == \"No\"",
        "num_ids": 5056,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    total = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n            \n    return total\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 3377,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Main function to solve the problem.\n    \"\"\"\n    # Split the sentence into a list of words.\n    words = sentence.split()\n    # Initialize an empty list to store the words that have prime lengths.\n    result = []\n    # Loop over the words and check if their lengths are prime.\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    # Join the words in the result list into a single string and return it.\n    return \" \".join(result)\n",
        "test": "assert words_in_sentence(\"\") == \"\"",
        "num_ids": 2386,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    # Convert the input fractions to integers\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n\n    # Multiply x and n\n    num = num_x * num_n\n    den = den_x * den_n\n\n    # Check if the result is a whole number\n    if den == 0 or num % den == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"10/5\", \"5/2\") == True",
        "num_ids": 3424,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >> order_by_points([]) == []\n    \"\"\"\n\n    # Define a helper function to calculate the sum of digits of a number\n    def sum_of_digits(num):\n        total = 0\n        while num > 0:\n            total += num % 10\n            num //= 10\n        return total\n\n    # Use a list comprehension to create a new list of tuples, where each tuple contains the number and its sum of digits\n    nums_and_points = [(num, sum_of_digits(num)) for num in nums]\n\n    # Use the sorted() function with a key argument to sort the list based on the sum of digits\n    sorted_nums = sorted(nums_and_points, key=lambda x: (x[1], nums.index(x[0])))\n\n    # Extract the sorted numbers from the sorted list of tuples\n    return [num[0] for num in sorted_nums]\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 4022,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(abs(num))[0])\n            last_digit = int(str(abs(num))[-1])\n            if first_digit % 2 == 1 and last_digit % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 1994,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    valid_triples = []\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    valid_triples.append((a[i], a[j], a[k]))\n    return len(valid_triples) ",
        "test": "assert get_max_triples(5) == 1 ",
        "num_ids": 2056,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        return tuple(planets[index2+1:index1])\n    else:\n        return tuple(planets[index1+1:index2])\n",
        "test": "assert bf(\"Saturn\", \"Jupiter\") == ()  # Saturn and Jupiter are not adjacent orbits",
        "num_ids": 3408,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\"\"\"\n\n    odd_length_words = [word for word in lst if len(word) % 2 == 1]\n    clean_lst = [word for word in lst if word not in odd_length_words]\n    sorted_lst = sorted(clean_lst, key=lambda x: (len(x), x))\n    return sorted_lst ",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 3873,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Checks whether a number is prime or not\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34, \"Function should return 34 for prime number\"",
        "num_ids": 2664,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    \n    if not lst:\n        return 0\n    \n    sum = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            sum += num ** 2\n    \n    return sum\n",
        "test": "assert double_the_difference([0]) == 0, \"double_the_difference([0]) should be 0\"",
        "num_ids": 3032,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n    compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) -> [0, 0, 0, 0, 3, 3]\n    compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) -> [4, 4, 1, 0, 0, 6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 2785,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def calculate_strength(extension):\n        uppercase_letters = sum(1 for c in extension if c.isupper())\n        lowercase_letters = sum(1 for c in extension if c.islower())\n        strength = uppercase_letters - lowercase_letters\n        return strength\n\n    strengths = {}\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength not in strengths:\n            strengths[strength] = extension\n\n    strongest_extension = strengths[max(strengths.keys())]\n    return f\"{class_name}.{strongest_extension}\" ",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 4612,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    # Check if b is a substring of a\n    if b in a:\n        return True\n\n    # Check if any rotation of b is a substring of a\n    b_rotations = [b[i:] + b[:i] for i in range(len(b))]\n    if any(rotation in a for rotation in b_rotations):\n        return True\n\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\", \"abd\") == False",
        "num_ids": 2778,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if digit == '0':\n            even += 1\n        elif digit == '1' or digit == '3' or digit == '5' or digit == '7' or digit == '9':\n            odd += 1\n        elif digit == '2' or digit == '4' or digit == '6' or digit == '8':\n            even += 1\n        else:\n            return None\n    return even, odd\n",
        "test": "assert even_odd_count(7) == (0, 1)",
        "num_ids": 2142,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_number = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_number += numeral\n            number -= value\n\n    return roman_number.lower()\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 3734,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the lengths are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(c, int)) or not (a > 0 and b > 0 and c > 0):\n        return False\n\n    # Check if the hypotenuse length is an integer\n    hypotenuse_square = a**2 + b**2\n    if c**2 == hypotenuse_square:\n        return True\n    else:\n        return False",
        "test": "assert right_angle_triangle(7, 8, 10) == False",
        "num_ids": 2964,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_unique = 0\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique or (len(unique_chars) == max_unique and word < max_word):\n            max_word = word\n            max_unique = len(unique_chars)\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 2495,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    You should return an array of [ total number of eaten carrots after your meals,\n                        the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    0 <= number <= 1000\n    0 <= need <= 1000\n    0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n",
        "test": "assert eat(2, 11, 5) == [7, 0] ",
        "num_ids": 4006,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            expression += ' + ' + str(operand[i+1])\n        elif operator[i] == '-':\n            expression += ' - ' + str(operand[i+1])\n        elif operator[i] == '*':\n            expression += ' * ' + str(operand[i+1])\n        elif operator[i] == '//':\n            expression += ' // ' + str(operand[i+1])\n        elif operator[i] == '**':\n            expression += ' ** ' + str(operand[i+1])\n    return eval(expression)\n",
        "test": "assert do_algebra(['+'], [2, 3]) == 5",
        "num_ids": 4156,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s. If s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is. If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result\n",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 2748,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        hash_object = hashlib.md5(text.encode())\n        return hash_object.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62', \"Incorrect md5 hash for 'Hello world'\"",
        "num_ids": 2717,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    if a > b:\n        a, b = b, a  # swap the values if a > b\n\n    even_digits = []\n    for digit in range(a, b + 1):\n        if digit % 2 == 0:\n            even_digits.append(digit)\n\n    return even_digits\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 2997,
        "indeed": false
    }
]