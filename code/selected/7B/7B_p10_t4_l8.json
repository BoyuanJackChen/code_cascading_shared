[
    {
        "number": 0,
        "max_answer_num": 33,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False, \"Incorrect result for test case 1\"",
        "num_ids": 2822,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those. \n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    curr_group = \"\"\n    stack = []\n    \n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            curr_group += char\n        elif char == \")\":\n            if not stack:\n                raise ValueError(\"Unbalanced parentheses\")\n            stack.pop()\n            curr_group += char\n            if not stack:\n                groups.append(curr_group)\n                curr_group = \"\"\n    if stack:\n        raise ValueError(\"Unbalanced parentheses\")\n    return groups\n",
        "test": "assert separate_paren_groups('') == [] ",
        "num_ids": 4801,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    decimal_part = number - int(number)\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1893,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False ",
        "num_ids": 2026,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    mean = sum(numbers) / len(numbers)\n    mad = sum([abs(x - mean) for x in numbers]) / len(numbers)\n    return mad",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 2719,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [n for i in range(len(numbers)) for n in [numbers[i], delimeter]][:-1]\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 2753,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 22,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses. \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Split the input string into a list of groups\n    groups = paren_string.split()\n    \n    # Iterate over each group\n    for group in groups:\n        # Initialize a variable to keep track of the deepest level of nesting\n        deepest_level = 0\n        \n        # Initialize a variable to keep track of the current level of nesting\n        current_level = 0\n        \n        # Iterate over each character in the group\n        for char in group:\n            # If the character is a left parenthesis, increment the current level of nesting\n            if char == '(':\n                current_level += 1\n            # If the character is a right parenthesis, decrement the current level of nesting\n            elif char == ')':\n                current_level -= 1\n            \n            # If the current level of nesting is greater than the deepest level of nesting, update the deepest level\n            if current_level > deepest_level:\n                deepest_level = current_level\n        \n        # Append the deepest level of nesting to the result list\n        result.append(deepest_level)\n    \n    # Return the result list\n    return result\n",
        "test": "assert parse_nested_parens(')()(') == [0], \"Incorrect output for ')()'\"",
        "num_ids": 3649,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 2311,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for number in numbers:\n            total_product *= number\n        return (total_sum, total_product)",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2334,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_num = float('-inf')\n    rolling_max_list = []\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        rolling_max_list.append(max_num)\n    return rolling_max_list\n",
        "test": "assert rolling_max([1]) == [1]  # Check that the function returns the expected output for a list of length 1.",
        "num_ids": 3355,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    \n    if is_palindrome(string):\n        return string\n    \n    while not is_palindrome(string + string[::-1][1:len(string)+1]):\n        string += string[-1]\n    \n    return string + string[::-1][1:len(string)+1]\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2828,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n",
        "test": "assert string_xor('101010', '010101') == '111111'",
        "num_ids": 2822,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])   \n    'a'\n    >>> longest(['a', 'bb', 'ccc'])   \n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "test": "assert longest([]) is None, \"Test 1 failed\"",
        "num_ids": 2311,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert greatest_common_divisor(3, 5) == 1  # Check if the function returns the correct value for a=3, b=5",
        "num_ids": 2083,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)+1)]\n",
        "test": "assert all_prefixes('') == []",
        "num_ids": 1581,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i) + \" \"\n    return sequence[:-1]\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 2591,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ignore case\n    string = string.lower()\n    # Create a set to store unique characters\n    unique_chars = set()\n    # Iterate over the string and add each character to the set\n    for char in string:\n        unique_chars.add(char)\n    # Return the size of the set, which represents the number of unique characters\n    return len(unique_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 2391,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes[note] for note in music_string.split()]",
        "test": "assert parse_music(\"o o| .| o| o| .| .| .| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 6203,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    index = 0\n    while index != -1:\n        index = string.find(substring, index)\n        if index != -1:\n            count += 1\n            index += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 1949,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    sorted_list = sorted(num_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_list)\n",
        "test": "assert sort_numbers('five') == 'five'",
        "num_ids": 2943,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    \n    closest_pair = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if not closest_pair or diff < closest_pair[0]:\n                closest_pair = [diff, numbers[i], numbers[j]]\n    return tuple(sorted(closest_pair[1:3]))\n",
        "test": "assert find_closest_elements([1.0, 2.0]) == (1.0, 2.0)",
        "num_ids": 4670,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    new_numbers = []\n    for num in numbers:\n        new_num = (num - min_num) / (max_num - min_num)\n        new_numbers.append(new_num)\n    return new_numbers\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 4254,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 1853,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 1089,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n",
        "test": "assert largest_divisor(49) == 7, \"Incorrect output for 49\"",
        "num_ids": 1601,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 3690,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    \n    # Create a dictionary to keep track of the counts of each number\n    count_dict = {}\n    \n    # Loop through the list of numbers\n    for num in numbers:\n        # If the number is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a new list to hold the unique numbers\n    unique_numbers = []\n    \n    # Loop through the original list of numbers\n    for num in numbers:\n        # If the count of the number is 1, add it to the new list of unique numbers\n        if count_dict[num] == 1:\n            unique_numbers.append(num)\n    \n    # Return the new list of unique numbers\n    return unique_numbers\n",
        "test": "assert remove_duplicates([1]) == [1]",
        "num_ids": 2379,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 1944,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == '', \"Test 1 failed\"",
        "num_ids": 1490,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 2153,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 2199,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_prime(101) == True",
        "num_ids": 2118,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Morevor, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    if len(xs) % 2 != 0 or xs[0] == 0:\n        return None\n\n    x0 = 0\n    x1 = 1\n    x2 = 0\n    f0 = poly(xs, x0)\n    f1 = poly(xs, x1)\n    f2 = f1 - f0\n\n    if f2 == 0:\n        return x0\n\n    for _ in range(100):\n        if f2 == 0:\n            return x1\n\n        if x0 == x1:\n            return None\n\n        x2 = (x0 * f1 - x1 * f0) / f2\n\n        f2 = poly(xs, x2) - poly(xs, x1)\n        x0 = x1\n        x1 = x2\n\n    return None\n",
        "test": "assert find_zero([-6, 11, -6, 1]) == round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 ",
        "num_ids": 4014,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_sorted = sorted(l)\n    l_sorted = [l_sorted[i] if i % 3 != 0 else l[i] for i in range(len(l))]\n    return l_sorted\n",
        "test": "assert sort_third([]) == []",
        "num_ids": 3008,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1910,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 2169,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            if '7' in str_i:\n                count += 1\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 1419,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    # Create an empty list to store the sorted even values\n    sorted_evens = []\n    # Iterate over the even indicies of l, and add them to sorted_evens\n    for i in range(0, len(l), 2):\n        sorted_evens.append(l[i])\n    # Sort the sorted_evens list\n    sorted_evens.sort()\n    # Create a new list with the sorted even values and the odd values of l\n    l_prime = [sorted_evens[i//2] if i%2 == 0 else l[i] for i in range(len(l))]\n    # Return the new list\n    return l_prime\n",
        "test": "assert sort_even([]) == []",
        "num_ids": 3114,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 3540,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 40,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    is_prime returns True if the given number is prime, and False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef next_fibonacci(n: int) -> int:\n    \"\"\"\n    next_fibonacci returns the n-th Fibonacci number.\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    i = 1\n    while True:\n        num = next_fibonacci(i)\n        if is_prime(num):\n            n -= 1\n            if n == 0:\n                return num\n        i += 1\n",
        "test": "assert prime_fib(1) == 2, \"The 1st test case for prime_fib failed.\"",
        "num_ids": 3090,
        "indeed": true
    },
    {
        "number": 40,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    if len(l) < 3:\n        return False\n\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 3842,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from each other.  All cars move in the same speed.\n    Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    \n    # Initialize variables to keep track of number of collisions\n    left_car = 0\n    right_car = n - 1\n    collisions = 0\n    \n    # Move the cars simultaneously until all cars have passed each other\n    while left_car < right_car:\n        left_car += 1\n        right_car -= 1\n        \n        # Check for collision\n        if left_car == right_car:\n            collisions += 1\n    \n    return collisions ",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 3750,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    result = []\n    for i in l:\n        result.append(i+1)\n    return result\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1753,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    \n    # Create a set of the given list\n    s = set(l)\n    \n    # Check if there is a pair of distinct elements that sum to zero\n    for i in s:\n        if (-i) in s and i != (-i):\n            return True\n    \n    # If no such pair is found, return False\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 3006,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 39,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(reversed(digits))\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 3205,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(3, 4) == 6.0, \"Incorrect area for triangle 3, 4\"",
        "num_ids": 1759,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 3197,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 2409,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    text = text.lower() # convert to lower case\n    text = ''.join(filter(str.isalnum, text)) # remove non-alphanumeric characters\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 1465,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    \n    # Initializing a variable to store 2^n modulo p\n    result = 1\n    \n    # Iterating from 0 to n\n    for i in range(n):\n        \n        # Multiplying result with 2 modulo p\n        result = (result * 2) % p\n        \n    return result\n",
        "test": "assert modp(0, 101) == 1",
        "num_ids": 2371,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"  # Test for correctness of encode_shift",
        "num_ids": 2186,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1918,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \n    Args:\n    - l (list): List of numbers.\n    - t (int): Threshold value.\n    \n    Returns:\n    - True if all numbers in the list are below the threshold, False otherwise.\n    \n    Examples:\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1980,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5, \"Test 1 failed\"",
        "num_ids": 1077,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Create sets of characters for each word\n    set0 = set(s0)\n    set1 = set(s1)\n\n    # Check if the sets are equal (i.e., if they have the same characters)\n    if set0 == set1:\n        return True\n    else:\n        return False\n",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 1978,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(1) == 1",
        "num_ids": 1217,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 2200,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n        return all(l[i] < l[i+1] for i in range(len(l)-1))\n    if l[0] > l[1]:\n        return all(l[i] > l[i+1] for i in range(len(l)-1))\n    return False\n",
        "test": "assert monotonic([1]) == True",
        "num_ids": 2718,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n    set1 = set(l1)\n    set2 = set(l2)\n    intersection = set1.intersection(set2)\n\n    return sorted(list(intersection))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2604,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Initialize the largest prime factor to 1\n    largest_factor = 1\n    \n    # Iterate through all possible factors\n    for i in range(2, int(n**0.5)+1):\n        # If i is a factor of n\n        if n % i == 0:\n            # Check if i is a prime number\n            is_prime = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            \n            # If i is a prime number, update the largest factor\n            if is_prime:\n                largest_factor = i\n    \n    # If n has no prime factors, return n\n    if largest_factor == 1:\n        return n\n    \n    # Return the largest prime factor\n    return largest_factor\n",
        "test": "assert largest_prime_factor(17) == 17",
        "num_ids": 3771,
        "indeed": false
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n",
        "test": "assert sum_to_n(30) == 465, \"sum_to_n(30) should return 465\"",
        "num_ids": 2220,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False ",
        "num_ids": 2241,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial. \n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form. \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # initialize list to store derivatives\n    derivatives = []\n    \n    # loop through coefficients\n    for i in range(1, len(xs)):\n        # calculate derivative coefficient\n        deriv = i * xs[i]\n        # append to list of derivatives\n        derivatives.append(deriv)\n    \n    # return list of derivatives\n    return derivatives",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 2524,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1) \n    0\n    >>> fibfib(5) \n    4\n    >>> fibfib(8) \n    24\n    \"\"\"\n    fib = [0, 0, 1]\n    if n < 3:\n        return fib[n]\n    for i in range(3, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n    return fib[n]\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 2538,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    vowels = \"aeiou\"\n    y_vowel = \"y\"\n    count = 0\n\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n        elif char == y_vowel:\n            count += 1\n\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2, \"Incorrect count for 'abcde'\"",
        "num_ids": 2725,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    \n    # convert the integer to a string\n    x_str = str(x)\n    \n    # get the number of digits in the integer\n    num_digits = len(x_str)\n    \n    # check if shift is greater than the number of digits\n    if shift > num_digits:\n        # reverse the digits and return as a string\n        return x_str[::-1]\n    \n    # circular shift the digits to the right by shift\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    \n    return shifted_str\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 2507,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Add the ASCII code of the character to the sum\n            sum += ord(char)\n            \n    # Return the final sum\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 1925,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 40,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def fruit_distribution(s, n):\n    apples = int(s.split(\"apples and\")[0].strip())\n    oranges = int(s.split(\"oranges\")[0].strip().split(\" \")[-1])\n    mango = n - apples - oranges\n    return mango",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 3491,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even_value:\n            smallest_even_value = node\n            smallest_even_index = i\n\n    if smallest_even_index != -1:\n        return [smallest_even_value, smallest_even_index]\n    else:\n        return []\n",
        "test": "assert pluck([]) == []",
        "num_ids": 3423,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num <= 0:\n            continue\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n\n    return -1",
        "test": "assert search([5, 5, 4, 4, 4]) == -1",
        "num_ids": 2953,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    min_val = min(lst)\n    max_val = max(lst)\n    lst.remove(min_val)\n    lst.remove(max_val)\n    \n    sorted_lst = [min_val, max_val]\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sorted_lst.append(min(lst))\n            lst.remove(min(lst))\n        else:\n            sorted_lst.append(max(lst))\n            lst.remove(max(lst))\n    \n    return sorted_lst + lst\n",
        "test": "assert strange_sort_list([]) == []",
        "num_ids": 3591,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the three sides form a valid triangle\n    if a+b>c and b+c>a and a+c>b:\n        # Calculate the semi-perimeter\n        s = (a+b+c)/2\n        # Calculate the area using Heron's formula\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 3393,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def will_it_fly(q, w):\n    if len(q) == 0 or len(q) == 1:\n        return True\n    elif sum(q) > w:\n        return False\n    elif q[0] == q[-1]:\n        return will_it_fly(q[1:-1], w)\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False  # 1+2 is less than the maximum possible weight, but it's unbalanced.",
        "num_ids": 3464,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # count the number of elements that have an odd frequency\n    odd_freq = sum(1 for num in freq_dict if freq_dict[num] % 2 != 0)\n\n    # count the number of elements that need to be changed to make the array palindromic\n    change_count = min(odd_freq, len(arr) // 2)\n\n    return change_count\n",
        "test": "assert smallest_change([1, 2, 3, 4, 5, 6, 7]) == 3",
        "num_ids": 3831,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    total1 = 0\n    total2 = 0\n    \n    for string in lst1:\n        total1 += len(string)\n    \n    for string in lst2:\n        total2 += len(string)\n    \n    if total1 == total2:\n        return lst1\n    elif total1 < total2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 3440,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is prime, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise. \n    \"\"\"\n    # Check that a is less than 100\n    if a >= 100:\n        return False\n    # Check that a is the product of 3 primes\n    primes = [i for i in range(2, a) if is_prime(i)]\n    if len(primes) < 3:\n        return False\n    # Check that a is the product of the 3 primes\n    if a == primes[0]*primes[1]*primes[2]:\n        return True\n    return False\n",
        "test": "assert is_multiply_prime(90) == False",
        "num_ids": 3444,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Returns true if a number x is a simple power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    \"\"\"\n    if n == 1:\n        return True\n    elif x == 1:\n        return False\n    else:\n        while x >= 1:\n            if x == n:\n                return True\n            elif x == 1:\n                return False\n            else:\n                x /= n\n        return False\n",
        "test": "assert is_simple_power(3, 2) == False",
        "num_ids": 2349,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        a = -a\n    return a == int(round(a ** (1. / 3))) ** 3",
        "test": "assert iscube(1) == True",
        "num_ids": 1866,
        "indeed": true
    },
    {
        "number": 78,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number greater than 1 \n    that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,... \n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    hex_digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    hex_primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for hex_digit in num:\n        if hex_digit in hex_primes and hex_digit in hex_digits:\n            count += 1\n    return count\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 4247,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(decimal):\n    # Convert decimal to binary string\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' characters at the beginning and end of the string\n    binary = 'db' + binary + 'db'\n    \n    # Return the binary string\n    return binary\n",
        "test": "assert decimal_to_binary(255) == \"db11111111db\"",
        "num_ids": 2584,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    if len(s) < 3:\n        return False\n    \n    s = s.lower()  # convert to lowercase\n    \n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    \n    return True ",
        "test": "assert is_happy(\"abcd\") == True",
        "num_ids": 2411,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n            GPA | Letter grade\n           4.0   A+\n           > 3.7   A \n           > 3.3   A- \n           > 3.0   B+\n           > 2.7   B \n           > 2.3   B-\n           > 2.0   C+\n           > 1.7   C\n           > 1.3   C-\n           > 1.0   D+ \n           > 0.7   D \n           > 0.0   D-\n           0.0   E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0]) == ['A+']",
        "num_ids": 7259,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"\n    This function returns True if n is prime and False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_length(string):\n    \"\"\"\n    This function takes a string as input and returns True if the length\n    of the string is a prime number, and False otherwise.\n    \"\"\"\n    length = len(string)\n    return is_prime(length)\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 1958,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def starts_one_ends(n):\n    # Number of 1-digit numbers that start or end with 1: 9\n    count = 9\n    \n    # Number of 2-digit numbers that start or end with 1: 9 + 9 = 18\n    if n >= 2:\n        count += 9 * 9\n    \n    # Number of 3-digit numbers that start or end with 1: 9 + 9 * 10 + 9 * 100\n    if n >= 3:\n        count += 9 * (10 ** (n - 1) - 1) * 9\n    \n    # Number of n-digit numbers that start or end with 1: 9 * 10^(n-1) - 1 + 9 * 10^(n-1) - 1\n    if n >= 4:\n        count += 2 * 9 * (10 ** (n - 1) - 1) * 9\n    \n    # Remaining n-digit numbers that start or end with 1: 9 * 10^(n-1) - 1\n    if n >= 5:\n        count += 9 * (10 ** (n - 1) - 1)\n    \n    return count\n",
        "test": "assert starts_one_ends(1) == 9  # There are 9 one-digit numbers (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) that start or end with 1.",
        "num_ids": 6874,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 30,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    binary_sum = 0\n    while N > 0:\n        remainder = N % 10\n        binary_sum += remainder\n        N //= 10\n    return bin(binary_sum)[2:]  # convert the binary sum to binary and remove the \"0b\" prefix",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 3509,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n",
        "test": "assert add([4, 2, 6, 7]) == 2 ",
        "num_ids": 1817,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. \n    Note: You should keep the order of words and blank spaces in the sentence.\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        if word == '':\n            result.append(word)\n        else:\n            ordered_word = ''.join(sorted(word))\n            result.append(ordered_word)\n            \n    return ' '.join(result)\n",
        "test": "assert anti_shuffle('') == ''",
        "num_ids": 3397,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    coordinates = []\n    \n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                coordinates.append((i, j))\n    \n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    \n    return coordinates",
        "test": "assert get_row([",
        "num_ids": 3555,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    \n    first_value = array[0]\n    last_value = array[-1]\n    \n    if (first_value + last_value) % 2 == 0:\n        sorted_array = sorted(array, reverse=True)\n    else:\n        sorted_array = sorted(array)\n    \n    return sorted_array",
        "test": "assert sort_array([]) == []",
        "num_ids": 2989,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 40,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2  # Shift the alphabet down by two multiplied to two places\n            if char.islower():\n                encrypted += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            elif char.isupper():\n                encrypted += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 3532,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    min1 = min(lst[0], lst[1])\n    min2 = max(lst[0], lst[1])\n    \n    for i in range(2, len(lst)):\n        if lst[i] < min1:\n            min2 = min1\n            min1 = lst[i]\n        elif lst[i] < min2:\n            min2 = lst[i]\n    \n    if min1 == min2:\n        return None\n    else:\n        return min2\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 2212,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    sentences = S.split('. ') # Split the string into sentences\n    boredom_count = 0 # Initialize the boredom counter\n    for sentence in sentences:\n        words = sentence.split() # Split the sentence into words\n        if len(words) > 0 and words[0].lower() == 'i':\n            boredom_count += 1 # Increment the boredom counter if the sentence starts with \"I\"\n    return boredom_count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 2878,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    # Convert all inputs to integers\n    x, y, z = int(x), int(y), int(z)\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    # Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return False\n    else:\n        return True\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 2566,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    # Define a list of vowels and their corresponding replacements\n    vowels = {'a': 'L', 'e': 'O', 'i': 'A', 'o': 'T', 'u': 'E'}\n    \n    # Define a list of characters to replace with their corresponding vowel\n    replacements = {'L': 'a', 'O': 'e', 'A': 'i', 'T': 'o', 'E': 'u'}\n    \n    # Convert the message to lowercase\n    message = message.lower()\n    \n    # Loop through each character in the message\n    encoded_message = ''\n    for char in message:\n        # Check if the character is a vowel\n        if char in vowels:\n            # Replace the vowel with its replacement\n            encoded_message += replacements[char]\n        # Check if the character is a consonant\n        elif char.isalpha():\n            # Swap case and append to the encoded message\n            encoded_message += char.swapcase()\n        else:\n            # Append any non-letter characters to the encoded message\n            encoded_message += char\n    \n    return encoded_message\n",
        "test": "assert encode('abcdefghijklmnopqrstuvwxyz') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'",
        "num_ids": 3865,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers. You need to find the largest prime value and return the sum of its digits.\"\"\"\n    \n    def is_prime(num):\n        \"\"\"Helper function to check if a number is prime\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    max_prime = max([x for x in lst if is_prime(x)])\n    sum_of_digits = sum(int(d) for d in str(max_prime))\n    return sum_of_digits\n",
        "test": "assert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25",
        "num_ids": 5563,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False. \n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Get the first key from the dictionary\n    first_key = next(iter(dict))\n    \n    # Check if all keys are strings and are in lower or upper case\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.lower() != key and key.upper() != key:\n            return False\n    \n    # Check if all keys have the same case (either lower or upper)\n    if first_key.lower() != first_key and first_key.upper() != first_key:\n        return False\n    \n    return True\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 3819,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    if n == 0:\n        return []\n    \n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    \n    return primes\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 2635,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    unit_a = a % 10\n    unit_b = b % 10\n    return unit_a * unit_b\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 2845,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0  # Because there are no uppercase vowels in even indices",
        "num_ids": 1829,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Convert the input value to a float\n    number = float(value)\n\n    # Check if the number is equidistant from two integers\n    if (number % 1) == 0.5:\n        # Round away from zero by adding or subtracting 1 depending on the sign of the number\n        if number >= 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n    else:\n        # Round to the nearest integer\n        return round(number)\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 2905,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. \n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = []\n    for i in range(n):\n        if n % 2 == 0:\n            pile.append(n)\n            n += 2\n        else:\n            pile.append(n)\n            n += 2 if n % 2 == 0 else 1\n    return pile\n",
        "test": "assert make_a_pile(2) == [2, 4] ",
        "num_ids": 3252,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n    # Replace all commas with spaces\n    s = s.replace(\",\", \" \")\n\n    # Split the string into words and return the array\n    return s.split()\n",
        "test": "assert words_string(\"\") == []",
        "num_ids": 2859,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Find the biggest even integer in the range [x, y] inclusive\n    num = y\n    while num >= x:\n        if num % 2 == 0:\n            return num\n        num -= 1\n\n    # If no even number found in range, return -1\n    return -1\n",
        "test": "assert choose_num(10, 10) == 10",
        "num_ids": 2667,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary. \n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        binary = bin(avg)[2:]\n        return \"0b\" + \"\".join(\"1\" if x == \"1\" else \"0\" for x in binary)\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 2678,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # Initialize an empty list to store the unique digits\n    unique_digits_list = []\n    \n    # Iterate through each element in the list\n    for element in x:\n        # Check if the element has any even digit\n        has_even_digit = False\n        for digit in str(element):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        \n        # If the element hasn't any even digit, add it to the list of unique digits\n        if not has_even_digit:\n            unique_digits_list.append(element)\n    \n    # Sort the list in increasing order\n    unique_digits_list.sort()\n    \n    return unique_digits_list\n",
        "test": "assert unique_digits([]) == []",
        "num_ids": 3773,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def by_length(arr):\n    # Define the digits and their corresponding names\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    # Sort the array and reverse it\n    sorted_arr = sorted(filter(lambda x: x in range(1, 10), arr), reverse=True)\n\n    # Replace the digits by their corresponding names\n    result = [digits[digit] for digit in sorted_arr]\n\n    return result",
        "test": "assert by_length([]) == []",
        "num_ids": 3999,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "test": "assert f(1) == [1]",
        "num_ids": 3047,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 3756,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0. \n    If a number is negative, then its first signed digit will be negative: \n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1936,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                            be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n                            \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if sorted_arr[i] != arr[i]:\n            return False\n    return True\n",
        "test": "assert move_one_ball([]) == True",
        "num_ids": 4855,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers, \n    and determines whether it is possible to perform an exchange of elements \n    between them to make lst1 a list of only even numbers. \n    There is no limit on the number of exchanged elements between lst1 and lst2. \n    If it is possible to exchange elements between the lst1 and lst2 to make \n    all the elements of lst1 to be even, return \"YES\". \n    Otherwise, return \"NO\". \n    For example: \n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty. \n    \"\"\"\n    \n    for i in lst2:\n        if i % 2 == 1 and i not in lst1:\n            return \"NO\"\n    \n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1 and lst1[i] not in lst2:\n            return \"NO\"\n        \n    return \"YES\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
        "num_ids": 5320,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    \n    if not test:\n        return {}\n    \n    count_dict = {}\n    for letter in test.split():\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n            \n    max_count = max(count_dict.values())\n    result = {k: v for k, v in count_dict.items() if v == max_count}\n    \n    return result\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 4273,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def reverse_delete(s, c):\n    # Delete characters in s that are equal to any character in c\n    s = ''.join([char for char in s if char not in c])\n    # Check if the result string is palindrome\n    is_palindrome = (s == s[::-1])\n    return (s, is_palindrome)\n",
        "test": "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)",
        "num_ids": 3091,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, \n    return a list. Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \n    >>> odd_count(['1234567']) \n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"]) \n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for digit in lst[i]:\n            if int(digit) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(i+1) + \"ng \" + str(i+1) + \" of the \" + str(i+1) + \"nput.\")\n    return result\n",
        "test": "assert odd_count(['1']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"] ",
        "num_ids": 4792,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums. \n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        min_sum = float('inf')\n        curr_sum = nums[0]\n        for i in range(1, len(nums)):\n            curr_sum = min(curr_sum + nums[i], nums[i])\n            min_sum = min(min_sum, curr_sum)\n        return min_sum\n",
        "test": "assert minSubArraySum([0, 0]) == 0",
        "num_ids": 2678,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 33,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \n    def bucket_fill(row, bucket_capacity, current_bucket, used_buckets):\n        total_water = 0\n        for i in range(len(row)):\n            if row[i] == 1:\n                total_water += 1\n                if current_bucket < bucket_capacity:\n                    current_bucket += 1\n                else:\n                    used_buckets += 1\n                    current_bucket = 1\n            elif current_bucket > 0:\n                current_bucket = 0\n        return current_bucket, used_buckets, total_water\n\n    def fill_wells(grid, bucket_capacity):\n        current_bucket = 0\n        used_buckets = 0\n        total_water = 0\n        for row in grid:\n            current_bucket, used_buckets, row_water = bucket_fill(row, bucket_capacity, current_bucket, used_buckets)\n            total_water += row_water\n        return used_buckets, total_water\n\n    used_buckets, total_water = fill_wells(grid, capacity)\n    return math.ceil(total_water / capacity)",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0 ",
        "num_ids": 4470,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(n):\n        \"\"\"\n        Helper function to count number of ones in the binary representation of a number\n        \"\"\"\n        count = 0\n        while n > 0:\n            count += n % 2\n            n //= 2\n        return count\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))",
        "test": "assert sort_array([1, 1, 0, 1, 0]) == [0, 0, 1, 1, 1]",
        "num_ids": 3370,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    def is_consonant(char):\n        return char.lower() not in \"aeiou\"\n    \n    def count_consonants(word):\n        return sum(1 for char in word if is_consonant(char))\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result",
        "test": "assert select_words(\"simple white space\", 2) == []",
        "num_ids": 3857,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels:\n            if word[i+1] in vowels and word[i+2] not in vowels:\n                return word[i+1]\n    return ''\n",
        "test": "assert get_closest_vowel(\"ab\") == \"\"",
        "num_ids": 2927,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to\n    concatenate the two strings in some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S are balanced.\n    For example: the string '(())()' is good, while the string '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_good(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return True\n\n    return 'Yes' if is_good(lst[0] + lst[1]) else 'No'\n",
        "test": "assert match_parens(['()(', ')']) == 'Yes'",
        "num_ids": 2376,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Create a list to store the maximum k numbers\n    max_k_arr = []\n\n    # Sort the input array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n\n    # Add the first k numbers to the max_k_arr\n    for i in range(k):\n        max_k_arr.append(sorted_arr[i])\n\n    # Return the sorted max_k_arr\n    return sorted(max_k_arr)",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 3994,
        "indeed": true
    },
    {
        "number": 121,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    # Initialize a variable to store the sum\n    total = 0\n\n    # Loop through the list and check if the element is odd and in an even position\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n\n    return total\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 2796,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    total_sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n    \n    return total_sum\n",
        "test": "assert add_elements([1, 2, 3, 4, 5], 0) == 0, \"Example test failed\"",
        "num_ids": 2846,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    odd_collatz = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = 3*n + 1 if n % 2 == 1 else n//2\n    odd_collatz.append(1)\n    return sorted(odd_collatz)\n",
        "test": "assert get_odd_collatz(5) == [1, 5]",
        "num_ids": 5167,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False. \n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    import re\n    \n    # Checking for the format: mm-dd-yyyy\n    pattern = re.compile(r'^[0-1][0-9]-[0-3][0-9]-[1-2][0-9]{3}$')\n    if not pattern.match(date):\n        return False\n    \n    # Extracting the month, day, and year from the date\n    month, day, year = map(int, date.split('-'))\n    \n    # Checking if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Checking if the day is between 1 and 31 for the given month\n    if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n        return False\n    elif month in [4,6,9,11] and day < 1 or day > 30:\n        return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) and day < 1 or day > 29:\n            return False\n        elif day < 1 or day > 28:\n            return False\n    \n    # If all checks are passed, return True\n    return True\n",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 5672,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.replace(',', ' ').split()\n    else:\n        return sum(1 for i in range(len(txt)) if ord(txt[i]) % 2 == 1)\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 2187,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 3992,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"Compute the intersection of two intervals\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start2 <= start1 <= end2:\n        start = max(start1, start2)\n    elif start1 <= start2 <= end1:\n        start = max(start1, start2)\n    else:\n        return \"NO\"\n    if end2 <= end1 <= start2:\n        end = min(end1, end2)\n    elif end2 <= end1 <= start1:\n        end = min(end1, end2)\n    else:\n        return \"NO\"\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 2673,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n\n    signs = []\n    for num in arr:\n        if num == 0:\n            signs.append(0)\n        elif num > 0:\n            signs.append(1)\n        else:\n            signs.append(-1)\n\n    product = 1\n    for sign in signs:\n        product *= sign\n\n    magnitudes = [abs(num) for num in arr]\n    return sum(magnitudes) * product ",
        "test": "assert prod_signs([]) == None ",
        "num_ids": 2504,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def minPath(grid, k):\n    def is_valid(x, y, k):\n        return 0 <= x < len(grid) and 0 <= y < len(grid) and k > 0\n\n    def dfs(x, y, k):\n        if not is_valid(x, y, k):\n            return []\n\n        if k == 1:\n            return [grid[x][y]]\n\n        min_path = []\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            min_path.append(grid[x][y])\n            min_path += dfs(x + dx, y + dy, k - 1)\n            if not min_path:\n                break\n\n        return min_path\n\n    for i in range(len(grid)):\n        for j in range(len(grid)):\n            if grid[i][j] == 1:\n                return dfs(i, j, k)\n\n    return []\n",
        "test": "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 0) == []",
        "num_ids": 4942,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    sequence = [1, 3, 2, 8]\n    if n < 4:\n        return sequence[:n+1]\n    else:\n        for i in range(4, n+1):\n            if i % 2 == 0:\n                sequence.append(sequence[-1] + i / 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-4])\n        return sequence\n",
        "test": "assert tri(3) == [1, 3, 2, 8], \"Incorrect output for tri(3)\"",
        "num_ids": 4848,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product if product != 1 else 0\n",
        "test": "assert digits(3) == 3",
        "num_ids": 1578,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    count_open = 0\n    count_close = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            count_open += 1\n        elif string[i] == ']':\n            count_close += 1\n            if count_open > count_close:\n                return True\n    return False",
        "test": "assert is_nested('[[]]') == True",
        "num_ids": 1978,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \n    \"\"\"\n    import math\n    \n    # Calculate the sum of squares of each number in the list\n    sum_of_squares = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        sum_of_squares += rounded_num**2\n    \n    return sum_of_squares\n    ",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 3304,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False  \n    '''\n    \n    if len(txt) == 0:  # check if the string is empty\n        return False\n    \n    last_char = txt[-1]  # get the last character of the string\n    words = txt.split()  # split the string into words\n    \n    if last_char.isalpha() and last_char not in words[-1]:  # check if the last character is a letter and not a part of the last word\n        return True\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False ",
        "num_ids": 3325,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if not arr:\n        return -1\n\n    max_idx = len(arr) - 1\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            max_idx = i\n            break\n\n    return max_idx",
        "test": "assert can_arrange([5,4,3,2,1]) == 4",
        "num_ids": 2540,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    max_neg = min_pos = None\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n\n    return (max_neg, min_pos)",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 3579,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Returns None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Convert string inputs to floats and ints, respectively\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the two values\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert compare_one(\"1\", 1) is None, \"compare_one('1', 1) should return None\"",
        "num_ids": 3498,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n\n    # Check if the number is even and greater than 4\n    if n % 2 != 0 or n <= 4:\n        return False\n\n    # Check if the number can be written as the sum of 4 even numbers\n    for i in range(2, n//2 + 1):\n        for j in range(2, n//2 + 1):\n            for k in range(2, n//2 + 1):\n                for l in range(2, n//2 + 1):\n                    if i + j + k + l == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:\n                        return True\n\n    # If no valid combination is found, return False\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 2665,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n",
        "test": "assert special_factorial(1) == 1, \"Error: special_factorial(1) should be 1\"",
        "num_ids": 2289,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces, then replace\n    all consecutive spaces with -\n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    \n    new_text = ''\n    spaces = 0\n    \n    for char in text:\n        if char == ' ':\n            spaces += 1\n            if spaces == 1:\n                new_text += '_'\n            elif spaces >= 2:\n                new_text += '-'\n        else:\n            spaces = 0\n            new_text += char\n    \n    return new_text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 3044,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if there are more than 3 digits in the file's name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n\n    # Check if the file's name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Check if the substring before the dot is not empty and starts with a latin alphapet letter\n    if not file_name.split('.')[0] or not file_name.split('.')[0][0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == \"Yes\"",
        "num_ids": 5115,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 3379,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)",
        "test": "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
        "num_ids": 2265,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 33,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format, \n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    # Convert string fractions to tuples and then to integers\n    x_frac = tuple(map(int, x.split('/')))\n    n_frac = tuple(map(int, n.split('/')))\n\n    # Multiply the fractions\n    xn = x_frac[0] * n_frac[0]\n    d = x_frac[1] * n_frac[1]\n\n    # Check if the result is a whole number\n    if d == 0:\n        return \"Invalid denominator\"\n    elif xn % d == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 3255,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_of_digits(num):\n    return sum(int(digit) for digit in str(abs(num)))\n\ndef order_by_points(nums):\n    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits(x), x))\n    return sorted_nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 2688,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0]) % 2 == 1) and (int(str(num)[-1]) % 2 == 1):\n            count += 1\n    return count\n",
        "test": "assert specialFilter([4, 9, 2, 7, 1, 3, 5, 8, 6]) == 0  # Should return 0",
        "num_ids": 2559,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def get_max_triples(n):\n    # create the array a of length n\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    \n    # initialize variables for counting the triples\n    count = 0\n    \n    # loop through each triplet of indices (i, j, k)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                # check if the sum of the triplet is divisible by 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n",
        "test": "assert get_max_triples(5) == 1 ",
        "num_ids": 2953,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_indices = {planet: index for index, planet in enumerate(planets)}\n\n    if planet1 not in planet_indices or planet2 not in planet_indices:\n        return ()\n\n    index1 = planet_indices[planet1]\n    index2 = planet_indices[planet2]\n\n    if index1 == index2:\n        return (planet1,)\n    elif index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(reversed(planets[index2+1:index1]))",
        "test": "assert bf(\"Sun\", \"Mars\") == () ",
        "num_ids": 4581,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. \n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule. \n    If two words have the same length, sort the list alphabetically. \n    The function should return a list of strings in sorted order. \n    You may assume that all words will have the same length. \n    For example: \n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"] \n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"] \n    \"\"\"\n\n    # Filter out odd length strings\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n\n    return lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 3329,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    \n    def is_prime(num):\n        \"\"\"Helper function to check if a number is prime\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 2825,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    \n    if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 != 0:\n                result += num ** 2\n    \n    return result\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 3182,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(diff)\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 3459,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM.  \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName. \n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    \n    strongest_ext = None\n    max_strength = float('-inf')\n    \n    for ext in extensions:\n        cap = len([c for c in ext if c.isupper()])\n        sm = len([c for c in ext if c.islower()])\n        strength = cap - sm\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return class_name + '.' + strongest_ext\n",
        "test": "assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"",
        "num_ids": 5136,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word.\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n    \"\"\"\n\n    a, b = a.lower(), b.lower()\n    if b in a:\n        return True\n\n    for i in range(1, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\", \"abd\") == False",
        "num_ids": 2796,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    # Remove the sign of the number and convert it to string\n    num_str = str(abs(num))\n\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_count(-12) == (1, 1)",
        "num_ids": 2346,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_num = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            roman_num += numeral\n            number -= value\n\n    return roman_num\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 3481,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(4, 5, 6) == False",
        "num_ids": 3145,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_chars or (unique_chars == max_chars and word < max_word):\n            max_word = word\n            max_chars = unique_chars\n            \n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 2198,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals. \n    You should return an array of [ total number of eaten carrots after your meals,\n                                        the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    \n    # Check if there are enough carrots left to satisfy the need\n    if need > remaining:\n        # If not, eat all remaining carrots and return [total eaten carrots + remaining carrots, 0]\n        total_eaten = number + remaining\n        remaining = 0\n    else:\n        # If yes, eat the needed carrots and return [total eaten carrots + needed carrots, remaining carrots - needed carrots]\n        total_eaten = number + need\n        remaining = remaining - need\n    \n    # Return the result as an array\n    return [total_eaten, remaining]\n",
        "test": "assert eat(1, 10, 10) == [11, 0]",
        "num_ids": 5091,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Operator list should have one less element than operand list.\")\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            expression += ' + ' + str(operand[i+1])\n        elif operator[i] == '-':\n            expression += ' - ' + str(operand[i+1])\n        elif operator[i] == '*':\n            expression += ' * ' + str(operand[i+1])\n        elif operator[i] == '//':\n            expression += ' // ' + str(operand[i+1])\n        elif operator[i] == '**':\n            expression += ' ** ' + str(operand[i+1])\n        else:\n            raise ValueError(\"Invalid operator.\")\n    return eval(expression)\n",
        "test": "assert do_algebra(['+'], [2, 3]) == 5",
        "num_ids": 5120,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    new_s = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                new_s += char.upper()\n            else:\n                new_s += char.lower()\n        else:\n            new_s += char\n    if not has_letter:\n        return new_s[::-1]\n    else:\n        return new_s\n",
        "test": "assert solve(\"1234\") == \"4321\", \"First test failed\"",
        "num_ids": 2297,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62', 'Incorrect md5 hash for \"Hello world\"'",
        "num_ids": 2684,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def generate_integers(a, b):\n    # Sort the input numbers and convert them to strings\n    a, b = str(min(a, b)), str(max(a, b))\n    # Initialize an empty list to store the even digits\n    even_digits = []\n    # Iterate over the range of numbers from a to b\n    for num in range(int(a), int(b)+1):\n        # Convert the number to a string\n        num_str = str(num)\n        # Check if the number contains any even digits\n        if any(int(digit) % 2 == 0 for digit in num_str):\n            # Add the number to the list of even digits\n            even_digits.append(num)\n    # Return the list of even digits\n    return even_digits\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 3053,
        "indeed": false
    }
]