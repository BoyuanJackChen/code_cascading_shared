[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those. \n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string. \n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    \n    # remove spaces from the input string\n    paren_string = ''.join(paren_string.split())\n    \n    result = []\n    stack = []\n    current_group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            if not stack:\n                # unbalanced string, ignore\n                current_group = ''\n            else:\n                stack.pop()\n                current_group += char\n                if not stack:\n                    # balanced group found, add it to the result list\n                    result.append(current_group)\n                    current_group = ''\n        else:\n            # ignore other characters\n            current_group = ''\n    \n    if current_group:\n        # add the last group to the result list\n        result.append(current_group)\n    \n    return result\n",
        "test": "assert separate_paren_groups('()()()()') == ['()', '()', '()', '()']",
        "num_ids": 2133,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    decimal_part = number - int(number)\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False ",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset. Mean Absolute Deviation is the average absolute difference\n    between each element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    \n    n = len(numbers)\n    mean = sum(numbers) / n\n    deviation = [abs(num - mean) for num in numbers]\n    mad = sum(deviation) / n\n    \n    return mad\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'.\n    \n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i != len(numbers)-1:\n            result.append(numbers[i])\n            result.append(delimeter)\n        else:\n            result.append(numbers[i])\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    results = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        results.append(max_depth)\n    return results\n",
        "test": "assert parse_nested_parens('()') == [1], \"Error in parse_nested_parens()\"",
        "num_ids": 1582,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    \n    # Initialize sum and product variables\n    total = 0\n    product = 1\n    \n    # Loop through the list of numbers and add each number to the total and multiply each number with the product\n    for num in numbers:\n        total += num\n        product *= num\n    \n    # Return the tuple of total and product\n    return (total, product)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1003,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_so_far = numbers[0]\n    rolling_max_list = [numbers[0]]\n    \n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        rolling_max_list.append(max_so_far)\n    \n    return rolling_max_list\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n\n    # Check if input string is already a palindrome\n    if is_palindrome(string):\n        return string\n\n    # Find the longest postfix that is a palindrome\n    postfix = ''\n    for i in range(len(string) - 1, -1, -1):\n        postfix = string[i] + postfix\n        if is_palindrome(string + postfix):\n            break\n\n    # Reverse the prefix that comes before the postfix and append it to the end\n    prefix = string[:-len(postfix)]\n    return string + prefix[::-1] + postfix\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # convert strings to lists of characters\n    a_list = list(a)\n    b_list = list(b)\n    \n    # perform XOR on each pair of characters and join them into a new string\n    result = ''\n    for i in range(len(a_list)):\n        if a_list[i] == b_list[i]:\n            result += '0'\n        else:\n            result += '1'\n    \n    return result\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 1145,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> longest([])\n    None\n    \n    >>> longest(['a', 'b', 'c'])  # Output: 'a'\n    >>> longest(['a', 'bb', 'ccc'])  # Output: 'ccc'\n    \"\"\"\n    \n    if not strings:  # If the input list is empty\n        return None\n    \n    longest_string = max(strings, key=len)  # Return the longest string from the list\n    return longest_string\n",
        "test": "assert longest(['a', 'b', 'c']) == 'a'",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)+1)]\n",
        "test": "assert all_prefixes(\"\") == []  # Test 2",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\"Return a string containing space-delimited numbers starting from 0 up to n inclusive.\"\"\"\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i) + \" \"\n    return sequence[:-1]",
        "test": "assert string_sequence(0) == \"0\"",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n    # convert the string to lowercase\n    string = string.lower()\n\n    # create a set of unique characters from the string\n    unique_chars = set(string)\n\n    # return the length of the set\n    return len(unique_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 1085,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_notes = music_string.split()\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    beats = []\n    for note in music_notes:\n        beats.append(notes[note])\n    return beats",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] ",
        "num_ids": 2800,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string) - len(substring) + 1:\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring) - 1\n        i += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sort_numbers(numbers: str) -> str:\n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Define a dictionary that maps each word to its corresponding value\n    word_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Define a list of tuples, where each tuple contains a word and its corresponding value\n    word_value_pairs = [(word, word_to_value[word]) for word in words]\n    \n    # Sort the list of tuples by the second element (i.e., the value)\n    word_value_pairs.sort(key=lambda x: x[1])\n    \n    # Convert the sorted list of tuples back to a string and return it\n    return ' '.join(word for word, value in word_value_pairs)\n",
        "test": "assert sort_numbers(\"one three five\") == \"one three five\"  # Example usage of sort_numbers function with valid input",
        "num_ids": 1323,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_diff = float('inf')\n    min_1, min_2 = None, None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_1 = numbers[i]\n                min_2 = numbers[j]\n    return min_1, min_2\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 1767,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    min_num = min(numbers)\n    max_num = max(numbers)\n    unit_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return unit_numbers\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0] ",
        "num_ids": 1548,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def strlen(string: str) -> int:\n    \"\"\"Return length of given string\"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n \"\"\"\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Create a dictionary to keep track of the frequency of each element\n    frequency = {}\n    for number in numbers:\n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n    \n    # Create a list of unique elements that have a frequency of 1\n    unique_elements = []\n    for number in numbers:\n        if frequency[number] == 1:\n            unique_elements.append(number)\n    \n    return unique_elements\n",
        "test": "assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 1082,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 745,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c']) \n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == '', \"Test 1 failed\"",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_list = []\n    for num in l:\n        if num > 0:\n            positive_list.append(num)\n    return positive_list\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 933,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 1001,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Morever, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max([abs(c) for c in xs]) == 0:\n        return None\n    else:\n        return -xs[n-2] / xs[n-1]\n",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 1968,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    \n    l_sorted = sorted(l)\n    l_sorted = l_sorted[::3] + l_sorted[1::3] + l_sorted[2::3]\n    l_sorted = [l[i] if i%3!=0 else l_sorted[i//3] for i in range(len(l))]\n    return l_sorted\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3], \"Error: Incorrect output for sort_third([1, 2, 3])\"",
        "num_ids": 1603,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = l[0]\n    for i in l:\n        if i > max_val:\n            max_val = i\n    return max_val\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    sorted_even_indices = sorted(range(0, len(l), 2))\n    sorted_even_values = sorted(l[::2])\n    sorted_list = []\n\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_list.append(sorted_even_values.pop(0))\n        else:\n            sorted_list.append(l[i])\n\n    return sorted_list\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1459,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"hello\")) == \"hello\"",
        "num_ids": 1684,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    is_prime returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    fib = [0, 1]\n    count = 1\n    while count < n:\n        fib.append(fib[-1] + fib[-2])\n        count += 1\n        if is_prime(fib[-1]):\n            return fib[-1]\n",
        "test": "assert prime_fib(2) == 3, \"Error in prime_fib(2)\"",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    if len(l) < 3:\n        return False\n    \n    l = sorted(l)\n    \n    for i in range(len(l) - 2):\n        if l[i] >= 0:\n            break\n        \n        j = i + 1\n        k = len(l) - 1\n        \n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                return True\n            elif l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    \n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
        "num_ids": 1669,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right;  simultaneously, a different set of n cars are driving right to left.  The two sets of cars start out being very far from each other.  All cars move in the same speed.  Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left.  However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide.\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Initialize the positions of the two sets of cars\n    pos_left_to_right = [n] * n\n    pos_right_to_left = [0] * n\n\n    # Initialize the number of collisions\n    num_collisions = 0\n\n    # Move the cars along the road\n    for i in range(1, n + 1):\n        pos_left_to_right = [(pos - 1) % (2 * n) for pos in pos_left_to_right]\n        pos_right_to_left = [(pos + 1) % (2 * n) for pos in pos_right_to_left]\n\n        # Check for collisions\n        for i in range(n):\n            if pos_left_to_right[i] == pos_right_to_left[i]:\n                num_collisions += 1\n\n    return num_collisions\n",
        "test": "assert car_race_collision(1) == 0",
        "num_ids": 1839,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Iterate through the list and check if there are two distinct elements that sum to zero\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1008,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    \n    if base < 2 or base > 9:\n        raise ValueError(\"Base should be less than 10\")\n    \n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    \n    return ''.join(str(digit) for digit in digits[::-1])\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = (a * h) / 2\n    return area",
        "test": "assert triangle_area(5, 3) == 7.5, \"Error in triangle_area(5, 3)\"",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    # base case\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    # recursive case\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 1445,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    l = sorted(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3, \"Incorrect median\"",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    \n    # Convert text to lowercase and remove all non-alphanumeric characters\n    text = ''.join(filter(str.isalnum, text)).lower()\n    \n    # Check if text is equal to its reverse\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('aba') == True",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    \n    # Initialize a variable to store the result\n    res = 1\n    \n    # Raise 2 to the power of n and perform modulo p operation\n    for i in range(n):\n        res = (res * 2) % p\n        \n    return res\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 876,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 869,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    s0 = s0.lower()\n    s1 = s1.lower()\n    \n    # Convert both words to sets of characters\n    set0 = set(s0)\n    set1 = set(s1)\n    \n    # Check if both sets have the same characters\n    if set0 == set1:\n        return True\n    else:\n        return False\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(0) == 0",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 965,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    diff = []\n    for i in range(len(l) - 1):\n        diff.append(l[i+1] - l[i])\n    return all(diff[i] >= 0 for i in range(len(diff))) or all(diff[i] <= 0 for i in range(len(diff)))\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 1140,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \n    \"\"\"\n    # using set() to get unique elements from both lists\n    s1 = set(l1)\n    s2 = set(l2)\n    # using set.intersection() to get common elements\n    common_elements = s1.intersection(s2)\n    # using sorted() to sort the common elements in ascending order\n    sorted_common_elements = sorted(common_elements)\n    return sorted_common_elements\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1090,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Initialize the largest prime factor to 1\n    largest_factor = 1\n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # If i is a factor of n and i is prime\n        if n % i == 0 and is_prime(i):\n            # Update the largest factor to i\n            largest_factor = i\n    return largest_factor\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(7)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n    # If n is less than 2, it's not prime\n    if n < 2:\n        return False\n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # If i is a factor of n, n is not prime\n        if n % i == 0:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    # Test the function with example inputs\n    print(largest_prime_factor(13195))  # Output: 29\n    print(largest_prime_factor(2048))   # Output: 2 ",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 1338,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n",
        "test": "assert sum_to_n(30) == 465 ",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        elif b == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    result = []\n    for i in range(1, n):\n        result.append(xs[i] * i)\n    return result\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    \n    fibfib_sequence = [0, 0, 1]\n    \n    if n <= 2:\n        return fibfib_sequence[n]\n    \n    for i in range(3, n+1):\n        fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n    \n    return fibfib_sequence[n]\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 1493,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def vowels_count(s):\n    \"\"\"\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 1136,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # If the character is uppercase, add its ASCII code to the sum\n        if char.isupper():\n            sum += ord(char)\n    \n    # Return the final sum\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 1127,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # Split the string into apples, oranges, and mango fruits\n    fruits = s.split()\n\n    # Remove \"and\" from the string\n    fruits = [fruit.replace(\"and\", \"\") for fruit in fruits]\n\n    # Count the total number of fruits\n    total_fruits = sum(int(fruit) for fruit in fruits)\n\n    # Count the number of mango fruits\n    mango_fruits = n - (total_fruits - int(fruits[0]))\n\n    return mango_fruits",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\",3) == 2",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n        return []\n\n    smallest_value = min(arr)\n    if smallest_value % 2 == 0:\n        return [smallest_value, arr.index(smallest_value)]\n    else:\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                return [arr[i], i]\n        return [] ",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 2067,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def search(lst):\n    # Initialize the greatest integer to -1\n    greatest = -1\n    \n    # Create a dictionary to store the frequency of each integer\n    freq_dict = {}\n    \n    # Loop through the list and update the frequency dictionary\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Loop through the dictionary and find the greatest integer with frequency greater than or equal to its value\n    for num in freq_dict:\n        if num > 0 and freq_dict[num] >= num:\n            if num > greatest:\n                greatest = num\n    \n    return greatest ",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 1574,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def strange_sort_list(lst):\n    if len(lst) == 0:\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst = [x for x in lst if x != min_val and x != max_val]\n        return [min_val] + [max_val] + strange_sort_list(lst)\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 1581,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 1556,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    \n    # check if the list is balanced\n    if q[::-1] != q:\n        return False\n    \n    # check if the sum of elements is less than or equal to the maximum possible weight\n    if sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 1006,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # reverse the array\n    rev_arr = arr[::-1]\n\n    # initialize count to 0\n    count = 0\n\n    # loop through the original and reverse arrays\n    for i in range(len(arr)):\n        # if the elements at the current index are not equal, increment count\n        if arr[i] != rev_arr[i]:\n            count += 1\n\n    # return the count\n    return count\n",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 1861,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def total_match(lst1, lst2):\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n\n    if total_chars1 == total_chars2:\n        return lst1\n    elif total_chars1 < total_chars2:\n        return lst1\n    else:\n        return lst2",
        "test": "assert total_match([], []) == []",
        "num_ids": 1011,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a >= 100:\n        return False\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            if count == 3:\n                return True\n    return False\n",
        "test": "assert is_multiply_prime(24) == False",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return True\n    return x == n ** int(x / n)\n",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 1235,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    # check if a is a perfect cube\n    return a == int(round(a ** (1./3))) ** 3\n",
        "test": "assert iscube(1) == True",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef hex_key(num):\n    count = 0\n    for hex_digit in num:\n        if hex_digit in \"2357BDF\":\n            decimal_digit = int(hex_digit, 16)\n            if is_prime(decimal_digit):\n                count += 1\n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 1692,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string. \n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n",
        "test": "assert decimal_to_binary(1) == \"db1db\", \"Incorrect binary conversion for decimal 1\"",
        "num_ids": 1088,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s. Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True\n",
        "test": "assert is_happy('abcd') == True  # Example 1",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0]) == ['A+']",
        "num_ids": 2511,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"\n    return is_prime(len(string))\n",
        "test": "assert prime_length('abcdcba') == True",
        "num_ids": 850,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Define a function to check if a number starts with 1\n    def starts_one(num):\n        return num[0] == '1'\n    \n    # Define a function to check if a number ends with 1\n    def ends_one(num):\n        return num[-1] == '1'\n    \n    # Calculate the count of numbers that start or end with 1\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if starts_one(str(i)) or ends_one(str(i)):\n            count += 1\n    \n    return count\n",
        "test": "assert starts_one_ends(2) == 18 # there are 18 numbers that start or end with 1, e.g. 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 100, 101, 11, 12, 13, 14, 15, 16, 17",
        "num_ids": 1666,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solve(N):\n    # convert the number to binary string\n    binary_str = bin(N)[2:]\n    \n    # calculate the sum of digits\n    sum_of_digits = sum([int(d) for d in binary_str])\n    \n    # convert the sum of digits to binary string\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    # return the binary sum\n    return binary_sum\n",
        "test": "assert solve(150) == \"110\", \"Incorrect output for N = 150\"",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the odd indices of the list\n    for i in range(1, len(lst), 2):\n        \n        # Add the even elements at odd indices to the sum variable\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    \n    return sum\n",
        "test": "assert add([4, 2, 6, 7]) == 2 ",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. \n    Note: You should keep the order of words and blank spaces in the sentence.\n    \n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # initialize an empty list to store the ordered words\n    ordered_words = []\n    # loop through each word\n    for word in words:\n        # check if the word is not empty or contains only blank spaces\n        if word.strip() != '':\n            # sort the characters in the word in ascending order based on ascii value\n            ordered_word = ''.join(sorted(word))\n            # add the ordered word to the ordered words list\n            ordered_words.append(ordered_word)\n        # if the word is empty or contains only blank spaces, add it to the ordered words list as is\n        else:\n            ordered_words.append(word)\n    # join the ordered words into a string\n    ordered_string = ' '.join(ordered_words)\n    # return the ordered string\n    return ordered_string\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 1624,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    return result\n",
        "test": "assert get_row([",
        "num_ids": 1441,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_array(array):\n    if not array:\n        return []\n\n    first_value = array[0]\n    last_value = array[-1]\n    sum_values = first_value + last_value\n\n    if sum_values % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 1397,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = ord(char.lower()) - ord('a')\n            result += chr(((shift * 2) % 26) + ord('a'))\n        else:\n            result += char\n    return result\n",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop'",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 965,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    sentences = S.split(\".\") + S.split(\"?\") + S.split(\"!\")\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1041,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n   \n\n    '''\n\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return (x == y + z) or (y == x + z) or (z == x + y)\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 947,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = \"\"\n    \n    for letter in message:\n        if letter.lower() in vowels:\n            index = vowels.index(letter.lower())\n            if letter.isupper():\n                encoded_message += chr((ord(vowels[(index+2) % 5]) - ord('a') + ord('A')) % 26)\n            else:\n                encoded_message += chr((ord(vowels[(index+2) % 5]) - ord('a') + ord('a')) % 26)\n        elif letter.isupper():\n            encoded_message += chr((ord(letter.lower()) - ord('a') + ord('A')) % 26)\n        else:\n            encoded_message += letter\n    \n    return encoded_message\n",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
        "num_ids": 1635,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value and return the sum of its digits.\"\"\"\n    max_prime = max([x for x in lst if is_prime(x)])\n    return sum(int(d) for d in str(max_prime))\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 1779,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False. \n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict: # check if dictionary is empty\n        return False\n    \n    lower_keys = all(isinstance(key, str) and key.islower() for key in dict)\n    upper_keys = all(isinstance(key, str) and key.isupper() for key in dict)\n    \n    return lower_keys or upper_keys\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1703,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 1254,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Returns the product of the unit digits of two integers.\n    \"\"\"\n    \n    # Convert the integers to strings and extract the unit digits\n    a_units = str(a)[-1]\n    b_units = str(b)[-1]\n    \n    # Convert the digits back to integers and multiply them\n    product = int(a_units) * int(b_units)\n    \n    return product\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero. \n    \n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    \n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    \n    # Convert the string to float\n    float_val = float(value)\n    \n    # Find the closest integer\n    int_val = round(float_val)\n    \n    # Check if the number is equidistant from two integers\n    if float_val - int_val > 0.5:\n        return int_val + 1\n    elif float_val - int_val < -0.5:\n        return int_val - 1\n    else:\n        return int_val\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1547,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            pile.append(n+2)\n            n += 2\n        else:\n            pile.append(n+1)\n            n += 1\n    return pile",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 1334,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Remove commas and split the string into words\n    words = s.replace(\",\", \"\").split()\n    # Return the array of words\n    return words\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive.\n    If there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Initialize the biggest even integer to -1\n    biggest_even = -1\n    \n    # Loop through the range [x, y] inclusive\n    for num in range(x, y+1):\n        # Check if the current number is even and bigger than the current biggest_even\n        if num % 2 == 0 and num > biggest_even:\n            # Update the biggest_even to the current number\n            biggest_even = num\n    \n    # Return the biggest_even found in the loop\n    return biggest_even ",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 1199,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n\n    total_sum = sum(range(n, m+1))\n    rounded_avg_num = round(total_sum / (m - n + 1))\n    binary_form = bin(rounded_avg_num)\n\n    return binary_form",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1191,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit. \n    \n    Note: Returned list should be sorted in increasing order. \n    \n    For example: \n    >> unique_digits([15, 33, 1422, 1]) \n    [1, 15, 33] \n    >> unique_digits([152, 323, 1422, 10]) \n    [] \n    \"\"\"\n    result = []\n    for i in x:\n        if not any(int(digit) % 2 == 0 for digit in str(i)):\n            result.append(i)\n    return sorted(result)\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1362,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    \n           -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n           -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n               -> sort arr -> [-1, 1, 55]\n               -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Check if the array is empty\n    if len(arr) == 0:\n        return []\n\n    # Create a new array to store the result\n    result = []\n\n    # Loop through the array and append only the valid digits to the result array\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num)\n\n    # Sort the result array\n    result.sort()\n\n    # Reverse the result array\n    result.reverse()\n\n    # Create a dictionary to map digits to their corresponding names\n    name_dict = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # Loop through the result array and replace each digit with its corresponding name from the dictionary\n    for i in range(len(result)):\n        result[i] = name_dict[result[i]]\n\n    # Return the final result array\n    return result\n",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
        "num_ids": 3006,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def factorial(n):\n    \"\"\"Returns the factorial of n\"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n\ndef f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise. i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n",
        "test": "assert f(5) == [1, 2, 6, 24, 15] ",
        "num_ids": 1782,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            even_count += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            odd_count += 1\n\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1463,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                    array by performing any number of right shift operations.\n                    \n    \"\"\"\n\n    if not arr:\n        return True\n\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n\n    return True\n",
        "test": "assert move_one_ball([3, 5, 4, 1, 2])==False",
        "num_ids": 2098,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers, \n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers. \n    There is no limit on the number of exchanged elements between lst1 and lst2. \n    If it is possible to exchange elements between the lst1 and lst2 to make \n    all the elements of lst1 to be even, return \"YES\". \n    Otherwise, return \"NO\". \n    For example: \n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    lst1_even = [x for x in lst1 if x % 2 == 0]\n    lst2_odd = [x for x in lst2 if x % 2 == 1]\n\n    if len(lst1_even) >= len(lst2_odd):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 2759,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == \"\":\n        return {}\n    \n    # Split the string into a list of lowercase letters\n    letters = test.split()\n    \n    # Create a dictionary to store the count of each letter\n    counts = {}\n    \n    # Iterate through the list of letters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in counts:\n            counts[letter] += 1\n        # If the letter is not in the dictionary, add it with a count of 1\n        else:\n            counts[letter] = 1\n            \n    # Find the letter(s) with the highest count\n    max_count = max(counts.values())\n    max_letters = [key for key, value in counts.items() if value == max_count]\n    \n    # Return the dictionary with the letter(s) and their count(s)\n    return {letter: max_count for letter in max_letters}\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 2149,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome. \n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Deleting characters in s that are equal to any character in c\n    for char in c:\n        s = s.replace(char, '')\n    # Checking if the result string is palindrome\n    result = s[::-1]\n    palindrome = True if s == result else False\n    return s, palindrome\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 1514,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567']) # doctest: +SKIP\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"]) # doctest: +SKIP\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2 == 1:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \"ng \" + str(count) + \" of the \" + str(count) + \"nput.\")\n    return result\n",
        "test": "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
        "num_ids": 2017,
        "indeed": true
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums. \n    \"\"\"\n    # Initialize the minimum sum to the first element of the array\n    min_sum = nums[0]\n    \n    # Iterate through the array\n    for i in range(1, len(nums)):\n        # Add the current element to the minimum sum so far\n        min_sum = min(min_sum + nums[i], nums[i])\n        \n    return min_sum\n",
        "test": "assert minSubArraySum([-1, -2, -3]) == -6",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_fill(grid, bucket_capacity):\n    import math\n    \n    rows = len(grid)\n    cols = len(grid[0])\n    bucket_capacity = int(bucket_capacity)\n    \n    # Calculate the total number of wells\n    total_wells = sum([sum(row) for row in grid])\n    \n    # Calculate the minimum number of buckets required\n    min_buckets = math.ceil(total_wells / bucket_capacity)\n    \n    # Initialize a variable to keep track of the number of bucket lowerings\n    bucket_lowerings = 0\n    \n    # Loop through the rows and columns of the grid\n    for i in range(rows):\n        for j in range(cols):\n            # If the current cell is a well, calculate the amount of water it can hold\n            if grid[i][j] == 1:\n                well_capacity = bucket_capacity\n                \n                # Calculate the number of buckets needed to empty the well\n                num_buckets = math.ceil(well_capacity / bucket_capacity)\n                \n                # Increment the bucket lowerings by the number of buckets needed\n                bucket_lowerings += num_buckets\n    \n    return bucket_lowerings\n",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
        "num_ids": 2305,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order. For similar number of ones,\n    sort based on decimal value.\n    \n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    def binary_ones(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n    \n    return sorted(arr, key=lambda x: (binary_ones(x), x))\n",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s. \n    If the string s is empty then the function should return an empty list. \n    Note: you may assume the input string contains only letters and spaces. \n    Examples: \n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"] \n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] \n    select_words(\"simple white space\", 2) ==> [] \n    select_words(\"Hello world\", 4) ==> [\"world\"] \n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"] \n    \"\"\"\n\n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the words with n consonants\n    result = []\n    \n    # Loop through each word\n    for word in words:\n        # Initialize a counter for the number of consonants in the word\n        consonant_count = 0\n        \n        # Loop through each letter in the word\n        for letter in word:\n            # If the letter is a consonant, increment the counter\n            if letter.lower() not in 'aeiou':\n                consonant_count += 1\n        \n        # If the word has exactly n consonants, add it to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
        "num_ids": 1918,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    vowels = \"AEIOU\"\n    vowels = vowels.upper()\n    word = word.upper()\n\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels:\n            if word[i+1] in vowels and word[i+2] not in vowels:\n                return word[i+1]\n\n    return \"\" ",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\", \"Incorrect output for get_closest_vowel('FULL')\"",
        "num_ids": 1571,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import itertools\n\ndef is_good(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return len(stack) == 0\n\ndef match_parens(lst):\n    for s1, s2 in itertools.product(lst[0], lst[1]):\n        s = s1 + s2\n        if is_good(s):\n            return 'Yes'\n    return 'No'\n",
        "test": "assert match_parens(['(', ')']) == 'Yes'",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    import heapq\n\n    # Create a heap from the first k elements in the array\n    heap = arr[:k]\n    heapq.heapify(heap)\n\n    # Iterate through the remaining elements in the array\n    for num in arr[k:]:\n        # If the number is greater than the smallest element in the heap,\n        # replace the smallest element and re-heapify the heap\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n\n    return sorted(heap)  # Return the sorted heap as the result\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # Initialize a variable to keep track of the sum\n    total = 0\n    \n    # Loop through the list\n    for i in range(0, len(lst), 2):\n        # Check if the element at the current position is odd\n        if lst[i] % 2 != 0:\n            # If it is odd, add it to the total\n            total += lst[i]\n            \n    # Return the total sum\n    return total\n",
        "test": "assert solution([5, 8, 7, 1]) == 12, \"Test 1\"",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Loop through the first k elements of the array\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # If it does, add it to the sum\n            sum += arr[i]\n    \n    # Return the sum\n    return sum\n",
        "test": "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24  # Test case 1",
        "num_ids": 1436,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_sequence = [n]\n    while collatz_sequence[-1] != 1:\n        if collatz_sequence[-1] % 2 == 0:\n            collatz_sequence.append(collatz_sequence[-1] // 2)\n        else:\n            collatz_sequence.append(3 * collatz_sequence[-1] + 1)\n    return sorted([x for x in collatz_sequence if x % 2 != 0])\n",
        "test": "assert get_odd_collatz(2) == [1], \"Incorrect output for get_odd_collatz(2)\"",
        "num_ids": 1552,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def valid_date(date):\n    \"\"\"\n    This function takes a date string as an input and returns True if the date is valid according to the given rules. \n    \"\"\"\n    # Check if the date string is not empty\n    if date == '':\n        return False\n    \n    # Split the date string into month, day, and year components\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    # Check if the number of days is valid for the given month\n    if month in [1,3,5,7,8,10,12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4,6,9,11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        return False\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the year is a leap year\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 != 0:\n                return False\n    \n    return True\n",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 1610,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3  \n    '''\n    \n    # split the text on whitespace and return the list of words\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # count the number of lower-case letters with odd order in the alphabet\n        count = 0\n        for letter in txt:\n            if letter.islower():\n                if ord(letter) % 2 == 1:\n                    count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"], \"Incorrect output for 'Hello world!'\"",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sorted(lst):\n    # Ensure no duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    # Use two pointers to check for ascending order\n    i, j = 0, 1\n    while j < len(lst):\n        if lst[i] > lst[j]:\n            return False\n        i += 1\n        j += 1\n    return True\n",
        "test": "assert is_sorted([1, 2, 3, 4, 5]) == True",
        "num_ids": 1487,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    \n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If the two intervals don't intersect, return \"NO\"\n    if start > end:\n        return \"NO\"\n    \n    # Find the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is a prime number\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1748,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    signs = [1] * len(arr)\n    for i, num in enumerate(arr):\n        if num < 0:\n            signs[i] = -1\n        elif num == 0:\n            signs[i] = 0\n\n    magnitude_sum = sum(abs(num) for num in arr)\n    product_of_signs = 1\n    for sign in signs:\n        product_of_signs *= sign\n\n    return magnitude_sum * product_of_signs",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 869,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def minPath(grid, k):\n    n = len(grid)\n    dp = [[[float('inf')] * k for _ in range(n)] for _ in range(n)]\n    dp[0][0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[i][0][0] = dp[i-1][0][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j][0] = dp[0][j-1][0] + grid[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j][0] = min(dp[i-1][j][0] + grid[i][j], dp[i][j-1][0] + grid[i][j])\n    for k in range(1, k):\n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j][k] = min(dp[i-1][j][k-1] + grid[i][j], dp[i][j-1][k-1] + grid[i][j], dp[i-1][j][k] + grid[i][j], dp[i][j-1][k] + grid[i][j])\n    result = []\n    for i in range(k):\n        for j in range(n):\n            for l in range(n):\n                if dp[j][l][i] == min(dp[j][l][i], dp[j][l][i+1], dp[j+1][l][i], dp[j][l+1][i]):\n                    result.append(grid[j][l])\n                    break\n            if len(result) == k:\n                break\n        if len(result) == k:\n            break\n    return result\n",
        "test": "assert minPath([ [5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 1720,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    sequence = [1, 3, 2, 8]\n    for i in range(4, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + sequence[-4])\n    return sequence\n",
        "test": "assert tri(3) == [1, 3, 2, 8] # Example 1",
        "num_ids": 2261,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    product = 1\n    odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            odd = True\n        n //= 10\n        \n    return product if odd else 0\n",
        "test": "assert digits(1) == 1",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_nested(string):\n    # Initialize a stack to keep track of opening brackets\n    stack = []\n    # Iterate over the characters in the string\n    for c in string:\n        # If the character is an opening bracket, push it onto the stack\n        if c == '[':\n            stack.append(c)\n        # If the character is a closing bracket and the stack is not empty\n        elif c == ']' and stack:\n            # Pop the top element from the stack and check if it's a nested bracket\n            if stack[-1] == '[':\n                stack.pop()\n            # If the popped element is not a nested bracket, the subsequence is not valid\n            else:\n                return False\n    # If there are still opening brackets in the stack after iterating over the string\n    if stack:\n        # The subsequence is not valid\n        return False\n    # If the function has not yet returned False, the subsequence is valid\n    return True\n",
        "test": "assert is_nested('[[]]') == True",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    total = 0\n    for num in lst:\n        rounded = int(math.ceil(num)) ** 2\n        total += rounded\n    return total\n",
        "test": "assert sum_squares([1, 2, 3]) == 14",
        "num_ids": 1343,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    \"\"\"\n    # Check if the string is empty\n    if len(txt) == 0:\n        return False\n    # Find the last non-space character\n    last_char = txt[-1]\n    # Check if it is a letter and not part of a word\n    return last_char.isalpha() and not last_char.isalnum()\n",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    \n    # Initialize variables\n    n = len(arr)\n    max_idx = -1\n    \n    # Loop through the array from left to right\n    for i in range(n-1):\n        if arr[i+1] <= arr[i]:\n            max_idx = i\n        else:\n            max_idx = max(max_idx, i)\n    \n    # Return the largest index found\n    return max_idx\n",
        "test": "assert can_arrange([1, 2, 4, 3, 5]) == 3",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. If there is no negative or positive integers, return them as None.\n    \n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 1529,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Convert strings to float if possible\n    if isinstance(a, str) and a.replace(',', '.').replace(' ', '').replace('-', '').isnumeric():\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str) and b.replace(',', '.').replace(' ', '').replace('-', '').isnumeric():\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1514,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Check if n is even and greater than 6\n    if n % 2 != 0 or n <= 6:\n        return False\n    # Check if the sum of the first 3 even numbers can be equal to n\n    sum_even = 2 + 4 + 6\n    if sum_even == n:\n        return True\n    # Check if the sum of the first 2 even numbers and the last even number can be equal to n\n    sum_even = 2 + 4 + 2\n    if sum_even == n:\n        return True\n    # Check if the sum of the first even number and the last 3 even numbers can be equal to n\n    sum_even = 2 + 4 + 6 + 2\n    if sum_even == n:\n        return True\n    # If none of the above conditions are satisfied, the number cannot be written as the sum of exactly 4 positive even numbers\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False, \"Function should return False for 4\"",
        "num_ids": 1437,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n    \n    For example:\n    >>> special_factorial(4)\n    288\n    \n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    result = factorial\n    for i in range(n-1, 0, -1):\n        result *= i\n    return result\n",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    prev_char = \"\"\n    for char in text:\n        if char == \" \":\n            if prev_char == \" \":\n                new_text += \"-\"\n            else:\n                new_text += \"_\"\n        else:\n            new_text += char\n        prev_char = char\n    return new_text",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    \n    # Check if there are more than 3 digits in the file name\n    if file_name.count('0') + file_name.count('1') + file_name.count('2') + file_name.count('3') + file_name.count('4') + file_name.count('5') + file_name.count('6') + file_name.count('7') + file_name.count('8') + file_name.count('9') > 3:\n        return 'No'\n    \n    # Check if there are more than 1 dot in the file name\n    if file_name.count('.') > 1:\n        return 'No'\n    \n    # Split the file name into two parts based on the dot\n    file_name_parts = file_name.split('.')\n    \n    # Check if the first part is empty or doesn't start with a latin alphapet letter\n    if len(file_name_parts[0]) == 0 or not (file_name_parts[0][0].isalpha() and file_name_parts[0][0].islower()):\n        return 'No'\n    \n    # Check if the second part is one of the valid extensions\n    if file_name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all conditions are met, return 'Yes'\n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == 'Yes'",
        "num_ids": 2909,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n    return sum\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1371,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
        "num_ids": 1146,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    # Convert the fraction strings to numbers\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the product of x and n\n    xn_num = x_num * n_num\n    xn_den = x_den * n_den\n\n    # Simplify the fraction by finding the GCD of the numerator and denominator\n    gcd = math.gcd(xn_num, xn_den)\n    xn_num //= gcd\n    xn_den //= gcd\n\n    # Check if the product of x and n is a whole number\n    if xn_den == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 1358,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), x))\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1 ",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n\nn = 5\nprint(get_max_triples(n))",
        "test": "assert get_max_triples(5) == 1 # Example: Input: n = 5, Output: 1",
        "num_ids": 1289,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        i1 = planets.index(planet1)\n        i2 = planets.index(planet2)\n        if i1 < i2:\n            return tuple(planets[i1+1:i2])\n        else:\n            return tuple(reversed(planets[i2+1:i1]))\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 1596,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule. If two words have the same length,\n    sort the list alphabetically. The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\"\"\"\n    \n    # create a list of words with odd length\n    odd_length_words = [word for word in lst if len(word) % 2 != 0]\n    \n    # remove odd length words from the original list\n    lst = [word for word in lst if word not in odd_length_words]\n    \n    # sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1539,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 1154,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    \n    if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 == 1:\n                result += num ** 2\n    \n    return result\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 1475,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    \n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n            \n    return result\n",
        "test": "assert compare([1,2,3,4,5,1], [1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1579,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strengths = {}\n    for extension in extensions:\n        cap = sum(1 for letter in extension if letter.isupper())\n        sm = sum(1 for letter in extension if letter.islower())\n        strength = cap - sm\n        if strength not in strengths:\n            strengths[strength] = extension\n        elif extension < strengths[strength]:\n            strengths[strength] = extension\n    return f\"{class_name}.{strengths[max(strengths)]}\"",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA' ",
        "num_ids": 2351,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    \n    # Check if b is a substring of a\n    if b in a:\n        return True\n    \n    # Check if any rotation of b is a substring of a\n    n = len(b)\n    for i in range(n):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    \n    # If none of the above conditions are satisfied, return False\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\", \"abd\") == False",
        "num_ids": 1270,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_dict = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_num = \"\"\n    for value, roman in roman_dict.items():\n        while number >= value:\n            roman_num += roman\n            number -= value\n\n    return roman_num\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 1308,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Determine if the triangle is a right angle triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_length = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_length:\n            max_length = unique_chars\n            max_word = word\n            \n        elif unique_chars == max_length and word < max_word:\n            max_word = word\n    \n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                        the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 2133,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    def evaluate_expression(expression):\n        return eval(expression)\n\n    expression = \"\".join([str(operand.pop(0)) + \" \" + operator.pop(0) + \" \" for _ in range(len(operand) - 1)]) + \"\".join([\" \" + str(operand.pop(0)) for _ in range(len(operand))])\n    result = evaluate_expression(expression)\n    return result\n",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9  # Addition (2 + 3) * 4 - 5 = 9 ",
        "num_ids": 1726,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    \n    # Initialize a variable to store the final string\n    result = \"\"\n    \n    # Check if the string contains any letters\n    has_letter = False\n    \n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # If it is a letter, reverse its case\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n            has_letter = True\n        else:\n            # If it is not a letter, keep it as it is\n            result += char\n    \n    # If there are no letters in the string, reverse the whole string\n    if not has_letter:\n        result = result[::-1]\n    \n    return result",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 1385,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string. \n    If 'text' is an empty string, return None.\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        md5 = hashlib.md5()\n        md5.update(text.encode('utf-8'))\n        return md5.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62', \"Incorrect md5 hash\"",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:  # swap a and b if a > b\n        a, b = b, a\n    \n    even_digits = []\n    for num in range(a, b+1):\n        num_str = str(num)\n        for digit in num_str:\n            if digit.isdigit() and int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    \n    even_digits.sort()\n    return even_digits\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1481,
        "indeed": false
    }
]