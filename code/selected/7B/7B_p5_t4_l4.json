[
    {
        "number": 0,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 1473,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    current_group = []\n    open_braces = 0\n    i = 0\n    \n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            open_braces += 1\n            current_group.append('(')\n        elif paren_string[i] == ')':\n            if open_braces > 0:\n                open_braces -= 1\n                current_group.append(')')\n                if open_braces == 0:\n                    groups.append(''.join(current_group))\n                    current_group = []\n        i += 1\n    \n    return groups",
        "test": "assert separate_paren_groups('') == [] ",
        "num_ids": 2033,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number % 1\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False ",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n\n    :param numbers: List[float]\n    :return: float\n    \"\"\"\n\n    n = len(numbers)\n    mean = sum(numbers) / n\n    mad = sum(abs(x - mean) for x in numbers) / n\n\n    return mad\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 1401,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list 'numbers'.\"\"\"\n    if not numbers:  # Check if list is empty\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 1368,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    \n    def max_nesting_level(parens: str) -> int:\n        level = 0\n        max_level = 0\n        for char in parens:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        return max_level\n    \n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        results.append(max_nesting_level(group))\n    return results\n",
        "test": "assert parse_nested_parens(\"()\") == [1]  # Correct output for empty parentheses",
        "num_ids": 1818,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1076,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    \n    total = sum(numbers)\n    product = 1\n    \n    if not numbers:\n        total = 0\n        product = 1\n    else:\n        for num in numbers:\n            product *= num\n    \n    return total, product\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1420,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max = []\n    for i in range(len(numbers)):\n        current_max = max(numbers[:i+1])\n        rolling_max.append(current_max)\n    return rolling_max\n",
        "test": "assert rolling_max([2]) == [2]",
        "num_ids": 1473,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    if is_palindrome(string[::-1]):\n        return string + string[::-1][1:]\n    suffix = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i+1] + suffix):\n            suffix = string[i] + suffix\n        else:\n            break\n    return string + string[::-1][1:-len(suffix)] + suffix",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1672,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n",
        "test": "assert string_xor('010', '110') == '100' ",
        "num_ids": 1085,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> longest([])\n    None\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    \n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    \n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n        elif len(string) == len(longest_string):\n            continue\n        else:\n            break\n    \n    return longest_string\n",
        "test": "assert longest([]) is None",
        "num_ids": 1168,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 848,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
        "test": "assert all_prefixes('a') == ['a']",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 1029,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n\n    # Create an empty set to store distinct characters\n    distinct_chars = set()\n\n    # Loop through each character in the string\n    for char in string:\n        # Add the character to the set\n        distinct_chars.add(char)\n\n    # Return the number of distinct characters\n    return len(distinct_chars)",
        "test": "assert count_distinct_characters('xyzXYZ') == 3, \"Error in count_distinct_characters function\"",
        "num_ids": 1151,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n",
        "test": "assert parse_music('') == [], \"Incorrect output\"",
        "num_ids": 3113,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    n = len(string)\n    m = len(substring)\n    for i in range(n - m + 1):\n        if string[i:i+m] == substring:\n            count += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\n                 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers_list = sorted(numbers_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers_list)\n",
        "test": "assert sort_numbers('zero zero zero') == 'zero zero zero'",
        "num_ids": 1509,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_diff = float('inf')\n    min_pair = None\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (numbers[i], numbers[j])\n    return min_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 2213,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    unit_range = max_num - min_num\n    return [(num - min_num) / unit_range for num in numbers]\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0], \"Incorrect rescaling\"",
        "num_ids": 2280,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string\n\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisor = n // 2\n    while divisor > 1:\n        if n % divisor == 0:\n            return divisor\n        divisor -= 1\n    return 1\n",
        "test": "assert largest_divisor(32) == 16",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 1173,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers\n",
        "test": "assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])    \n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == '', \"Concatenate of an empty list should be an empty string\"",
        "num_ids": 819,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix. \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 1136,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True",
        "test": "assert is_prime(6) == False",
        "num_ids": 1124,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Morever, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    if len(xs) % 2 == 1:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n\n    max_coeff = max(abs(coeff) for coeff in xs[:-1])\n    if max_coeff == 0:\n        raise ValueError(\"Largest non zero coefficient must exist\")\n\n    x = xs[-1] / max_coeff\n    while abs(poly(xs, x)) > 1e-10:\n        x -= poly(xs, x) / (max_coeff * math.pow(x, len(xs) - 1))\n\n    return x\n",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 2842,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    \n    l_copy = l.copy()  # Make a copy of the original list to avoid modifying it\n    \n    # Iterate through the original list\n    for i in range(len(l)):\n        if i % 3 == 0:  # If the index is divisible by 3\n            # Sort the values at the corresponding indices of the copy of the original list\n            l_copy[i] = sorted([x for j, x in enumerate(l) if j % 3 == 0])[i // 3]\n        else:  # If the index is not divisible by 3\n            # Keep the value at the corresponding index of the original list\n            l_copy[i] = l[i]\n    \n    return l_copy\n",
        "test": "assert sort_third([]) == [], \"Incorrect result for []\"",
        "num_ids": 2141,
        "indeed": true
    },
    {
        "number": 34,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]  # Correct",
        "num_ids": 783,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1120,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if '7' in str(i):\n                count += 1\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]  # extract even indices\n    even_values = [l[i] for i in even_indices]  # extract even values\n    even_values.sort()  # sort even values in ascending order\n    l_prime = l.copy()  # create a copy of l\n    for i in range(len(even_indices)):\n        l_prime[even_indices[i]] = even_values[i]  # insert sorted even values into l'\n    return l_prime\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1653,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split encoded string to groups of three characters\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # join the elements in each group by shifting them to the right by one position\n    groups = [group[-1:] + group[:-1] if len(group) == 3 else group for group in groups]\n    # join groups to form decoded string\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 1752,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    def is_prime(num: int) -> bool:\n        \"\"\"\n        is_prime checks whether a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fibonacci(n: int) -> int:\n        \"\"\"\n        fibonacci returns the n-th Fibonacci number.\n        \"\"\"\n        if n <= 1:\n            return n\n        return fibonacci(n-1) + fibonacci(n-2)\n    \n    count = 0\n    i = 0\n    while count < n:\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n        i += 1\n    return fibonacci(i-1)\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1545,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i]+l[j]+l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1968,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right;  simultaneously, a different set of n cars are driving right to left. \n    The two sets of cars start out being very far from each other. All cars move in the same speed. \n    Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. \n    However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. \n\n    This function outputs the number of such collisions.\n    \"\"\"\n    \n    # Initializing the distances between the cars\n    distances = [float('inf')] * (2 * n)\n    \n    # Setting the initial distances between the cars\n    for i in range(n):\n        distances[i] = 2 * i * n\n        distances[i + n] = 2 * i * n\n    \n    # Calculating the number of collisions\n    num_collisions = 0\n    for i in range(n):\n        for j in range(i + 1, 2 * n - 1):\n            if distances[i] < distances[j]:\n                distances[i], distances[j] = distances[j], distances[i]\n            if distances[i] < distances[j] - (j - i) * n:\n                num_collisions += 1\n                distances[i] = distances[j] - (j - i) * n\n    \n    # Returning the number of collisions\n    return num_collisions\n",
        "test": "assert car_race_collision(0) == 0  # Test case for n=0",
        "num_ids": 2208,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [i+1 for i in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 947,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # initialize result string\n    result = ''\n    # loop through digits of x from right to left\n    while x > 0:\n        # get the remainder of x divided by base\n        digit = x % base\n        # append the digit to result\n        result = str(digit) + result\n        # update x to next digit\n        x = x // base\n    # return result as string\n    return result\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1361,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5, \"Triangle area calculation incorrect\"",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 1383,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 1:\n        return sorted(l)[n // 2]\n    else:\n        return sum(sorted(l)[n // 2 - 1:n // 2 + 1]) / 2\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    \n    # Reverse the string and compare it with original string\n    if text == text[::-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if p == 2:\n        return 0\n    elif p == 4:\n        return 1\n    elif p == 8:\n        return 2\n    elif p == 16:\n        return 3\n    elif p == 32:\n        return 4\n    elif p == 64:\n        return 5\n    elif p == 128:\n        return 6\n    elif p == 256:\n        return 7\n    elif p == 512:\n        return 8\n    elif p == 1024:\n        return 9\n    elif p == 2048:\n        return 10\n    elif p == 4096:\n        return 11\n    elif p == 8192:\n        return 12\n    elif p == 16384:\n        return 13\n    elif p == 32768:\n        return 14\n    elif p == 65536:\n        return 15\n    else:\n        modulus = 2**n % p\n        return modulus\n",
        "test": "assert modp(0, 101) == 1",
        "num_ids": 1347,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\" ",
        "num_ids": 1155,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    # Convert the strings to sets to compare the characters\n    s0_set = set(s0)\n    s1_set = set(s1)\n\n    # If the sets have the same elements, then they have the same characters\n    return s0_set == s1_set\n",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 1248,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(1) == 1",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for c in brackets:\n        if c == '<':\n            stack.append('<')\n        elif c == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 1128,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    n = len(l)\n    if n < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, n):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return False\n    return True\n",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    sorted_common_elements = sorted(common_elements)\n    return sorted_common_elements\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    \n    # Initialize the largest prime factor variable\n    largest_prime = 1\n    \n    # Find the square root of n\n    sqrt_n = int(n**0.5)\n    \n    # Check for factors from 2 to sqrt_n\n    for i in range(2, sqrt_n+1):\n        while n % i == 0:\n            # If i is a factor of n, update largest_prime\n            largest_prime = max(largest_prime, i)\n            n //= i\n    \n    # If n is still greater than 1, it must be the largest factor\n    if n > 1:\n        largest_prime = max(largest_prime, n)\n    \n    return largest_prime\n",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 1343,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 1011,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        elif b == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 1238,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    if len(xs) == 0:\n        return []\n    elif len(xs) == 1:\n        return []\n    else:\n        result = [0] * (len(xs) - 1)\n        for i in range(len(xs) - 1):\n            result[i] = xs[i+1] * (i+1)\n        return result\n",
        "test": "assert derivative([]) == []",
        "num_ids": 1327,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 1558,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert x to a string\n    x_str = str(x)\n    # Calculate the number of digits in x\n    num_digits = len(x_str)\n    # If shift > num_digits, return digits reversed\n    if shift > num_digits:\n        return x_str[::-1]\n    # Otherwise, shift the digits to the right\n    else:\n        shifted_digits = x_str[-shift:] + x_str[:-shift]\n        return shifted_digits\n",
        "test": "assert circular_shift(12, 1) == \"21\"  # should return \"21\"",
        "num_ids": 1293,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # Split the string into a list of words\n    words = s.split()\n\n    # Initialize the total apples, oranges, and mango counts to 0\n    apples = 0\n    oranges = 0\n    mango = 0\n\n    # Iterate over the list of words and count the number of each fruit\n    for word in words:\n        if word.endswith('apples'):\n            apples = int(word.split()[0])\n        elif word.endswith('oranges'):\n            oranges = int(word.split()[0])\n        elif word.endswith('mango'):\n            mango = int(word.split()[0])\n\n    # Compute the remaining mango count\n    remaining = n - apples - oranges\n\n    # Return the remaining mango count\n    return remaining\n",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\",120) == 19 ",
        "num_ids": 1997,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it. \n    The plucked node should be the node with the smallest even value. \n    If multiple nodes with the same smallest even value are found return the node that has smallest index. \n\n    The plucked node should be returned in a list, [ smalest_value, its index ], \n    If there are no even values or the given array is empty, return []. \n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros, \n                            so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        1 <= nodes.length <= 10000\n        0 <= node.value\n    \"\"\"\n\n    # initialize variables\n    smallest_value = None\n    smallest_index = None\n\n    # iterate through the array\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if smallest_value is None or arr[i] < smallest_value:\n                smallest_value = arr[i]\n                smallest_index = i\n\n    # check if there are any even values and return the result\n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []\n",
        "test": "assert pluck([4, 2, 3]) == [2, 1]",
        "num_ids": 2324,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    # Create a dictionary to store the frequency of each integer\n    frequency_dict = {}\n    for num in lst:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    \n    # Find the greatest integer greater than zero that has a frequency greater than or equal to the integer itself\n    max_num = -1\n    for num in frequency_dict:\n        if num > 0 and frequency_dict[num] >= num:\n            max_num = max(max_num, num)\n    \n    return max_num ",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 1662,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n    \n    min_val = min(lst)\n    max_val = max(lst)\n    \n    # Remove min and max values from the list\n    lst.remove(min_val)\n    lst.remove(max_val)\n    \n    # Create a new list to hold the sorted values\n    result = []\n    \n    # Add the min value\n    result.append(min_val)\n    \n    # Add the max value\n    result.append(max_val)\n    \n    # Sort the remaining values in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Add the sorted values to the result list\n    result += sorted_lst\n    \n    return result\n",
        "test": "assert strange_sort_list([]) == []",
        "num_ids": 1739,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triangle_area(a, b, c):\n    # Check if the input values form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points and return it\n        return round(area, 2)\n    else:\n        # If the input values do not form a valid triangle, return -1\n        return -1\n",
        "test": "assert triangle_area(1, 2, 10) == -1",
        "num_ids": 1463,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    # Convert the list to a palindromic string\n    palindrome = ''.join(str(x) for x in q)\n\n    # Check if the palindrome is balanced\n    left = 0\n    right = len(palindrome) - 1\n    while left < right:\n        if palindrome[left] != palindrome[right]:\n            return False\n        left += 1\n        right -= 1\n\n    # Check if the sum of elements is less than or equal the maximum possible weight\n    total = sum(q)\n    if total <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False ",
        "num_ids": 1318,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count",
        "test": "assert smallest_change([1, 2, 3, 2, 1]) == 0",
        "num_ids": 1652,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def total_match(lst1, lst2):\n    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    total_chars = sum(len(s) for s in lst1) + sum(len(s) for s in lst2)\n    if total_chars == 0:\n        return []\n    if total_chars % 2 == 0:\n        return lst1 if len(lst1) <= len(lst2) else lst2\n    else:\n        return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 1766,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Returns true if the given number is the multiplication of 3 prime numbers and false otherwise.\n    \"\"\"\n    # Check that a is less than 100\n    if a >= 100:\n        return False\n    \n    # Check that a is the multiplication of 3 prime factors\n    factors = []\n    for i in range(2, int(a/2)+1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n    if len(factors) != 3 or a != 1:\n        return False\n    \n    # Check that all factors are prime\n    for factor in factors:\n        prime = True\n        for i in range(2, int(factor/2)+1):\n            if factor % i == 0:\n                prime = False\n                break\n        if prime == False:\n            return False\n    \n    # All factors are prime\n    return True\n",
        "test": "assert is_multiply_prime(10) == False",
        "num_ids": 1671,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    return x == n**int(x/n)\n",
        "test": "assert is_simple_power(3, 2) == False  # 3 is not a simple power of 2",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def iscube(a):\n    root = round(a ** (1/3))\n    return root ** 3 == a\n",
        "test": "assert iscube(1) == True",
        "num_ids": 1042,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    count = 0\n    for char in num:\n        hex_digit = int(char, 16)\n        if is_prime(hex_digit):\n            count += 1\n    return count",
        "test": "assert hex_key(\"0\") == 0",
        "num_ids": 1630,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # convert the decimal number to binary string\n    binary = bin(decimal)[2:]\n\n    # add the extra characters 'db' to the beginning and end of the binary string\n    binary = 'db' + binary + 'db'\n\n    return binary",
        "test": "assert decimal_to_binary(255) == \"db11111111db\", \"Incorrect output for decimal_to_binary(255)\"",
        "num_ids": 1499,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n",
        "test": "assert is_happy(\"abcd\"), True",
        "num_ids": 1144,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 3686,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if a number is prime, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"\n    return is_prime(len(string))\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # The number of n-digit positive integers that start or end with 1\n    count = 0\n    \n    # We can start with the numbers that start with 1 and add the count\n    # of all numbers that end with 1 to the count\n    count += 10**(n-1)  # 1 followed by n-1 zeros\n    count += 10**(n-2)  # 10 followed by n-2 zeros\n    count += 10**(n-3)  # 100 followed by n-3 zeros\n    # ...\n    count += 10**(n-9)  # 1 followed by n-9 zeros\n    \n    # We can subtract the count of numbers that end with 0 instead of 1\n    count -= 10**(n-1)  # 0 followed by n-1 zeros\n    count -= 10**(n-2)  # 00 followed by n-2 zeros\n    count -= 10**(n-3)  # 000 followed by n-3 zeros\n    # ...\n    count -= 10**(n-9)  # 0 followed by n-9 zeros\n    \n    # We can add the count of numbers that start with 01 instead of 1\n    count += 10**(n-1)  # 01 followed by n-1 zeros\n    count += 10**(n-2)  # 010 followed by n-2 zeros\n    count += 10**(n-3)  # 0100 followed by n-3 zeros\n    # ...\n    count += 10**(n-9)  # 01 followed by n-9 zeros\n    \n    # We can subtract the count of numbers that end with 0 instead of 01\n    count -= 10**(n-1)  # 00 followed by n-1 zeros\n    count -= 10**(n-2)  # 000 followed by n-2 zeros\n    count -= 10**(n-3)  # 0000 followed by n-3 zeros\n    # ...\n    count -= 10**(n-9)  # 00 followed by n-9 zeros\n    \n    # We can add the count of numbers that start with 001 instead of 01\n    count += 10**(n-1)  # 001 followed by n-1 zeros\n    count += 10**(n-2)  # 0010 followed by n-2 zeros\n    count += 10**(n-3)  # 00100 followed by n-3 zeros\n    # ...\n    count += 10**(n-9)  # 001 followed by n-9 zeros\n    \n    # We can subtract the count of numbers that end with 0 instead of 001\n    count -= 10**(n-1)  # 000 followed by n-1 zeros\n    count -= 10**(n-2)  # 0000 followed by n-2 zeros\n    count -= 10**(n-3)  # 00000 followed by n-3 zeros\n    # ...\n    count -= 10**(n-9)  # 000 followed by n-9 zeros\n    \n    # We can add the count of numbers that start with 0001 instead of 001\n    count += 10**(n-1)  # 0001 followed by n-1 zeros\n    count += 10**(n-2)  # 00010 followed by n-2 zeros\n    count += 10**(n-3)  # 000100 followed by n-3 zeros\n    # ...\n    count += 10",
        "test": "assert starts_one_ends(4) == 8100  # There are 8100 4-digit numbers that start or end with 1",
        "num_ids": 3861,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    \n    # Convert the integer to binary and split the binary string into digits\n    digits = [int(d) for d in bin(N)[2:]]\n    \n    # Calculate the sum of digits\n    total_sum = sum(digits)\n    \n    # Convert the sum to binary and return it as a string\n    return bin(total_sum)[2:]\n",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 1705,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n",
        "test": "assert add([4, 2, 6, 7]) == 2 ",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.  \n    Note: You should keep the order of words and blank spaces in the sentence.\n    \n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # Split the input string into words and store in a list\n    words = s.split()\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the word is not empty\n        if words[i] != '':\n            # Convert the word to a list of characters and sort it in ascending order based on ascii value\n            sorted_word = sorted(list(words[i]))\n            # Convert the sorted list of characters back to a string and replace the original word with it\n            words[i] = ''.join(sorted_word)\n    # Join the words back together into a string with spaces between them and return it\n    return ' '.join(words)",
        "test": "assert anti_shuffle('Hi') == 'Hi', 'Test case failed'",
        "num_ids": 2101,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result",
        "test": "assert get_row([",
        "num_ids": 1846,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting, \n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd, \n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \n    Note:\n    * don't change the given array.\n    \n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sorted_array = array.copy()\n    if sorted_array:\n        first_index_value = sorted_array[0]\n        last_index_value = sorted_array[-1]\n        sum_of_indices = first_index_value + last_index_value\n        if sum_of_indices % 2 == 0:\n            sorted_array.sort(reverse=True)\n        else:\n            sorted_array.sort()\n    return sorted_array\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 2267,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for char in s:\n        if char.lower() in alphabet:\n            index = alphabet.index(char.lower())\n            encrypted += alphabet[(index + 2*2) % 26].upper() if char.isupper() else alphabet[(index + 2*2) % 26]\n        else:\n            encrypted += char\n    return encrypted\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 1705,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # If the list is empty or has only one element, return None\n    if len(lst) < 2:\n        return None\n    \n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Find the 2nd smallest element\n    for i in range(len(lst)):\n        if lst[i] != lst[0]:\n            return lst[i]\n    \n    # If there is no 2nd smallest element, return None\n    return None\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1292,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_bored(S):\n    \"\"\"\n    Count the number of boredoms in a string of words.\n    A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    sentences = S.split('. ')\n    boredoms = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0].lower() == \"i\":\n            boredoms += 1\n    return boredoms",
        "test": "assert is_bored(\"Hello world\") == 0, \"Test case 1 failed\"",
        "num_ids": 1459,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n    \n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    # check if all numbers are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # check if one of the numbers is equal to the sum of the other two\n    if (x == y + z) or (y == z + x) or (z == x + y):\n        return True\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 1350,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    result = ''\n    for letter in message:\n        if letter in vowels:\n            index = (vowels.index(letter) + 2) % 5\n            result += vowels.pop(index)\n        else:\n            result += letter.swapcase()\n    return result\n",
        "test": "assert encode('python') == 'RQYN', 'Incorrect encoding for \"python\"'",
        "num_ids": 1890,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    max_prime = max(filter(is_prime, lst))\n    return sum_of_digits(max_prime)\n",
        "test": "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
        "num_ids": 3497,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_dict_case(d):\n    if not d:  # empty dictionary\n        return False\n    \n    first_key = next(iter(d))\n    first_key_is_string = isinstance(first_key, str)\n    if not first_key_is_string:\n        return False\n    \n    first_key_lower = first_key.islower()\n    first_key_upper = first_key.isupper()\n    \n    if first_key_lower and all(isinstance(k, str) and k.islower() for k in d):\n        return True\n    elif first_key_upper and all(isinstance(k, str) and k.isupper() for k in d):\n        return True\n    else:\n        return False\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1740,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n",
        "test": "assert count_up_to(20) == [2,3,5,7,11,13,17,19]",
        "num_ids": 1557,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits. Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    # Convert the input integers to strings\n    a = str(a)\n    b = str(b)\n    \n    # Get the last digit of each number\n    unit_a = int(a[-1])\n    unit_b = int(b[-1])\n    \n    # Multiply the last digits\n    product = unit_a * unit_b\n    \n    # Return the product of the last digits\n    return product\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 1503,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper('') == 0, 'Incorrect count'",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero. \n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Convert the given value to a float\n    value = float(value)\n\n    # Check if the value is equidistant from two integers\n    if value % 1 == 0.5:\n        # If the value is equidistant from two integers, round it away from zero\n        if value > 0:\n            return int(value + 0.5)\n        else:\n            return int(value - 0.5)\n    else:\n        # If the value is not equidistant from two integers, round it to the nearest integer\n        return int(round(value))\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1570,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. \n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(n-1):\n        if n%2==0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 1588,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Remove whitespace from beginning and end of string\n    s = s.strip()\n    # Split string into words using spaces or commas as separator\n    words = s.split(', ')\n    # If words are still separated by spaces instead of commas, split again\n    if len(words) == 1:\n        words = words[0].split()\n    return words\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1455,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    even_nums = []\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            even_nums.append(i)\n    if len(even_nums) == 0:\n        return -1\n    else:\n        return max(even_nums)\n",
        "test": "assert choose_num(12, 15) == 14",
        "num_ids": 1213,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1223,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        has_even = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even = True\n                break\n        if not has_even:\n            result.append(num)\n    result.sort()\n    return result",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1832,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    \n           -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n           -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n      \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n      \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n               -> sort arr -> [-1, 1, 55]\n               -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    \n    # Check if the array is empty\n    if not arr:\n        return []\n    \n    # Filter the array to only keep integers between 1 and 9 inclusive\n    arr = [x for x in arr if x >= 1 and x <= 9]\n    \n    # Sort the filtered array\n    arr.sort()\n    \n    # Reverse the sorted array\n    arr.reverse()\n    \n    # Replace each digit by its corresponding name from\n    # \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    name_list = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [name_list[x-1] for x in arr]\n    \n    return result\n",
        "test": "assert by_length([]) == []",
        "num_ids": 2329,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def factorial(n):\n    \"\"\"Calculates the factorial of n\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result",
        "test": "assert f(3) == [1, 2, 6]",
        "num_ids": 1369,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    # Initialize variables to keep track of even and odd palindromes\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    # Loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # Convert integer to a string to check if it's a palindrome\n        str_i = str(i)\n        reversed_str_i = str_i[::-1]\n\n        # Check if the reversed string is equal to the original string\n        if str_i == reversed_str_i:\n            # If the integer is even, increment even_palindromes count\n            if i % 2 == 0:\n                even_palindromes += 1\n            # If the integer is odd, increment odd_palindromes count\n            else:\n                odd_palindromes += 1\n\n    # Return tuple with even and odd palindromes counts\n    return (even_palindromes, odd_palindromes)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 2102,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                            be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n                            \n    \"\"\"\n    if not arr:\n        return True\n    max_num = max(arr)\n    max_index = arr.index(max_num)\n    sorted_list = sorted(arr)\n    sorted_index = sorted_list.index(max_num)\n    if max_index == sorted_index:\n        return True\n    else:\n        return False ",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False",
        "num_ids": 2646,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    # Check if all elements in lst1 are odd\n    for num in lst1:\n        if num % 2 == 0:\n            return \"YES\"\n    \n    # Check if lst2 has even elements that can be swapped with odd elements in lst1\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] % 2 != 0 and lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                if all(num % 2 == 0 for num in lst1):\n                    return \"YES\"\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n    \n    return \"NO\"",
        "test": "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\"",
        "num_ids": 3289,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    \n    # Split the input string into a list of characters\n    chars = test.split()\n    \n    # Create an empty dictionary to store the letter counts\n    counts = {}\n    \n    # Iterate over the list of characters and update the counts dictionary\n    for char in chars:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    \n    # Find the maximum count and return the corresponding dictionary\n    max_count = max(counts.values())\n    return {k: v for k, v in counts.items() if v == max_count}\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 2289,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Create a new string without characters in c\n    new_s = \"\".join([char for char in s if char not in c])\n    \n    # Check if the result string is palindrome\n    is_palindrome = new_s == new_s[::-1]\n    \n    return new_s, is_palindrome",
        "test": "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)",
        "num_ids": 1794,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for i, string in enumerate(lst):\n        count = 0\n        for digit in string:\n            if int(digit) % 2 != 0:\n                count += 1\n        output.append(f\"the number of odd elements {count}n the str{count}ng {i} of the {len(lst)}nput.\")\n    return output",
        "test": "assert odd_count(['123', \"456\", \"789\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",",
        "num_ids": 2231,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    n = len(nums)\n    if n == 1:\n        return nums[0]\n    min_sum = float('inf')\n    current_sum = nums[0]\n    for i in range(1, n):\n        current_sum = min(current_sum + nums[i], nums[i])\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n",
        "test": "assert minSubArraySum([1]) == 1",
        "num_ids": 1240,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    # Calculate the number of rows and columns in the grid\n    rows = len(grid)\n    cols = len(grid[0])\n\n    # Initialize a list to store the number of buckets used for each row\n    buckets_used = [0] * rows\n\n    # Initialize a list to store the total volume of water in each row\n    total_water = [0] * rows\n\n    # Iterate through each row and column\n    for i in range(rows):\n        for j in range(cols):\n            # If the current well has water, calculate the volume of water and add it to the total\n            if grid[i][j]:\n                total_water[i] += 1\n\n    # Iterate through each row, starting from the bottom\n    for i in range(rows - 1, -1, -1):\n        # Calculate the volume of water that can be extracted from the current row\n        water_to_extract = min(total_water[i], capacity)\n\n        # Calculate the number of buckets needed to extract the water\n        buckets_needed = math.ceil(water_to_extract / capacity)\n\n        # Increment the number of buckets used for the current row\n        buckets_used[i] += buckets_needed\n\n        # Calculate the volume of water that was extracted from the current row\n        extracted_water = buckets_needed * capacity\n\n        # Update the total volume of water in the remaining rows\n        for k in range(i + 1, rows):\n            total_water[k] -= extracted_water\n\n    # Return the total number of buckets used\n    return sum(buckets_used)\n",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
        "num_ids": 2080,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order. For similar\n    number of ones, sort based on decimal value.\n    \"\"\"\n\n    # Helper function to count the number of ones in a number\n    def count_ones(n):\n        count = 0\n        while n > 0:\n            if n % 2 == 1:\n                count += 1\n            n //= 2\n        return count\n\n    # Sort the array based on the number of ones in their binary representation\n    sorted_arr = sorted(arr, key=lambda x: (count_ones(x), x))\n\n    return sorted_arr\n",
        "test": "assert sort_array([1]) == [1]",
        "num_ids": 2135,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s. \n    If the string s is empty then the function should return an empty list. \n    Note: you may assume the input string contains only letters and spaces. \n    Examples: \n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"] \n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] \n    select_words(\"simple white space\", 2) ==> [] \n    select_words(\"Hello world\", 4) ==> [\"world\"] \n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"] \n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # create an empty list to store the selected words\n    selected_words = []\n    # iterate over each word in the list\n    for word in words:\n        # check if the word has exactly n consonants\n        consonants = 0\n        for letter in word:\n            if letter.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                consonants += 1\n        # if the word has exactly n consonants, add it to the list of selected words\n        if consonants == n:\n            selected_words.append(word)\n    return selected_words\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 2230,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    Given a word, find the closest vowel that stands between two \n    consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending don't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = \"AEIOUaeiou\"\n    \n    # Check if the word contains at least two consonants\n    if len(word) < 2 or word[0] in vowels or word[-1] in vowels:\n        return \"\"\n    \n    # Find the position of the last consonant\n    last_consonant = -1\n    for i in range(len(word)-1, -1, -1):\n        if word[i] not in vowels:\n            last_consonant = i\n            break\n    if last_consonant == -1:\n        return \"\"\n    \n    # Find the position of the second last consonant\n    second_last_consonant = -1\n    for i in range(last_consonant-1, -1, -1):\n        if word[i] not in vowels:\n            second_last_consonant = i\n            break\n    if second_last_consonant == -1:\n        return \"\"\n    \n    # Find the closest vowel between the two consonants\n    closest_vowel = \"\"\n    for i in range(last_consonant-1, second_last_consonant, -1):\n        if word[i] in vowels:\n            closest_vowel = word[i]\n            break\n    \n    return closest_vowel\n",
        "test": "assert get_closest_vowel(\"ab\") == \"\"",
        "num_ids": 2250,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only. \n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good. \n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n    \n    def is_good(s):\n        \"\"\"\n        Check if a string is good.\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n    \n    s1 = lst[0]\n    s2 = lst[1]\n    \n    # check if s1 is good\n    if is_good(s1):\n        # if s1 is good, check if s2 is good\n        if is_good(s2):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        # if s1 is not good, check if s2 is good and concatenate\n        if is_good(s2):\n            return 'Yes'\n        else:\n            # check if concatenating s1 and s2 results in a good string\n            s = s1 + s2\n            if is_good(s):\n                return 'Yes'\n            else:\n                return 'No'\n",
        "test": "assert match_parens(['()(', ')']) == 'Yes'",
        "num_ids": 1841,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n\n    arr.sort()\n    return arr[-k:]\n",
        "test": "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
        "num_ids": 1990,
        "indeed": true
    },
    {
        "number": 121,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through the list\n    for i in range(0, len(lst), 2):\n        # Check if the current element is odd\n        if lst[i] % 2 != 0:\n            # Add the current element to the sum\n            total += lst[i]\n    \n    # Return the final sum\n    return total\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n\n    # Iterate over the first k elements of arr\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # Add the current element to the total\n            total += arr[i]\n\n    # Return the total\n    return total\n",
        "test": "assert add_elements([1,2,3,4,5], 5) == 15",
        "num_ids": 1424,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_seq = []\n    current_num = n\n    while current_num != 1:\n        if current_num % 2 != 0:\n            collatz_seq.append(current_num)\n        current_num = current_num // 2 if current_num % 2 == 0 else 3 * current_num + 1\n    collatz_seq.append(1)\n    return sorted(collatz_seq)\n",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 2233,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n    valid_date('15-01-2012') => False\n    valid_date('04-0-2040') => False\n    valid_date('06-04-2020') => True\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # Step 1: Check if the date string is empty\n    if len(date) == 0:\n        return False\n\n    # Step 2: Check the format of the date string\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    # Step 3: Check if the month, day, and year are valid\n    if 1 <= month <= 12 and 1 <= day <= 31 and 1000 <= year <= 3000:\n        # Step 4: Check if the number of days is valid for the given month and year\n        days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            days_in_month[2] = 29\n\n        if 1 <= month <= len(days_in_month) and day <= days_in_month[month]:\n            return True\n\n    return False\n",
        "test": "assert valid_date('03-11-2000') == True, \"Error in valid_date function for date: '03-11-2000'\"",
        "num_ids": 3184,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def split_words(txt):\n    # Check if there are any whitespace characters\n    if ' ' in txt:\n        return txt.split()\n    # If there are no whitespace characters, check if there are any commas\n    elif ',' in txt:\n        return txt.split(',')\n    # If there are no whitespace characters or commas, count the number of lower-case letters with odd order in the alphabet\n    else:\n        count = 0\n        for letter in txt:\n            if letter.islower() and ord(letter) % 2 == 1:\n                count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    \n    # Check for duplicates\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                return False\n    \n    # Check for ascending order\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    return True ",
        "test": "assert is_sorted([1, 2, 3, 4, 5]) == True",
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime or not\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"Function to find the intersection of two intervals\"\"\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    product = 1\n    for sign in signs:\n        product *= sign\n    magnitude_sum = sum([abs(x) for x in arr])\n    return magnitude_sum * product ",
        "test": "assert prod_signs([]) == None",
        "num_ids": 1357,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def minPath(grid, k):\n    n = len(grid)\n    dist = [[float('inf')] * n for _ in range(n)]\n    visited = [[False] * n for _ in range(n)]\n    dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def find_min_dist():\n        min_dist = float('inf')\n        min_i, min_j = -1, -1\n        for i in range(n):\n            for j in range(n):\n                if not visited[i][j] and dist[i][j] < min_dist:\n                    min_dist = dist[i][j]\n                    min_i, min_j = i, j\n        return min_i, min_j\n\n    def update_dist(i, j):\n        for di, dj in dirs:\n            new_i, new_j = i + di, j + dj\n            if 0 <= new_i < n and 0 <= new_j < n and not visited[new_i][new_j]:\n                new_dist = dist[i][j] + grid[new_i][new_j]\n                if new_dist < dist[new_i][new_j]:\n                    dist[new_i][new_j] = new_dist\n\n    for i in range(n):\n        for j in range(n):\n            if dist[i][j] == float('inf'):\n                dist[i][j] = 0\n                visited[i][j] = True\n                update_dist(i, j)\n\n    for _ in range(k - 1):\n        i, j = find_min_dist()\n        visited[i][j] = True\n        update_dist(i, j)\n\n    lst = []\n    for i in range(n):\n        for j in range(n):\n            lst.append(grid[i][j])\n\n    lst.sort()\n    return lst[:k]\n",
        "test": "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
        "num_ids": 2491,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    tribonacci = [1, 3, 2]\n    \n    if n < 3:\n        return tribonacci[:n+1]\n    \n    for i in range(3, n+1):\n        tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n    \n    return tribonacci\n",
        "test": "assert tri(1) == [1, 3]",
        "num_ids": 2452,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits. \n    Return 0 if all digits are even. \n    For example: \n    digits(1)  == 1 \n    digits(4)  == 0 \n    digits(235) == 15 \n    \"\"\"\n    product = 1\n    even = True\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            even = False\n        n //= 10\n    if even:\n        return 0\n    else:\n        return product\n",
        "test": "assert digits(1) == 1",
        "num_ids": 841,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return True\n            stack.append(']')\n    return len(stack) == 0\n",
        "test": "assert is_nested('[[]]') == True",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first. Examples: For lst = [1,2,3] the output should be 14 For lst = [1,4,9] the output should be 98 For lst = [1,3,5,7] the output should be 84 For lst = [1.4,4.2,0] the output should be 29 For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    \n    # Round the numbers to the upper int(Ceiling) first\n    lst = [int(math.ceil(x)) for x in lst]\n    \n    # Compute the sum of the squared numbers\n    return sum([x**2 for x in lst])\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 1560,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    if len(txt) == 0:\n        return False\n    elif txt[-1].isalpha() and not any(txt[-2].isalpha() for char in txt[:-1] if char.isspace()):\n        return True\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False ",
        "num_ids": 1902,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 1134,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_smallest_integers(lst):\n    # Initialize variables to None\n    largest_negative = None\n    smallest_positive = None\n    \n    # Loop through each element in the list\n    for num in lst:\n        # If the number is negative and larger than the current largest negative, update largest_negative\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        # If the number is positive and smaller than the current smallest positive, update smallest_positive\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    \n    # Return the tuple of (largest_negative, smallest_positive)\n    return (largest_negative, smallest_positive)\n",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 1650,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type. \n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    try:\n        a = float(a)\n        b = float(b)\n    except ValueError:\n        a = str(a)\n        b = str(b)\n        \n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    \n    if n % 2 != 0:\n        return False\n    \n    for i in range(2, n//2 + 1):\n        for j in range(2, n//2 + 1):\n            for k in range(2, n//2 + 1):\n                for l in range(2, n//2 + 1):\n                    if i + j + k + l == n:\n                        return True\n    \n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 1385,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    \n    # initialize the variable to store the special factorial\n    special_factorial = 1\n    \n    # loop through the range from 1 to n\n    for i in range(1, n+1):\n        \n        # multiply the special factorial with i!\n        special_factorial *= i\n        \n    # return the final special factorial\n    return special_factorial\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    result = []\n    spaces_count = 0\n    for char in text:\n        if char == ' ':\n            spaces_count += 1\n            if spaces_count > 2:\n                result.append('-')\n                spaces_count = 0\n        else:\n            if spaces_count > 0:\n                result.append('_')\n                spaces_count = 0\n            result.append(char)\n    if spaces_count > 0:\n        result.append('_')\n    return ''.join(result)\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1763,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise. \n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if the file name has more than three digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Check if the substring before the dot starts with a latin alphapet letter\n    if not file_name.split('.')[0][0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    if file_name.split('.')[-1] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n\n    return 'No'\n",
        "test": "assert file_name_check(\"1example.dll\") == 'No'",
        "num_ids": 2467,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i] ** 3\n    \n    return sum\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1622,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        1 <= len(sentence) <= 100\n        sentence contains only letters\n    \"\"\"\n\n    words = sentence.split()  # splitting the sentence into words\n    prime_words = []  # list to store prime number words\n\n    # function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # iterating over words and checking if length is prime\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n\n    # joining the prime number words with space and returning the result\n    return \" \".join(prime_words)\n",
        "test": "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
        "num_ids": 1602,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def simplify(x, n):\n    # Convert fraction strings to tuples of numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the product of x and n\n    product = x_num * n_num\n    denominator = x_den * n_den\n\n    # Check if the product is a whole number\n    if product % denominator == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 1452,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n    return sorted_nums",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1717,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 == 1 and last_digit % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 1175,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n - 1):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert get_max_triples(8) == 14",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    i1, i2 = planets.index(planet1), planets.index(planet2)\n    if i1 == i2:\n        return ()\n    elif i1 < i2:\n        return tuple(planets[i1+1:i2])\n    else:\n        return tuple(planets[i2+1:i1])\n",
        "test": "assert bf(\"Mercury\", \"Pluto\") == ()",
        "num_ids": 1982,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sorted_list_sum(lst):\n    # Filter out words with odd length\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and then by alphabetical order\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1243,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    \n    # function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    # check if n is a prime number or not\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34, \"x_or_y(7, 34, 12) should return 34\"",
        "num_ids": 1401,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n\n    if not lst:\n        return 0\n    \n    sum_of_squares = 0\n    \n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 != 0:\n                sum_of_squares += num**2\n    \n    return sum_of_squares",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 1752,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(diff)\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1718,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions. \n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName. \n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list. \n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1). \n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    # Create a dictionary to store extension names and their strengths\n    extension_strengths = {}\n    for extension in extensions:\n        # Count the number of uppercase and lowercase letters in the extension\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        # Calculate the strength of the extension\n        strength = cap_count - sm_count\n        # Add the extension and its strength to the dictionary\n        extension_strengths[extension] = strength\n    \n    # Find the extension with the highest strength\n    strongest_extension = max(extension_strengths, key=extension_strengths.get)\n    \n    # Return the strongest extension as a string\n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension(\"AnotherClass\", ['ABC', 'xyz', 'def']) == 'AnotherClass.ABC'",
        "num_ids": 2957,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    def rotate_string(string, n):\n        return string[n:] + string[:n]\n\n    a_set = set(a)\n    b_set = set(b)\n\n    if len(a_set) < len(b_set):\n        return False\n\n    for i in range(len(b)):\n        rotated_b = rotate_string(b, i)\n        if rotated_b in a:\n            return True\n\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False, \"Test 1\"",
        "num_ids": 1470,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1073,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()\n",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 1829,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 1876,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_unique = 0\n    for word in words:\n        unique = len(set(word))\n        if unique > max_unique:\n            max_word = word\n            max_unique = unique\n        elif unique == max_unique and word < max_word:\n            max_word = word\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1189,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    You should return an array of [ total number of eaten carrots after your meals,\n                                        the number of carrots left after your meals ]\n    If there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    0 <= number <= 1000\n    0 <= need <= 1000\n    0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]",
        "test": "assert eat(1, 10, 10) == [11, 0]",
        "num_ids": 1972,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    expression = \"\"\n    for i in range(len(operand)):\n        if i == 0:\n            expression += str(operand[i])\n        else:\n            expression += operator[i-1] + str(operand[i])\n    return eval(expression)\n",
        "test": "assert do_algebra(['+'], [2]) == 2",
        "num_ids": 1957,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solve(s):\n    \"\"\"You are given a string s. \n    If s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is. \n    If the string contains no letters, reverse the string. \n    The function should return the resulted string. \n    Examples \n    solve(\"1234\") = \"4321\" \n    solve(\"ab\") = \"AB\" \n    solve(\"#a@C\") = \"#A@c\" \n    \"\"\"\n    new_s = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                new_s += i.upper()\n            else:\n                new_s += i.lower()\n        else:\n            new_s += i\n    if not any(i.isalpha() for i in s):\n        new_s = new_s[::-1]\n    return new_s\n",
        "test": "assert solve(\"\") == \"\"",
        "num_ids": 1171,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string. \n    If 'text' is an empty string, return None.\n    \n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 2247,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Create a list to store the even digits\n    even_digits = []\n\n    # Loop through the range of numbers from a to b\n    for num in range(a, b+1):\n\n        # Check if the number is even\n        if num % 2 == 0:\n\n            # Convert the number to a string and check if the last digit is even\n            if int(str(num)[-1]) % 2 == 0:\n\n                # Add the even digit to the list\n                even_digits.append(num)\n\n    # Return the list of even digits\n    return even_digits\n",
        "test": "assert generate_integers(4, 2) == []",
        "num_ids": 1667,
        "indeed": false
    }
]