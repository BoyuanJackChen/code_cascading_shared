[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold. \"\"\"\n    found = False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) < threshold:\n                found = True\n                break\n        if found:\n            break\n    return found\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those. Separate\n    groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    stack = []\n    result = []\n    curr_str = \"\"\n\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            curr_str += '('\n        elif char == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n                curr_str += ')'\n                if len(stack) == 0:\n                    result.append(curr_str)\n                    curr_str = \"\"\n    return result\n",
        "test": "assert separate_paren_groups('()') == ['()']",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n",
        "test": "assert truncate_number(3.5) == 0.5 ",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset. \n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0  # Assert that mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) returns 1.0",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i])\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    \n    results = []\n    \n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        \n        for char in group:\n            if char == '(':\n                level += 1\n                if level > max_level:\n                    max_level = level\n            elif char == ')':\n                level -= 1\n                \n        results.append(max_level)\n        \n    return results\n",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n\n    total_sum = 0\n    product = 1\n\n    for num in numbers:\n        total_sum += num\n        product *= num\n\n    return total_sum, product\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        max_list.append(max_num)\n    return max_list\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]  # check if rolling_max([1, 2, 3, 2, 3, 4, 2]) returns the correct list of rolling maximum elements",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix. \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:][::-1]\n    return string + string[::-1]\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert the strings to lists of characters\n    a_list = list(a)\n    b_list = list(b)\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Perform XOR operation on corresponding characters\n    for i in range(len(a_list)):\n        if a_list[i] == b_list[i]:\n            result.append('0')\n        else:\n            result.append('1')\n\n    # Convert the result list to a string and return it\n    return ''.join(result)\n",
        "test": "assert string_xor('010', '110') == '100', \"Incorrect result for string_xor('010', '110')\"",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\"\"\"\n    if not strings:\n        return None\n    longest_str = max(strings, key=len)\n    return longest_str\n",
        "test": "assert longest([]) == None",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)+1)]\n",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = ''\n    for i in range(n+1):\n        sequence += str(i) + ' '\n    return sequence.rstrip()\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n    # Convert the string to lowercase to ignore case\n    string = string.lower()\n\n    # Use a set to keep track of distinct characters\n    distinct_chars = set()\n\n    for char in string:\n        distinct_chars.add(char)\n\n    # Return the length of the set as the number of distinct characters\n    return len(distinct_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3, \"Incorrect count for 'xyzXYZ'\"",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n    parsed_notes = []\n    for note in music_string.split():\n        parsed_notes.append(note_dict[note])\n    return parsed_notes",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1766,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring) - 1\n        i += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Convert the string to a list of numbers\n    numbers_list = numbers.split()\n    # Create a dictionary to map each number to its corresponding integer\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\n                 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    # Sort the numbers list using the key parameter of the sorted() function and the num_dict dictionary\n    sorted_numbers = sorted(numbers_list, key=lambda x: num_dict[x])\n    # Convert the sorted list of numbers back to a string and return it\n    return ' '.join(sorted_numbers)\n",
        "test": "assert sort_numbers(\"one two three four five\") == \"one two three four five\"",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two numbers.\")\n    min_diff = float('inf')\n    min1, min2 = None, None\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                min1 = numbers[i]\n                min2 = numbers[j]\n    return (min1, min2)\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 1061,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must contain at least two elements\")\n    min_value = min(numbers)\n    max_value = max(numbers)\n    if min_value == max_value:\n        raise ValueError(\"Input list must contain different values\")\n    scaled_numbers = [(num - min_value) / (max_value - min_value) for num in numbers]\n    return scaled_numbers\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0, \"strlen should return 0 for empty string\"",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest. \n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    # Initialize an empty list to store factors\n    factors = []\n    # Start with the smallest possible factor, 2\n    factor = 2\n    # Keep dividing n by factor until it is no longer divisible\n    while n > 1:\n        # If n is divisible by factor, add it to the list of factors\n        if n % factor == 0:\n            factors.append(factor)\n            n /= factor\n        else:\n            # If n is not divisible by factor, try the next factor\n            factor += 1\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "test": "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 326,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix. \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(101) == True",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Morever, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    if len(xs) % 2 != 0 or xs[0] == 0:\n        raise ValueError(\"Invalid input list\")\n\n    max_coeff = max(xs[1:])\n    xs = [x / max_coeff for x in xs]\n\n    x = 0\n    while abs(poly(xs, x)) > 1e-10:\n        x += 1\n\n    return x\n",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0 ",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(sorted(l[i:i+3]))\n    return l_prime\n",
        "test": "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5] ",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            if '7' in str_i:\n                count += 1\n    return count\n",
        "test": "assert fizz_buzz(50) == 0, \"Test 1 failed\"",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    sorted_even = sorted([i for i in l if i % 2 == 0])\n    l_odd = [i for i in l if i % 2 == 1]\n    l_even = [i for i in sorted_even if i % 2 == 0]\n    l_sorted = l_odd + l_even\n    return l_sorted\n",
        "test": "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"hello\")) == \"hello\" ",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    is_prime returns True if the given number is prime, else False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    for i in range(2, n + 1):\n        if is_prime(fib[i]):\n            return fib[i]\n",
        "test": "assert prime_fib(2) == 3",
        "num_ids": 1046,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Check if the list has at least three elements\n    if len(l) < 3:\n        return False\n\n    # Sort the list in ascending order\n    l.sort()\n\n    # Iterate over all possible combinations of three elements in the list\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                # Check if the three elements sum to zero\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n\n    # If no triplet is found, return False\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line. \n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left. \n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    \n    # Calculate the distance between the two sets of cars\n    distance = 2*n\n    \n    # Calculate the number of collisions\n    collisions = (n-1)*(n-2)//2\n    \n    return collisions\n",
        "test": "assert car_race_collision(1) == 0",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x+1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pairs_sum_to_zero(l):\n    freq_dict = {}\n    for i in l:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    \n    for i in freq_dict:\n        if -i in freq_dict and i != -i:\n            return True\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Convert x to string for ease of manipulation\n    x_str = str(x)\n\n    # Iterate through the digits of x in reverse order\n    for i in range(len(x_str)):\n        # Convert the current digit to the desired base\n        digit = int(x_str[i])\n        converted = \"\"\n        while digit > 0:\n            converted = str(digit % base) + converted\n            digit //= base\n        # Add the converted digit to the result string\n        result = converted + result\n\n    return result\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 45,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(3, 4) == 6.0  # Test case 1",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 0\n    elif n == 3:\n        return 2\n    else:\n        prev3 = 0\n        prev2 = 0\n        prev1 = 2\n        for i in range(4, n + 1):\n            curr = prev3 + prev2 + prev1 + 0\n            prev3, prev2, prev1 = prev2, prev1, curr\n        return curr ",
        "test": "assert fib4(0) == 0",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    \n    # Calculate 2^n\n    res = 1\n    for _ in range(n):\n        res *= 2\n        \n    # Return the result modulo p\n    return res % p\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5, \"Test 1 failed\"",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert both strings to sets to remove duplicates\n    set0 = set(s0)\n    set1 = set(s1)\n\n    # Check if the sets have the same elements\n    return set0 == set1\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(10) == 55",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        elif b == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"<>\") == True",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    n = len(l)\n    if n == 1:\n        return True\n    elif n == 2:\n        return l[0] < l[1] or l[0] > l[1]\n    else:\n        inc = True\n        dec = True\n        for i in range(1, n):\n            if l[i-1] < l[i]:\n                inc = False\n            elif l[i-1] > l[i]:\n                dec = False\n        return inc or dec\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \n    \"\"\"\n    # Using set intersection to get common elements\n    common_elements = set(l1) & set(l2)\n    # Sorting the common elements\n    return sorted(list(common_elements))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            if is_prime(i):\n                return i\n    return None\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_to_n(n: int):\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        elif b == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) < 2:\n        return xs\n    derivatives = []\n    for i in range(1, len(xs)):\n        derivatives.append(i * xs[i])\n    return derivatives\n",
        "test": "assert derivative([1, 2, 3]) == [2, 6]",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def vowels_count(s):\n    \"\"\"\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    \"\"\"\n    num_digits = len(str(x))\n    if shift > num_digits:\n        return str(x)[::-1]\n    else:\n        shifted_digits = str(x)[-shift:] + str(x)[:-shift]\n        return shifted_digits\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def fruit_distribution(s, n):\n    # split the string into a list of words\n    words = s.split()\n\n    # get the number of apples and oranges\n    apples = int(words[words.index(\"apples\") - 1])\n    oranges = int(words[words.index(\"oranges\") - 1])\n\n    # calculate the number of mango fruits\n    mangoes = n - (apples + oranges)\n\n    return mangoes",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8, \"Test 1 failed\"",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = -1\n    for index, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even:\n            smallest_even = node\n            smallest_index = index\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, smallest_index]",
        "test": "assert pluck([4, 2, 3]) == [2, 1]",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def search(lst):\n    # create a dictionary to store the frequency of each integer\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # find the greatest integer greater than zero that has a frequency >= itself\n    max_num = 0\n    for num in freq:\n        if num > 0 and freq[num] >= num:\n            max_num = max(max_num, num)\n    \n    # return the result\n    return max_num if max_num > 0 else -1\n",
        "test": "assert search([4, 1, 2, 2, 3, 1]) == 2",
        "num_ids": 942,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def strange_sort_list(lst):\n    if not lst:  # empty list\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst.remove(min_val)\n        lst.remove(max_val)\n        return [min_val, max_val] + strange_sort_list(lst)\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the three sides form a valid triangle\n    if a + b > c and b + c > a and c + a > b:\n        # Calculate the area of the triangle using Heron's formula\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def will_it_fly(q,w):\n    if sum(q) <= w:\n        q.sort()\n        if q == q[::-1]:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False  # 1+2 is less than the maximum possible weight, but it's unbalanced.",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def smallest_change(arr):\n    n = len(arr)\n    # find the middle index\n    mid = n // 2\n    \n    # initialize the number of changes required\n    changes = 0\n    \n    # iterate through the array\n    i = 0\n    while i < mid:\n        # compare the elements on both sides of the middle index\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n        i += 1\n    \n    # if the array length is odd, check the element at the middle index\n    if n % 2 != 0 and arr[mid] != arr[n-mid-1]:\n        changes += 1\n    \n    return changes",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 1072,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n    \n    if the two lists have the same number of chars, return the first list.\n    \n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    total_chars = sum([len(x) for x in lst1])\n    other_total_chars = sum([len(x) for x in lst2])\n    if total_chars > other_total_chars:\n        return lst1\n    elif total_chars < other_total_chars:\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Checks if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_multiply_prime(a):\n    \"\"\"Checks if a number is the multiplication of 3 prime numbers\"\"\"\n    if a >= 100:\n        return False\n    primes = []\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            primes.append(i)\n            if len(primes) == 3:\n                return True\n    return False\n",
        "test": "assert is_multiply_prime(59) == False",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    # check if x is a simple power of n\n    if int(x) == n ** int(x / n):\n        return True\n    else:\n        return False\n",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a == int(round(a ** (1/3))) ** 3\n",
        "test": "assert iscube(1) == True",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\"\"\"\n\n    hex_primes = {'2', '3', '5', '7', 'B', 'D'}\n    hex_numbers = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    num_primes = 0\n    for hex_digit in num:\n        if hex_digit in hex_primes:\n            num_primes += 1\n    return num_primes\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 1352,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # Convert decimal to binary and store in a list\n    binary = []\n    while decimal > 0:\n        binary.append(decimal % 2)\n        decimal //= 2\n\n    # Reverse the list to get the correct order\n    binary.reverse()\n\n    # Convert list to string\n    binary_str = ''.join(str(x) for x in binary)\n\n    # Add extra characters to string\n    binary_str = 'db' + binary_str + 'db'\n\n    return binary_str",
        "test": "assert decimal_to_binary(15) == 'db1111db'",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    prev_chars = set()\n    for i in range(len(s) - 2):\n        if s[i:i+3] in prev_chars:\n            return False\n        prev_chars.add(s[i:i+3])\n\n    return True",
        "test": "assert is_happy(\"abcd\"), True",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n            GPA       |       Letter grade\n                4.0           A+\n            > 3.7           A  \n            > 3.3           A- \n            > 3.0           B+\n            > 2.7           B  \n            > 2.3           B-\n            > 2.0           C+\n            > 1.7           C\n            > 1.3           C-\n            > 1.0           D+  \n            > 0.7           D  \n            > 0.0           D-\n                0.0           E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-'] ",
        "num_ids": 2107,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    \n    length = len(string)\n    \n    # Check if length is a prime number\n    if length == 1:\n        return False\n    \n    for i in range(2, length):\n        if length % i == 0:\n            return False\n        \n    return True\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Count the number of n-digit positive integers that start with 1\n    count_start_one = 10**(n-1)\n    # Count the number of n-digit positive integers that end with 1\n    count_end_one = 10**(n-1)\n    # Count the number of n-digit positive integers that start or end with 1\n    count_one_digit = count_start_one + count_end_one\n    # Count the number of n-digit positive integers that start or end with 2\n    count_two_digit = 10**(n-1) * 9\n    # Count the number of n-digit positive integers that start or end with 3\n    count_three_digit = 10**(n-1) * 9 * 8\n    # Count the number of n-digit positive integers that start or end with 4\n    count_four_digit = 10**(n-1) * 9 * 8 * 7\n    # Count the number of n-digit positive integers that start or end with 5\n    count_five_digit = 10**(n-1) * 9 * 8 * 7 * 6\n    # Count the number of n-digit positive integers that start or end with 6\n    count_six_digit = 10**(n-1) * 9 * 8 * 7 * 6 * 5\n    # Count the number of n-digit positive integers that start or end with 7\n    count_seven_digit = 10**(n-1) * 9 * 8 * 7 * 6 * 5 * 4\n    # Count the number of n-digit positive integers that start or end with 8\n    count_eight_digit = 10**(n-1) * 9 * 8 * 7 * 6 * 5 * 4 * 3\n    # Count the number of n-digit positive integers that start or end with 9\n    count_nine_digit = 10**(n-1) * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2\n    # Count the total number of n-digit positive integers that start or end with 1, 2, ..., 9\n    count_all_digits = count_one_digit + count_two_digit + count_three_digit + count_four_digit + count_five_digit + count_six_digit + count_seven_digit + count_eight_digit + count_nine_digit\n    # Return the total count of n-digit positive integers that start or end with 1\n    return count_all_digits\n",
        "test": "assert starts_one_ends(2) == 91, \"Incorrect count for n=2\"",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n\n    # Convert N to binary\n    binary_N = bin(N)[2:]\n\n    # Calculate the sum of digits in binary\n    binary_sum = 0\n    for digit in binary_N:\n        binary_sum += int(digit)\n\n    # Convert the sum back to binary\n    binary_sum = bin(binary_sum)[2:]\n\n    return binary_sum",
        "test": "assert solve(150) == \"110\"",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    \n    return total\n",
        "test": "assert add([4, 2, 6, 7]) == 2  # Test case 1",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. \n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    words = s.split()  # Split the input string into a list of words\n    result = []  # Initialize an empty list to store the ordered words\n    for word in words:\n        if word.isalpha():  # Check if the word is a letter word\n            # Sort the characters of the word and join them to form a new word\n            ordered_word = ''.join(sorted(word))\n        else:  # If the word is not a letter word, keep it as it is\n            ordered_word = word\n        result.append(ordered_word)  # Add the ordered word to the result list\n    return ' '.join(result)  # Join the result list into a string and return it\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n    for i, row in enumerate(lst):\n        if x in row:\n            col = row.index(x)\n            coordinates.append((i, col))\n    coordinates.sort()\n    return coordinates\n",
        "test": "assert get_row([",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd, \n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    if not array:\n        return []\n\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    total_sum = first_index_value + last_index_value\n\n    if total_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 1020,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places. \n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted_str = \"\"\n    for char in s:\n        if char.lower() in alphabet:\n            index = (alphabet.index(char.lower()) + 4) % 26\n            encrypted_str += alphabet[index]\n        else:\n            encrypted_str += char\n    return encrypted_str\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    if lst[1] == lst[0]:\n        return None\n    else:\n        return lst[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    \n    # Split the string into sentences\n    sentences = S.split(\".\") + S.split(\"?\") + S.split(\"!\")\n    \n    # Initialize count of boredom\n    bored = 0\n    \n    # Iterate over sentences\n    for sentence in sentences:\n        # Split the sentence into words\n        words = sentence.split()\n        \n        # Check if sentence starts with \"I\"\n        if len(words) > 0 and words[0] == \"I\":\n            bored += 1\n    \n    return bored\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n    \n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \n    '''\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    \n    if x == y + z or y == z + x or z == x + y:\n        return True\n    \n    return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    vowels = {'a': 'p', 'e': 'q', 'i': 'r', 'o': 's', 'u': 't'}\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += vowels[char.lower()]\n            else:\n                if char.isupper():\n                    encoded_message += chr((ord(char)-65+2)%26+65)\n                else:\n                    encoded_message += chr((ord(char)-97+2)%26+97)\n        else:\n            encoded_message += char\n    \n    return encoded_message\n",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    largest_prime = max(filter(is_prime, lst))\n    return sum_of_digits(largest_prime)\n",
        "test": "assert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25",
        "num_ids": 1826,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False. \n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    \n    key_case = None\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        \n        if key_case is None:\n            key_case = key.islower()\n        elif key_case != key.islower():\n            return False\n    \n    return True\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_up_to(n):\n    if n <= 0:\n        return []\n\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n\n    return primes\n",
        "test": "assert count_up_to(5) == [2,3], \"Error: count_up_to(5) should return [2,3]\"",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\n    # Convert the integers to strings to access their unit digits\n    a_str = str(a)\n    b_str = str(b)\n\n    # Extract the unit digits using modulus operator\n    a_unit = int(a_str[-1])\n    b_unit = int(b_str[-1])\n\n    # Multiply the unit digits and return the product\n    return a_unit * b_unit\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # convert the string to float\n    num = float(value)\n\n    # round it to the nearest integer\n    rounded_num = round(num)\n\n    # if the rounded number is equidistant from two integers, round it away from zero\n    if abs(num - rounded_num) == 0.5:\n        return int(num // 1)\n\n    # otherwise, return the rounded number\n    return int(rounded_num)\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    \n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            pile.append(pile[i-1] + 2)\n        else:\n            pile.append(pile[i-1] + 2*i + 1)\n            \n    return pile\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def words_string(s):\n    # Replace spaces with commas and split the string by commas\n    words = s.replace(' ', ',').split(',')\n    # Remove any leading or trailing spaces from each word\n    words = [word.strip() for word in words]\n    # Remove any empty strings that may have been created by splitting\n    words = [word for word in words if word]\n    return words\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_num = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            if i > max_num:\n                max_num = i\n    return max_num\n",
        "test": "assert choose_num(12, 15) == 14 # Test case 1",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit. \n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # function to check if a number has any even digit\n    def has_even_digit(num):\n        while num > 0:\n            if num % 10 == 0:\n                return True\n            num //= 10\n        return False\n    \n    # filtering out elements that have even digits\n    filtered_list = list(filter(lambda num: not has_even_digit(num), x))\n    \n    # sorting the filtered list in increasing order\n    filtered_list.sort()\n    \n    return filtered_list\n",
        "test": "assert unique_digits([152, 323, 1422, 10]) == []",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def by_length(arr):\n    # Sort the array and reverse it\n    arr = sorted(arr)[::-1]\n\n    # Initialize an empty list to store the names\n    names = []\n\n    # Loop through the array\n    for num in arr:\n        # Check if the number is between 1 and 9 inclusive\n        if 1 <= num <= 9:\n            # Append the corresponding name to the list\n            names.append([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num-1])\n\n    return names\n",
        "test": "assert by_length([]) == []",
        "num_ids": 1132,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter, \n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even \n    or the sum of numbers from 1 to i otherwise. \n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). \n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\n\ndef factorial(n):\n    \"\"\"\n    Helper function to calculate factorial of n\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n",
        "test": "assert f(5) == [1, 2, 6, 24, 15]  # First line of code to test the correctness of f(n) function. ",
        "num_ids": 754,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        j = str(i)\n        if j == j[::-1] and i % 2 == 0:\n            even_count += 1\n        elif j == j[::-1] and i % 2 != 0:\n            odd_count += 1\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 922,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                    array by performing any number of right shift operations.\n                    \n    \"\"\"\n    \n    if not arr:\n        return True\n\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n\n    return True",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers, \n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers. \n    There is no limit on the number of exchanged elements between lst1 and lst2. \n    If it is possible to exchange elements between the lst1 and lst2 to make \n    all the elements of lst1 to be even, return \"YES\". \n    Otherwise, return \"NO\". \n    For example: \n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" \n    It is assumed that the input lists will be non-empty. \n    \"\"\"\n\n    # Initialize variables to keep track of odd and even elements\n    odd_elements = 0\n    even_elements = 0\n\n    # Count the number of odd and even elements in lst1 and lst2\n    for num in lst1:\n        if num % 2 == 0:\n            even_elements += 1\n        else:\n            odd_elements += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_elements += 1\n        else:\n            odd_elements += 1\n\n    # If there are more odd elements in lst1 than in lst2, it's not possible to exchange them to make lst1 even\n    if odd_elements > even_elements:\n        return \"NO\"\n\n    # Otherwise, it's possible to exchange elements between lst1 and lst2 to make lst1 even\n    return \"YES\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 1453,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    if not test:\n        return {}\n    \n    test = test.split()\n    letter_count = {}\n    \n    for letter in test:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    \n    max_count = max(letter_count.values())\n    result = {}\n    \n    for letter in letter_count:\n        if letter_count[letter] == max_count:\n            result[letter] = letter_count[letter]\n    \n    return result\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Remove characters from s that are in c\n    for char in c:\n        s = s.replace(char, \"\")\n\n    # Check if the result string is palindrome\n    is_palindrome = (s == s[::-1])\n\n    # Return the result string and the check result\n    return s, is_palindrome\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False), \"Test 1 failed\"",
        "num_ids": 927,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])  # doctest: +SKIP\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])  # doctest: +SKIP\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    result = []\n    for i, s in enumerate(lst):\n        count = 0\n        for d in s:\n            if int(d) % 2 == 1:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(i+1) + \"ng \" + str(i+1) + \" of the \" + str(i+1) + \"nput.\")\n    return result\n",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"] ",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum\n",
        "test": "assert minSubArraySum([1, 2, 3, 4, 1]) == 1",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_fill(grid, capacity):\n    import math\n    n = len(grid)\n    m = len(grid[0])\n    bucket_capacity = capacity\n\n    # Initialize variables\n    count = 0\n    filled_wells = 0\n    used_buckets = 0\n    water_in_buckets = 0\n\n    # Iterate through the grid\n    for row in grid:\n        filled_wells += row.count(1)\n\n    while filled_wells > 0:\n        for row in grid:\n            # Check if there is any water in the row\n            if 1 in row:\n                # Find the index of the first 1 in the row\n                water_index = row.index(1)\n\n                # Calculate the number of buckets needed to fill the well\n                buckets_needed = math.ceil(row.count(1) / bucket_capacity)\n\n                # Update the number of used buckets and water in the buckets\n                used_buckets += buckets_needed\n                water_in_buckets += buckets_needed * bucket_capacity\n\n                # Update the count\n                count += buckets_needed\n\n                # Fill the well with water\n                for i in range(water_index, m):\n                    if grid[row][i] == 1:\n                        grid[row][i] = 0\n                        filled_wells -= 1\n                        if filled_wells == 0:\n                            break\n\n                # Check if the buckets are full\n                if water_in_buckets >= bucket_capacity:\n                    water_in_buckets = 0\n                    used_buckets = 0\n\n    return count ",
        "test": "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order. \n    For similar number of ones, sort based on decimal value.\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 860,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def select_words(s, n):\n    # Split the string into a list of words\n    words = s.split()\n\n    # Initialize an empty list to store selected words\n    selected_words = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = 0\n        for char in word:\n            if char.lower() not in \"aeiou\":\n                consonant_count += 1\n\n        # If the word has exactly n consonants, add it to the list of selected words\n        if consonant_count == n:\n            selected_words.append(word)\n\n    # Return the list of selected words\n    return selected_words",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 891,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.  \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = \"aeiou\"\n    word = word.lower()\n    \n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    \n    return \"\"\n",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_good(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return len(stack) == 0\n\n    return 'Yes' if is_good(lst[0] + lst[1]) else 'No'\n",
        "test": "assert match_parens(['()(', ')']) == 'Yes'",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\n\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr. \n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    heap = []\n    for num in arr:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            heapq.heappushpop(heap, num)\n    return sorted(heap)\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 121,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 1:\n            total += lst[i]\n    return total\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize a variable to store the sum of elements with at most two digits\n    sum = 0\n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Check if the element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # Add the element to the sum variable\n            sum += arr[i]\n    # Return the sum of elements with at most two digits\n    return sum\n",
        "test": "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_numbers = []\n    current_number = n\n    while current_number > 1:\n        if current_number % 2 != 0:\n            odd_numbers.append(current_number)\n        current_number = 3 * current_number + 1 if current_number % 2 != 0 else current_number // 2\n    odd_numbers.append(1)\n    return sorted(odd_numbers)",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n    valid_date('15-01-2012') => False\n    valid_date('04-0-2040') => False\n    valid_date('06-04-2020') => True\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    import re\n\n    pattern = r'^(?P<month>\\d{2})-(?P<day>\\d{2})-(?P<year>\\d{4})$'\n\n    match = re.match(pattern, date)\n\n    if not match:\n        return False\n\n    month = int(match.group('month'))\n    day = int(match.group('day'))\n    year = int(match.group('year'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n    return True\n",
        "test": "assert valid_date('03-11-2000') == True, \"Test 1 failed\"",
        "num_ids": 1638,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in range(26):\n            if chr(i + ord('a')) in txt.lower():\n                count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    elif len(lst) > 1 and lst[0] > lst[1]:\n        return False\n    else:\n        return is_sorted(lst[1:])\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    prod = 1\n    for sign in signs:\n        prod *= sign\n\n    return sum([abs(x) * prod for x in arr])\n",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def minPath(grid, k):\n    N = len(grid)\n    dp = [[0] * N for _ in range(N)]\n    \n    # Base cases\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = 1\n            elif i == N - 1 and j == N - 1:\n                dp[i][j] = k\n            else:\n                dp[i][j] = float('inf')\n    \n    # Fill in dp array\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + 1 + grid[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + 1 + grid[i][j])\n            if i < N - 1:\n                dp[i][j] = min(dp[i][j], dp[i+1][j] + 1 + grid[i][j])\n            if j < N - 1:\n                dp[i][j] = min(dp[i][j], dp[i][j+1] + 1 + grid[i][j])\n            \n    # Backtrack to get minimum path\n    path = []\n    i = N - 1\n    j = N - 1\n    while i >= 0 and j >= 0:\n        if dp[i][j] == dp[i+1][j] + 1 + grid[i][j]:\n            i -= 1\n        elif dp[i][j] == dp[i][j+1] + 1 + grid[i][j]:\n            j -= 1\n        else:\n            path.append(grid[i][j])\n            i -= 1\n            j -= 1\n    path.reverse()\n    return path\n",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 1526,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    else:\n        seq = [1, 3, 2, 8]\n        for i in range(3, n+1):\n            seq.append(seq[-1] + seq[-2] + seq[-3])\n        return seq\n",
        "test": "assert tri(2) == [1, 3, 2, 8]  # Test case 1",
        "num_ids": 1215,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    is_odd = False\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n            is_odd = True\n    return product if is_odd else 0\n",
        "test": "assert digits(1) == 1",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return len(stack) != 0\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    \n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Iterate through the list\n    for num in lst:\n        # Round the number to the upper int(Ceiling)\n        rounded_num = int(num + 0.5)\n        # Calculate the square of the rounded number\n        square = rounded_num ** 2\n        # Add the square to the total sum\n        total_sum += square\n    \n    # Return the total sum\n    return total_sum\n",
        "test": "assert sum_squares([1, 2, 3]) == 14",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    if len(txt) == 0:\n        return False\n    else:\n        last_char = txt[-1]\n        words = txt.split()\n        if last_char.isalpha():\n            if len(words) == 1:\n                return True\n            else:\n                last_word = words[-1]\n                if len(last_word) == 1 and last_word[-1] == last_char:\n                    return True\n                else:\n                    return False\n        else:\n            return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    \n    # Initialize the largest index variable to -1\n    largest_index = -1\n    \n    # Loop through the array and find the largest index where the element is not greater than or equal to the element immediately preceding it\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            largest_index = i\n        else:\n            break\n    \n    # Return the largest index found or -1 if no such element exists\n    return largest_index\n",
        "test": "assert can_arrange([1,2,3]) == -1  # Test case 2",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_smallest_integers(lst):\n    # initialize largest negative and smallest positive to None\n    largest_negative = None\n    smallest_positive = None\n    \n    # loop through the list\n    for num in lst:\n        # check if the number is negative\n        if num < 0:\n            # if so, compare with current largest negative\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        # check if the number is positive\n        elif num > 0:\n            # if so, compare with current smallest positive\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n                \n    # return the tuple of largest negative and smallest positive\n    return (largest_negative, smallest_positive)\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 922,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type. \n    Returns None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    # convert strings to floats, if possible\n    if isinstance(a, str):\n        try:\n            a = float(a.replace(\",\", \".\"))\n        except ValueError:\n            return None\n    if isinstance(b, str):\n        try:\n            b = float(b.replace(\",\", \".\"))\n        except ValueError:\n            return None\n    \n    # compare values and return the larger one\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Check if n is even and greater than 8\n    if n % 2 != 0 or n <= 8:\n        return False\n    \n    # Check if n can be written as the sum of two even numbers\n    # If not, return False\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            # Check if i can be written as the sum of two even numbers\n            for j in range(2, i):\n                if i % j == 0:\n                    # Check if the remaining number (i - j) can be written as the sum of two even numbers\n                    for k in range(2, (i - j)//2 + 1):\n                        if (i - j) % k == 0:\n                            # Check if the remaining number (k - (i-j)) can be written as the sum of two even numbers\n                            for l in range(2, (k - (i-j))//2 + 1):\n                                if (k - (i-j)) % l == 0:\n                                    return True\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace all consecutive spaces with -\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n\n    return text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def file_name_check(file_name):\n    \"\"\"\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    import re\n    \n    # Check for more than three digits\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    \n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Check if the substring before the dot starts with a letter from the latin alphapet\n    if not re.match(r'^[a-zA-Z]+', file_name.split('.')[0]):\n        return 'No'\n    \n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all the conditions are met, return 'Yes'\n    return 'Yes'\n",
        "test": "assert file_name_check(\"1example.dll\") == \"No\"",
        "num_ids": 1505,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 815,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    # Convert fractions to float values\n    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n    x_float = float(x_numerator) / float(x_denominator)\n    n_float = float(n_numerator) / float(n_denominator)\n\n    # Calculate the product of x and n\n    product = x_float * n_float\n\n    # Check if the product is a whole number\n    if product.is_integer():\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 746,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(num):\n    \"\"\"\n    Returns the sum of digits of the given number.\n    \"\"\"\n    return sum(int(digit) for digit in str(abs(num)))\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1  # Test case 1",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(1, n-1):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "test": "assert get_max_triples(6) == 0",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bf(planet1, planet2):\n    planets = [\n        (\"Mercury\", 1),\n        (\"Venus\", 2),\n        (\"Earth\", 3),\n        (\"Mars\", 4),\n        (\"Jupiter\", 5),\n        (\"Saturn\", 6),\n        (\"Uranus\", 7),\n        (\"Neptune\", 8),\n    ]\n\n    if planet1 not in [p[0] for p in planets] or planet2 not in [p[0] for p in planets]:\n        return ()\n\n    for i in range(len(planets)):\n        if planets[i][0] == planet1:\n            start_idx = i\n            break\n\n    for i in range(len(planets)):\n        if planets[i][0] == planet2:\n            end_idx = i\n            break\n\n    result = [p for p in planets[start_idx+1:end_idx] if p[1] > planets[start_idx][1] and p[1] < planets[end_idx][1]]\n    result.sort(key=lambda p: p[1])\n    return tuple(p[0] for p in result)\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. \n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule. \n    If two words have the same length, sort the list alphabetically. \n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # filter out odd length words from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # sort the list by length of each word and alphabetically if lengths are same\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    \n    # Check if n is prime or not\n    is_prime = True\n    if n < 2:\n        is_prime = False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                is_prime = False\n                break\n    \n    # Return the value of x if n is prime, otherwise return the value of y\n    if is_prime:\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 753,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n   \n    If the input list is empty, return 0.\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            total += num ** 2\n    \n    return total\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        diff = abs(guess[i] - game[i])\n        if diff == 0:\n            result.append(0)\n        else:\n            result.append(diff)\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM.  \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension  \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    # Get the strength of each extension\n    extension_strengths = []\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        extension_strengths.append(cap - sm)\n\n    # Find the strongest extension\n    strongest_extension = extensions[0]\n    strongest_strength = extension_strengths[0]\n    for i in range(1, len(extensions)):\n        if extension_strengths[i] > strongest_strength:\n            strongest_extension = extensions[i]\n            strongest_strength = extension_strengths[i]\n\n    # Return the result in the specified format\n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 1514,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n\n    # Convert the second word to a set of rotations\n    rotations = set()\n    b_len = len(b)\n    for i in range(b_len):\n        rotations.add(b[i:] + b[:i])\n\n    # Check if any rotation is a substring of the first word\n    return any(rotation in a for rotation in rotations)\n",
        "test": "assert cycpattern_check(\"hello\", \"ell\") == True ",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\"\"\"\n    count_even = 0\n    count_odd = 0\n    num = abs(num)\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    def to_roman(num, roman_numerals):\n        if num == 0:\n            return ''\n        for value, numeral in sorted(roman_numerals.items(), reverse=True):\n            if num >= value:\n                return numeral + to_roman(num - value, roman_numerals)\n        raise ValueError('Invalid input')\n\n    roman_numeral = to_roman(number, roman_numerals)\n    return roman_numeral.lower()",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    # If the area is zero, the triangle is degenerate\n    if area == 0:\n        return False\n    # Calculate the length of each side\n    side_lengths = [a, b, c]\n    # Sort the side lengths in ascending order\n    side_lengths.sort()\n    # Check if the lengths are equal to the sides of a right-angled triangle\n    if side_lengths[0] ** 2 + side_lengths[1] ** 2 == side_lengths[2] ** 2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True ",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_max(words):\n    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_len or (unique_chars == max_len and word < max_word):\n            max_len = unique_chars\n            max_word = word\n\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                            the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    0 <= number <= 1000\n    0 <= need <= 1000\n    0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    result = [number + need, remaining - need]\n    return result\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    expression = str(operand[0])\n\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            expression += '+' + str(operand[i+1])\n        elif operator[i] == '-':\n            expression += '-' + str(operand[i+1])\n        elif operator[i] == '*':\n            expression += '*' + str(operand[i+1])\n        elif operator[i] == '//':\n            expression += '//' + str(operand[i+1])\n        elif operator[i] == '**':\n            expression += '**' + str(operand[i+1])\n\n    return eval(expression)\n",
        "test": "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9",
        "num_ids": 1271,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    has_letters = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    \n    if not has_letters:\n        result = result[::-1]\n    \n    return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 573,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return None.\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n        return md5_hash\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def generate_integers(a, b):\n    # Find the smallest and largest even integers between a and b\n    smallest_even = (a // 2) * 2 if a % 2 == 0 else (a // 2 + 1) * 2\n    largest_even = (b // 2) * 2 if b % 2 == 0 else (b // 2 + 1) * 2\n\n    # Create a list of even integers between smallest_even and largest_even (inclusive)\n    even_integers = list(range(smallest_even, largest_even + 1, 2))\n\n    return even_integers\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 585,
        "indeed": false
    }
]