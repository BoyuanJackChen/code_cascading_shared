[
    {
        "number": 0,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False ",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 2022,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    stack = []\n    current_group = ''\n    paren_groups = []\n    i = 0\n\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(paren_string[i])\n            current_group += paren_string[i]\n        elif paren_string[i] == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n                current_group += paren_string[i]\n                if len(stack) == 0:\n                    paren_groups.append(current_group)\n                    current_group = ''\n            else:\n                raise ValueError('Invalid input: Not balanced')\n        i += 1\n\n    if len(stack) > 0:\n        raise ValueError('Invalid input: Not balanced')\n\n    return paren_groups\n",
        "test": "assert separate_paren_groups('()') == ['()']",
        "num_ids": 4002,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    decimal_part = number - int(number)\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1468,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    \n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    \n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False  # Test case 1",
        "num_ids": 1877,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset. \n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Incorrect result for [1.0, 2.0, 3.0, 4.0]\"",
        "num_ids": 2380,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 2208,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    result = []\n    for group in paren_string.split():\n        deepest_level = 0\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                deepest_level = max(deepest_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(deepest_level)\n    return result\n",
        "test": "assert parse_nested_parens(\"()\") == [1]",
        "num_ids": 3011,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1715,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    # Initialize sum and product variables\n    total_sum = 0\n    total_product = 1\n\n    # Iterate over the list and calculate sum and product\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n\n    return total_sum, total_product\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2028,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result\n",
        "test": "assert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2477,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    rev_string = string[::-1]\n\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i] + rev_string):\n            return string[:i] + rev_string\n\n    return string + rev_string\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2564,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = \"\"\n    for i in range(max(len(a), len(b))):\n        x = int(a[i]) if i < len(a) else 0\n        y = int(b[i]) if i < len(b) else 0\n        result += str(x ^ y)\n    return result\n",
        "test": "assert string_xor('010', '110') == '100' ",
        "num_ids": 2310,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    else:\n        max_len = 0\n        longest_str = strings[0]\n        for s in strings:\n            if len(s) > max_len:\n                max_len = len(s)\n                longest_str = s\n        return longest_str\n",
        "test": "assert longest([]) == None ",
        "num_ids": 1734,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n    # check if a is greater than b\n    if a > b:\n        small = b\n        large = a\n    else:\n        small = a\n        large = b\n        \n    # loop through all numbers from small to large\n    for i in range(small, 0, -1):\n        if large % i == 0 and small % i == 0:\n            return i\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1734,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)+1)]\n",
        "test": "assert all_prefixes('') == []",
        "num_ids": 1218,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i) + \" \"\n    return sequence[:-1]\n",
        "test": "assert string_sequence(0) == \"0\"",
        "num_ids": 1449,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    unique_chars = set()\n    for char in string.lower():\n        if char.isalnum():\n            unique_chars.add(char)\n    return len(unique_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 2042,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    result = []\n    for note in music_string.split():\n        if note in beats_map:\n            result.append(beats_map[note])\n\n    return result\n",
        "test": "assert parse_music('o') == [4]",
        "num_ids": 3669,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 2022,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 19,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # convert the string to a list of numbers\n    num_list = numbers.split()\n\n    # convert the list of strings to a list of integers\n    int_list = []\n    for num in num_list:\n        if num == 'zero':\n            int_list.append(0)\n        elif num == 'one':\n            int_list.append(1)\n        elif num == 'two':\n            int_list.append(2)\n        elif num == 'three':\n            int_list.append(3)\n        elif num == 'four':\n            int_list.append(4)\n        elif num == 'five':\n            int_list.append(5)\n        elif num == 'six':\n            int_list.append(6)\n        elif num == 'seven':\n            int_list.append(7)\n        elif num == 'eight':\n            int_list.append(8)\n        elif num == 'nine':\n            int_list.append(9)\n\n    # sort the list of integers\n    sorted_list = sorted(int_list)\n\n    # convert the sorted list of integers to a list of strings\n    result = []\n    for num in sorted_list:\n        if num == 0:\n            result.append('zero')\n        elif num == 1:\n            result.append('one')\n        elif num == 2:\n            result.append('two')\n        elif num == 3:\n            result.append('three')\n        elif num == 4:\n            result.append('four')\n        elif num == 5:\n            result.append('five')\n        elif num == 6:\n            result.append('six')\n        elif num == 7:\n            result.append('seven')\n        elif num == 8:\n            result.append('eight')\n        elif num == 9:\n            result.append('nine')\n\n    # return the sorted string\n    return ' '.join(result)\n",
        "test": "assert sort_numbers('three one five') == 'one three five'  # Test case 1",
        "num_ids": 3266,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_diff = float('inf')\n    min_pair = (0, 0)\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (numbers[i], numbers[j])\n    return min_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 3670,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    \n    scaled_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n    \n    return scaled_numbers\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]  # Test 1",
        "num_ids": 3384,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]",
        "num_ids": 1739,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n",
        "test": "assert largest_divisor(25) == 5",
        "num_ids": 1393,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1 if divisor == 2 else 2\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 2401,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2052,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char.lower()\n    return flipped_string\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 1417,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c']) \n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 1124,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]",
        "test": "assert filter_by_prefix([], 'a') == []  # Test case 1",
        "num_ids": 1565,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 1643,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 2105,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Morever, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 0:\n        a = xs[-1]\n        if a == 0:\n            return None\n        return -xs[-2] / a\n    else:\n        return None",
        "test": "assert find_zero([1, 2]) == -0.5  # f(x) = 1 + 2x",
        "num_ids": 3833,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_copy = l.copy()\n    l_copy.sort()\n    l_copy_dict = {}\n    for i in range(0, len(l_copy), 3):\n        l_copy_dict[i] = l_copy[i]\n    for i in range(1, len(l_copy), 3):\n        l_copy_dict[i] = l_copy[i]\n    for i in range(2, len(l_copy), 3):\n        l_copy_dict[i] = l_copy[i]\n    l_sorted = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_sorted.append(l[i])\n        else:\n            l_sorted.append(l_copy_dict[i])\n    return l_sorted\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 3274,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]  # Check that unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) returns [0, 2, 3, 5, 9, 123]",
        "num_ids": 1550,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1831,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if '7' in str(i):\n                count += 1\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 1467,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indicies = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indicies]\n    sorted_even_values = sorted(even_values)\n    l_sorted = [l[i] if i % 2 != 0 else sorted_even_values.pop(0) for i in range(len(l))]\n    return l_sorted\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 2974,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycling in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 3412,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is a prime number, else False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n        if count == n:\n            return b\n        a, b = b, a + b\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 2783,
        "indeed": true
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input. \n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    n = len(l)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i]+l[j]+l[k] == 0:\n                    return True\n    \n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 3245,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def car_race_collision(n: int) -> int:\n    v1 = 1\n    v2 = -1\n    d1 = v1\n    d2 = -v2\n    collisions = 0\n    for _ in range(n):\n        for i in range(n):\n            x1 = i*d1\n            x2 = -i*d2\n            x3 = (i+1)*d1\n            x4 = -(i+1)*d2\n            for j in range(n):\n                xn = -j*d1\n                xn1 = -(j+1)*d2\n                if abs(x1 - xn1) < d1:\n                    collisions += 1\n                if abs(x2 - xn) < d2:\n                    collisions += 1\n                if abs(x3 - xn1) < d1:\n                    collisions += 1\n                if abs(x4 - xn) < d2:\n                    collisions += 1\n    return collisions\n",
        "test": "assert car_race_collision(2) == 0",
        "num_ids": 3511,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    \n    return [x+1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1527,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input. \n    It returns True if there are two distinct elements in the list that \n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Create a dictionary to store the frequencies of each number in the list\n    num_dict = {}\n    for num in l:\n        num_dict[num] = num_dict.get(num, 0) + 1\n\n    # Check if there are any pairs of distinct numbers that sum up to zero\n    for i in range(len(l)):\n        complement = -l[i]\n        if num_dict.get(complement, 0) > 0 and complement != l[i]:\n            return True\n\n    # If no pairs are found, return False\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 2376,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    conversion = \"\"\n    while x > 0:\n        remainder = x % base\n        conversion = str(remainder) + conversion\n        x = x // base\n    return conversion\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2177,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(5, 3) == 7.5, \"Incorrect triangle_area() implementation\" ",
        "num_ids": 971,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c = 0, 2, 0\n        for i in range(4, n+1):\n            a, b, c = b, c, b+c\n        return c\n",
        "test": "assert fib4(0) == 0  # test case for fib4(0)",
        "num_ids": 2877,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2])/2\n    else:\n        return l[n//2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 1850,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # convert the string to lowercase and remove all non-alphanumeric characters\n    clean_text = ''.join(c.lower() for c in text if c.isalnum())\n    \n    # check if the cleaned string is equal to its reverse\n    return clean_text == clean_text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 1229,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # Calculate the result\n    result = pow(2, n, p)\n\n    # Return the result\n    return result",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 2379,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 1658,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    return ''.join([char for char in text if char not in vowels])\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1524,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1247,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 879,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return set(s0) == set(s1)",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 1754,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    print(fib(10)) # prints 55\n    print(fib(1))  # prints 1\n    print(fib(8))  # prints 21\n",
        "test": "assert fib(10) == 55",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(\"<\")\n        elif b == \">\":\n            if not stack:  # stack is empty\n                return False\n            stack.pop()\n    return len(stack) == 0  # all opening brackets have a matching closing bracket\n",
        "test": "assert correct_bracketing(\"<>\") == True",
        "num_ids": 2009,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    \n    # Check if list is monotonically increasing\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n        return True\n    \n    # Check if list is monotonically decreasing\n    if all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    \n    # List is neither monotonically increasing nor decreasing\n    return False\n",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 2351,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    return sorted(list(common_elements))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1986,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Check if n is a prime number\n    if n == 2 or n == 3:\n        return n\n    elif n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    elif n % 3 == 0:\n        return largest_prime_factor(n // 3)\n    # Check if n is a prime factor of the number\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n        i += 2\n    return n\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 2026,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 1508,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n\n    return len(stack) == 0 ",
        "test": "assert correct_bracketing(\"()\") == True",
        "num_ids": 1956,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def derivative(xs: list):\n    \"\"\"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    \n    # Create an empty list to store the derivatives of the polynomial\n    derivatives = []\n    \n    # For each coefficient in the polynomial, calculate its derivative and add it to the list\n    for i in range(1, len(xs)):\n        derivatives.append(i * xs[i])\n    \n    return derivatives\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 2233,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    # Recursive case\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 2984,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    y_vowel = False\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        if char.lower() == 'y' and not y_vowel:\n            count += 1\n            y_vowel = True\n        else:\n            y_vowel = False\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 2475,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    num_digits = len(str(x))\n    if shift > num_digits:\n        return str(x)[::-1]\n    else:\n        return str(x)[num_digits-shift:] + str(x)[:num_digits-shift]\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 2435,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    \n    # initialize sum to 0\n    sum = 0\n    \n    # iterate over each character in the string\n    for char in s:\n        # check if the character is uppercase\n        if char.isupper():\n            # add the ASCII code of the uppercase character to sum\n            sum += ord(char)\n    \n    # return the sum\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 2210,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def fruit_distribution(s, n):\n    # split the string into two parts based on the keyword \"and\"\n    parts = s.split(\" and \")\n    # get the total number of apples and oranges\n    apples = int(parts[0].replace(\"apples\", \"\"))\n    oranges = int(parts[1].replace(\"oranges\", \"\"))\n    # calculate the number of mango fruits\n    mango = n - apples - oranges\n    return mango\n",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 2403,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                        so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        1 <= nodes.length <= 10000\n        0 <= node.value\n    \"\"\"\n\n    if not arr:\n        return []\n\n    smallest_value = float('inf')\n    smallest_index = None\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_value:\n            smallest_value = value\n            smallest_index = index\n        elif value % 2 == 0 and value == smallest_value and index < smallest_index:\n            smallest_index = index\n\n    if smallest_value == float('inf'):\n        return []\n\n    return [smallest_value, smallest_index]\n",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 2862,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    max_val = -1\n    for i in range(1, max(lst) + 1):\n        if lst.count(i) >= i:\n            max_val = i\n    \n    return max_val\n",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 3173,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    result = [min_val, max_val]\n    lst.remove(min_val)\n    lst.remove(max_val)\n    for i in range(len(lst)):\n        result.append(min(lst))\n        lst.remove(min(lst))\n    return result ",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 3314,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the given sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the area of the triangle using the formula: Heron's formula\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # If the given sides do not form a valid triangle, return -1\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 2880,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    \n    # Check if the object is balanced\n    if q == q[::-1]:\n        # Check if the sum of the elements is less than or equal to the maximum possible weight\n        return sum(q) <= w\n    else:\n        return False\n",
        "test": "assert will_it_fly([3, 2, 3], 1) == False",
        "num_ids": 2293,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 0\n\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            dp[i][i+1] = 0\n        else:\n            dp[i][i+1] = 1\n\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i + k\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = min(dp[i+1][j-1]+1, dp[i][j-1]+1, dp[i+1][j]+1)\n\n    return dp[0][n-1]\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 3406,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def total_match(lst1, lst2):\n    # Initialize the total number of characters in the first list to -1.\n    total1 = -1\n    # Initialize the total number of characters in the second list to -1.\n    total2 = -1\n    \n    # Calculate the total number of characters in the first list.\n    for word in lst1:\n        total1 += len(word)\n    \n    # Calculate the total number of characters in the second list.\n    for word in lst2:\n        total2 += len(word)\n    \n    # If the two lists have the same total number of characters, return the first list.\n    if total1 == total2:\n        return lst1\n    \n    # If the total number of characters in the first list is less than the second list, return the first list.\n    elif total1 < total2:\n        return lst1\n    \n    # If the total number of characters in the second list is less than the first list, return the second list.\n    else:\n        return lst2\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 2383,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(b):\n        if b < 2:\n            return False\n        for i in range(2, int(b**0.5)+1):\n            if b % i == 0:\n                return False\n        return True\n    \n    if a < 30:\n        return False\n    \n    for i in range(2, int(a/3)+1):\n        if is_prime(i) and is_prime(a//(2*i)) and is_prime(a//(i*(i+1))):\n            return True\n    \n    return False\n",
        "test": "assert is_multiply_prime(12) == False # 12 != 3 * 4",
        "num_ids": 3053,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    \n    if x < 1:\n        return False\n    \n    if n == 1:\n        return x == 1\n    \n    while x % n == 0:\n        x /= n\n        \n    return x == 1\n",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 2057,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0 or a == 1:\n        return True\n    root = int(a ** (1./3))\n    return root * root * root == a\n",
        "test": "assert iscube(1) == True",
        "num_ids": 1965,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef hex_key(num):\n    hex_to_decimal = {\n        '0': 0, '1': 1, '2': 2, '3': 3, '4': 4,\n        '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15\n    }\n\n    decimal_num = 0\n    for i in range(len(num)):\n        decimal_num += hex_to_decimal[num[i]] * (16 ** (len(num) - 1 - i))\n\n    prime_digits = 0\n    while decimal_num > 0:\n        if is_prime(decimal_num % 16) and decimal_num % 16 in [2, 3, 5, 7, 11, 13]:\n            prime_digits += 1\n        decimal_num //= 16\n\n    return prime_digits\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 3892,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to a binary string\"\"\"\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n",
        "test": "assert decimal_to_binary(32) == \"db100000db\"",
        "num_ids": 2251,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    # Check if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Convert the string to a list of characters\n    s_list = list(s)\n    \n    # Iterate through the list with a sliding window of size 3\n    for i in range(len(s_list) - 2):\n        # Check if the three consecutive letters are distinct\n        if s_list[i] == s_list[i+1] or s_list[i+1] == s_list[i+2] or s_list[i] == s_list[i+2]:\n            return False\n    \n    # If all checks passed, the string is happy\n    return True\n",
        "test": "assert is_happy(\"abcd\") == True",
        "num_ids": 2356,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n            GPA       |    Letter grade\n            4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n            0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    \n    letter_grades = []\n    \n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0]) == ['A+']",
        "num_ids": 5262,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def prime_length(string):\n    \"\"\"\n    Write a function that takes a string and returns True if the string length is a prime number\n    or False otherwise.\n    Examples:\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Get the length of the string\n    length = len(string)\n    \n    # Check if the length is a prime number\n    if length == 2 or length == 3:\n        return True\n    elif length == 1 or length == 4 or length % 2 == 0 or length % 3 == 0:\n        return False\n    else:\n        # Check if the length can be divided by 2 or 3\n        for i in range(5, int(length**0.5)+1, 6):\n            if length % i == 0 or length % (i+2) == 0:\n                return False\n        \n        # Check if the length can be divided by any odd number greater than 3\n        for i in range(7, int(length/2)+1, 2):\n            if length % i == 0:\n                return False\n        \n        # If the length is not found to be divisible by any number, it is a prime number\n        return True\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 1978,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # count the number of numbers with 1 as the first digit\n    count = 9 * 10**(n-1)\n    # count the number of numbers with 1 as the last digit\n    count += 10**n // 10\n    # subtract the number of numbers with 1 as the first and last digit\n    count -= 10**n // 100\n    return count\n",
        "test": "assert starts_one_ends(1) == 10 # There are 10 1-digit numbers that start or end with 1",
        "num_ids": 3002,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    binary_sum = 0\n    for digit in str(N):\n        binary_sum += int(digit, 10)\n    return bin(binary_sum)[2:]",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 1838,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n",
        "test": "assert add([4, 2, 6, 7]) == 2  # Test for [4, 2, 6, 7]",
        "num_ids": 1606,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. \n    Note: You should keep the order of words and blank spaces in the sentence.\n    \n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\n    # Split the string into words\n    words = s.split()\n\n    # Initialize an empty list to store the ordered words\n    ordered_words = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # If the word is empty (i.e. a space), add it to the ordered list\n        if not word:\n            ordered_words.append(word)\n            continue\n        \n        # Sort the characters in the word based on their ascii value\n        sorted_word = ''.join(sorted(word))\n        \n        # Add the sorted word to the ordered list\n        ordered_words.append(sorted_word)\n\n    # Join the words in the ordered list back into a string\n    return ' '.join(ordered_words)\n",
        "test": "assert anti_shuffle(\"Hi\") == \"Hi\"",
        "num_ids": 2790,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.append((i, row.index(x)))\n    result.sort()\n    return result\n",
        "test": "assert get_row([",
        "num_ids": 2833,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def sort_array(array):\n    if not array:\n        return []\n    \n    first_value = array[0]\n    last_value = array[-1]\n    \n    if (first_value + last_value) % 2 == 0:\n        sorted_array = sorted(array, reverse=True)\n    else:\n        sorted_array = sorted(array)\n    \n    return sorted_array",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 3321,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def encrypt(s):\n    \"\"\"\n    Create a function encrypt that takes a string as an argument and returns a string\n    encrypted with the alphabet being rotated. The alphabet should be rotated in a manner\n    such that the letters shift down by two multiplied to two places.\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            # Convert to lowercase\n            char = char.lower()\n            # Calculate the new ASCII code of the character\n            new_code = ord(char) + 4 - 97\n            # Wrap around to the beginning of the alphabet if necessary\n            new_code %= 26\n            # Convert the new code back to a character and add it to the result\n            result += chr(new_code + 97)\n        else:\n            # Non-letter characters are left unchanged\n            result += char\n    return result\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 2970,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    sorted_lst = sorted(lst)\n    \n    if sorted_lst[1] == sorted_lst[0]:\n        return None\n    \n    return sorted_lst[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 2146,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    \n    # Initialize a counter for boredom count\n    count = 0\n    \n    # Split the string into sentences\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    \n    # Loop through each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with I\n        if sentence.strip().lower().startswith('i'):\n            count += 1\n    \n    # Return the count of boredoms\n    return count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 2496,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n    \n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \n    \n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return any([x == y+z, y == z+x, z == x+y])\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 2396,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for letter in message:\n        if letter in vowels:\n            index = vowels.index(letter)\n            encoded_letter = vowels[(index + 2) % 5] + vowels[(index + 2) % 5].lower()\n        elif letter.isalpha():\n            encoded_letter = letter.upper() if letter.isupper() else letter.lower()\n        else:\n            encoded_letter = letter\n        encoded_message += encoded_letter\n    return encoded_message\n",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG', \"Error in encode('This is a message')\"",
        "num_ids": 3240,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    return sum_of_digits(max_prime)\n",
        "test": "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
        "num_ids": 5466,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False. \n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    # Check if dictionary is empty\n    if len(dict) == 0:\n        return False\n    \n    # Check if all keys are in lower case or all keys are in upper case\n    if all(key.islower() for key in dict) or all(key.isupper() for key in dict):\n        return True\n    else:\n        return False\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 2935,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n == 0:\n        return []\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n",
        "test": "assert count_up_to(5) == [2,3]",
        "num_ids": 2702,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply(a, b):\n    # Convert the numbers to strings and extract the last digit of each\n    a_last_digit = int(str(a)[-1])\n    b_last_digit = int(str(b)[-1])\n\n    # Multiply the last digits and return the result\n    return a_last_digit * b_last_digit\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 2349,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOUaeiou':\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0, \"Function is incorrect\"",
        "num_ids": 1444,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero. \n    \n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    \n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    try:\n        # Convert the input value to a float\n        num = float(value)\n        # Check if the number is equidistant from two integers\n        if num % 1 == 0.5:\n            # Round away from zero\n            if num > 0:\n                return int(num + 1)\n            else:\n                return int(num - 1)\n        else:\n            # Round to nearest integer\n            return round(num)\n    except ValueError:\n        # If the input value cannot be converted to a float, return None\n        return None\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 2556,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    pile = [n]  # create the first level with n stones\n    for i in range(n-1):\n        if n % 2 == 0:  # if n is even\n            n += 2  # add the next even number to n\n        else:  # if n is odd\n            n += 2  # add the next odd number to n\n        pile.append(n)  # add the new level to the pile\n\n    return pile  # return the pile with all levels of stones\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 2936,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def words_string(s):\n    # Split the string into words using either commas or spaces\n    words = s.split(', ')\n    # Return the resulting array of words\n    return words\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1997,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # initialize the max even number to -1\n    max_even = -1\n    \n    # iterate through the numbers in the range [x, y] inclusive\n    for i in range(x, y+1):\n        # check if the current number is even and greater than max_even\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n            \n    # return the max_even number if it exists, else -1\n    return max_even if max_even != -1 else -1\n",
        "test": "assert choose_num(13, 12) == -1, \"Function choose_num should return -1 for input (13, 12)\"",
        "num_ids": 2435,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded = round(avg)\n        binary = bin(rounded)\n        return binary\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 2247,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit. \n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # Create an empty list to store unique digits\n    unique_nums = []\n    \n    # Iterate through each element in the input list\n    for num in x:\n        # Convert the number to a string\n        num_str = str(num)\n        \n        # Check if any digit in the number is even\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                break\n        else:\n            # If no even digit is found, append the number to the unique_nums list\n            unique_nums.append(num)\n    \n    # Sort the unique_nums list in increasing order\n    unique_nums.sort()\n    \n    # Return the unique_nums list\n    return unique_nums\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 3088,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n                              -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n                   -> sort arr -> [-1, 1, 55]\n                   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # If the array is empty return an empty array\n    if not arr:\n        return []\n\n    # Filter out the numbers between 1 and 9 inclusive\n    filtered_arr = [x for x in arr if x >= 1 and x <= 9]\n\n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n\n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n\n    # Create a dictionary to map digits to names\n    digit_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # Replace each digit with its corresponding name\n    result = [digit_to_name[x] for x in reversed_arr]\n\n    return result\n",
        "test": "assert by_length([]) == []",
        "num_ids": 4651,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise. \n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\n\ndef factorial(n):\n    \"\"\" Helper function to calculate factorial of a number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "test": "assert f(1) == [1]",
        "num_ids": 2280,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def even_odd_palindrome(n):\n    even_palindromes = 0\n    odd_palindromes = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            even_palindromes += 1\n        elif str(i) == str(i)[::-1]:\n            odd_palindromes += 1\n    \n    return (even_palindromes, odd_palindromes)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 3251,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0. If a number is negative,\n    then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n        elif num < 0:\n            num = abs(num)\n            total = sum(int(digit) for digit in str(num))\n            if total > 0:\n                count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1562,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                            be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n                            \n    \"\"\"\n    if not arr:\n        return True\n    \n    max_element = max(arr)\n    max_index = arr.index(max_element)\n    min_element = min(arr[:max_index])\n    \n    if max_element == min_element:\n        return True\n    \n    if min_element == max_element:\n        return False\n    \n    if max_element - min_element > 1:\n        return False\n    \n    return True\n",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False",
        "num_ids": 4515,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers, \n    and determines whether it is possible to perform an exchange of elements \n    between them to make lst1 a list of only even numbers. \n    There is no limit on the number of exchanged elements between lst1 and lst2. \n    If it is possible to exchange elements between the lst1 and lst2 to make \n    all the elements of lst1 to be even, return \"YES\". \n    Otherwise, return \"NO\". \n    For example: \n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    lst1_even = [x for x in lst1 if x % 2 == 0]\n    lst2_even = [x for x in lst2 if x % 2 == 0]\n    lst1_odd = [x for x in lst1 if x % 2 != 0]\n    lst2_odd = [x for x in lst2 if x % 2 != 0]\n    \n    if len(lst1_even) == len(lst2):\n        return \"YES\"\n    elif len(lst2_even) == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 4541,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    if not test:  # if the string is empty\n        return {}\n    \n    # create a dictionary to store the counts of each letter\n    counts = {}\n    \n    # split the string into words and iterate over them\n    for word in test.split():\n        # iterate over each letter in the word\n        for letter in word:\n            # if the letter is in the dictionary, increment its count\n            if letter in counts:\n                counts[letter] += 1\n            # if the letter is not in the dictionary, add it with a count of 1\n            else:\n                counts[letter] = 1\n    \n    # find the maximum count\n    max_count = max(counts.values())\n    \n    # create a dictionary of the letters with the maximum count\n    max_dict = {}\n    for letter, count in counts.items():\n        if count == max_count:\n            max_dict[letter] = count\n    \n    return max_dict\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 4123,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Deleting characters in s that are equal to any character in c\n    for char in c:\n        s = s.replace(char, '')\n\n    # Checking if the result string is palindrome\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 2750,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 19,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for string in lst:\n        odd_count = 0\n        for digit in string:\n            if int(digit) % 2 != 0:\n                odd_count += 1\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n",
        "test": "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
        "num_ids": 3746,
        "indeed": true
    },
    {
        "number": 114,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def minSubArraySum(nums):\n    # Initialize the minimum sum to be the maximum possible value\n    min_sum = float('inf')\n\n    # Iterate through the array and calculate the sum of each sub-array\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            # Calculate the sum of the current sub-array\n            sub_sum = sum(nums[i:j+1])\n\n            # Update the minimum sum if the current sub-array has a smaller sum\n            min_sum = min(min_sum, sub_sum)\n\n    return min_sum\n",
        "test": "assert minSubArraySum([1, 2, 3, 4, 5]) == 1  # Example case from the problem statement",
        "num_ids": 2290,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    # Calculate the total number of wells\n    wells = sum(sum(row) for row in grid)\n\n    # Calculate the number of times we can fill the buckets\n    buckets = wells // capacity\n\n    # Calculate the remaining water in the wells after filling the buckets\n    remaining_water = wells % capacity\n\n    # Calculate the number of times we need to lower the buckets\n    lowerings = buckets + (remaining_water > 0)\n\n    return lowerings\n",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
        "num_ids": 4881,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order. For similar number of ones,\n    sort based on decimal value.\n    \"\"\"\n\n    # Define a function to count the number of ones in a number\n    def count_ones(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    # Use the count_ones function to count the number of ones in each element\n    # of the array and store the counts in a list of tuples\n    sorted_arr = [(num, count_ones(num)) for num in arr]\n\n    # Sort the array based on the counts\n    sorted_arr.sort(key=lambda x: (x[1], x[0]))\n\n    # Extract the sorted array from the sorted list of tuples\n    sorted_arr = [num for num, count in sorted_arr]\n\n    return sorted_arr\n",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 3260,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def select_words(s, n):\n    # Split the string into a list of words\n    words = s.split()\n    # Initialize an empty list to store the words that meet the criteria\n    result = []\n    # Loop over each word in the list of words\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = 0\n        for letter in word:\n            if letter.lower() not in ['a', 'e', 'i', 'o', 'u'] and letter.isalpha():\n                consonant_count += 1\n        # If the word has exactly n consonants, add it to the result list\n        if consonant_count == n:\n            result.append(word)\n    # Return the result list\n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 3222,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    # Initialize variables\n    vowels = \"AEIOUaeiou\"\n    i = len(word) - 2\n    \n    # Loop through the string backwards\n    while i >= 0:\n        # If the current character is a vowel, return it\n        if word[i] in vowels:\n            return word[i]\n        # If the current character is a consonant and the next character is a vowel, return it\n        elif word[i].isalpha() and word[i+1] in vowels:\n            return word[i+1]\n        i -= 1\n    \n    # If no vowels are found, return empty string\n    return \"\"\n",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\" ",
        "num_ids": 3912,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                open_count += 1\n            elif c == ')':\n                open_count -= 1\n                if open_count < 0:\n                    return 'No'\n    return 'Yes' if open_count == 0 else 'No'\n",
        "test": "assert match_parens(['()(', ')']) == 'Yes'",
        "num_ids": 2989,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    return sorted(arr)[-k:]\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 3308,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # Initialize the sum to zero\n    total_sum = 0\n    # Iterate through the list\n    for i in range(len(lst)):\n        # Check if the current element is odd and in an even position\n        if lst[i] % 2 != 0 and i % 2 == 0:\n            # If so, add it to the total sum\n            total_sum += lst[i]\n    # Return the total sum\n    return total_sum\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 1897,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize sum variable to 0\n    total_sum = 0\n    # Loop through the first k elements of the array\n    for i in range(k):\n        # Check if the element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # Add the element to the total sum\n            total_sum += arr[i]\n    # Return the total sum\n    return total_sum\n",
        "test": "assert add_elements([10,20,30,40,50], 5) == 150",
        "num_ids": 2670,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_sequence = []\n    current_number = n\n    while current_number != 1:\n        if current_number % 2 == 1:\n            collatz_sequence.append(current_number)\n            current_number = 3 * current_number + 1\n        else:\n            collatz_sequence.append(current_number)\n            current_number = current_number // 2\n    collatz_sequence.append(1)\n    odd_numbers = [x for x in collatz_sequence if x % 2 != 0]\n    return sorted(odd_numbers)\n",
        "test": "assert get_odd_collatz(1) == [1]  # Test if get_odd_collatz(1) returns [1].",
        "num_ids": 3806,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid otherwise False.\n    \"\"\"\n    \n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Check if the date is in the format mm-dd-yyyy\n    date_pattern = re.compile(r'^(\\d{2})-(\\d{2})-(\\d{4})$')\n    match = date_pattern.match(date)\n    \n    if not match:\n        return False\n    \n    # Extract the month, day, and year from the matched groups\n    month = int(match.group(1))\n    day = int(match.group(2))\n    year = int(match.group(3))\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    elif month == 2 and day < 1 or day > 29:\n        return False\n    \n    # Check if the date is a valid date in the Gregorian calendar\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        leap_year = True\n    else:\n        leap_year = False\n        \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    elif month == 2 and leap_year:\n        max_days = 29\n    elif month == 2 and not leap_year:\n        max_days = 28\n        \n    if day < 1 or day > max_days:\n        return False\n    \n    return True\n",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 4411,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in range(26):\n            if chr(i+ord('a')) in txt:\n                count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1767,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n\n    if len(lst) <= 1:\n        return True\n\n    prev = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] <= prev:\n            return False\n        prev = lst[i]\n\n    return True\n",
        "test": "assert is_sorted([1, 2, 3, 4, 5]) == True",
        "num_ids": 3664,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals, where each interval is a pair of integers.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number. If the length of the intersection is a prime number,\n    return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect,\n    return \"NO\".\n    \n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        \n        if length == 1:\n            return \"NO\"\n        \n        for i in range(2, length):\n            if length % i == 0:\n                return \"NO\"\n        \n        return \"YES\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 2844,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n\n    sign_prod = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        if num == 0:\n            sign_prod = 0\n        else:\n            sign_prod *= (1 if num > 0 else -1)\n        magnitude_sum += abs(num)\n\n    return magnitude_sum * sign_prod",
        "test": "assert prod_signs([0, 1]) == 0",
        "num_ids": 2391,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell. Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i]\n    and for any j (1 <= j < i) we have lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    n = len(grid)\n    seen = set()\n    for _ in range(k):\n        min_val = float('inf')\n        min_cell = None\n        for i in range(n):\n            for j in range(n):\n                if (i, j) not in seen and grid[i][j] < min_val:\n                    min_val = grid[i][j]\n                    min_cell = (i, j)\n        seen.add(min_cell)\n        if len(seen) == k:\n            return [grid[i][j] for i, j in seen]",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 4475,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence. \n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    # Initialize the first three numbers of the sequence\n    seq = [1, 3, 2]\n    \n    # Generate the rest of the sequence using the recurrence relation\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            seq.append(seq[-1] + i / 2)\n        else:\n            seq.append(seq[-2] + seq[-1] + seq[-3])\n            \n    return seq[:n+1]\n",
        "test": "assert tri(2) == [1, 3, 2, 8]",
        "num_ids": 5128,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n        else:\n            product *= 0\n    return product\n",
        "test": "assert digits(1) == 1, \"Test 1 failed\"",
        "num_ids": 1158,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert is_nested('[[]]') == True",
        "num_ids": 1699,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        num = int(num + 0.5) ** 2\n        total += num\n    return total",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 2590,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if len(txt) == 0:\n        return False\n    elif txt[-1].isalpha() and (not txt[-2].isalpha() or txt[-2] == \" \"):\n        return True\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 3017,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i+1] <= arr[i]:\n            return i\n    return -1\n",
        "test": "assert can_arrange([1,2,3]) == -1  # Example 2",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. If there is no negative or positive integers, \n    return them as None.\n    \n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    neg = pos = None\n    for i in lst:\n        if i < 0 and (neg is None or i > neg):\n            neg = i\n        elif i > 0 and (pos is None or i < pos):\n            pos = i\n    return (neg, pos)\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 3302,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def compare_one(a, b):\n    # convert both values to floats and compare\n    a_float = float(a.replace(\",\", \".\")) if isinstance(a, str) else a\n    b_float = float(b.replace(\",\", \".\")) if isinstance(b, str) else b\n    if a_float > b_float:\n        return a\n    elif a_float < b_float:\n        return b\n    else:\n        return None",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 3566,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    # Check if n is divisible by 4\n    if n % 4 != 0:\n        return False\n\n    # Check if n can be written as the sum of 4 positive even numbers\n    for i in range(2, n//2 + 1):\n        for j in range(2, n//2 + 1):\n            for k in range(2, n//2 + 1):\n                for l in range(2, n//2 + 1):\n                    if i + j + k + l == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:\n                        return True\n    \n    return False\n",
        "test": "assert is_equal_to_sum_even(6) == False",
        "num_ids": 2975,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    if n <= 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "test": "assert special_factorial(1) == 1, \"special_factorial(1) should be 1\"",
        "num_ids": 2015,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    \n    new_text = \"\"\n    space_count = 0\n    for i in text:\n        if i == \" \":\n            space_count += 1\n            if space_count > 2:\n                new_text += \"-\"\n                space_count = 0\n        else:\n            if space_count > 0:\n                new_text += \"_\"\n                space_count = 0\n            new_text += i\n            \n    if space_count > 0:\n        new_text += \"_\"\n    \n    return new_text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2845,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\"\"\"\n\n    import re\n\n    # Check if there are more than 3 digits in the file name\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Check if the substring before the dot starts with a latin alphabet letter\n    if not re.match(r'[a-zA-Z]', file_name.split('.')[0]):\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
        "test": "assert file_name_check(\"1example.dll\") == 'No'",
        "num_ids": 4665,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 2989,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        1 <= len(sentence) <= 100\n        sentence contains only letters\n    \"\"\"\n    \n    # Helper function to check if a number is prime or not\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter the words based on length being prime number\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    # Join the words with space and return\n    return \" \".join(prime_words)\n",
        "test": "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
        "num_ids": 2948,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    # Convert the fractions to floats and multiply them\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    xn = x_num / x_den * n_num / n_den\n\n    # Check if xn is an integer\n    return xn.is_integer()\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 2680,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    sorted_nums = sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n    return sorted_nums ",
        "test": "assert order_by_points([]) == []",
        "num_ids": 3086,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0]) % 2 == 1) and (int(str(num)[-1]) % 2 == 1):\n            count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 1977,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def get_max_triples(n):\n    def is_valid_triple(triple):\n        return triple[0] + triple[1] + triple[2] % 3 == 0\n\n    def generate_triples(a):\n        return [(a[i], a[j], a[k]) for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if is_valid_triple([a[i], a[j], a[k]])]\n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = generate_triples(a)\n    return len(triples)\n",
        "test": "assert get_max_triples(3) == 0",
        "num_ids": 2316,
        "indeed": false
    },
    {
        "number": 148,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet_indices = {\"Mercury\": 0, \"Venus\": 1, \"Earth\": 2, \"Mars\": 3, \"Jupiter\": 4, \"Saturn\": 5, \"Uranus\": 6, \"Neptune\": 7}\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    indices = [planet_indices[planet1], planet_indices[planet2]]\n    indices.sort()\n\n    result = []\n    for planet in planets[indices[0]:indices[1] + 1]:\n        if planet != planet1 and planet != planet2:\n            result.append(planet)\n\n    return tuple(result)\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"Test 1 failed\"",
        "num_ids": 3346,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length and then alphabetically if the lengths are the same\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n\n    return sorted_lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]  # Test case 1",
        "num_ids": 2740,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    \n    # function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    # check if n is a prime number\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(3, 10, 20) == 10",
        "num_ids": 2282,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def double_the_difference(lst):\n    # initialize the sum to 0\n    sum = 0\n    \n    # iterate over the list\n    for num in lst:\n        # check if the number is odd and positive\n        if num % 2 == 1 and num > 0:\n            # add the square of the number to the sum\n            sum += num ** 2\n    \n    # return the sum\n    return sum\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 2616,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.  \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3] ",
        "num_ids": 2768,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM.  \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName. \n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strengths = []\n    for extension in extensions:\n        cap = sum(1 for letter in extension if letter.isupper())\n        sm = sum(1 for letter in extension if letter.islower())\n        strength = cap - sm\n        strengths.append((extension, strength))\n    \n    strongest_extension = max(strengths, key=lambda x: x[1])[0]\n    \n    return class_name + '.' + strongest_extension\n",
        "test": "assert Strongest_Extension('your_class', ['bb', 'CCC', 'ddd', 'ee']) == 'your_class.CCC', 'Incorrect output for \"your_class\", [\"bb\", \"CCC\", \"ddd\", \"ee\"]'",
        "num_ids": 4163,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return s1 in s2 + s2\n\n    return any(is_rotation(b, a[i:]) for i in range(len(a)))\n",
        "test": "assert cycpattern_check(\"abcd\", \"abd\") == False",
        "num_ids": 2393,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num_str = str(abs(num))  # convert to string and take absolute value\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)  # count even digits\n    odd_count = len(num_str) - even_count  # subtract even count from total length\n    return even_count, odd_count\n",
        "test": "assert even_odd_count(2) == (1, 0)",
        "num_ids": 2011,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_num = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_num += numeral\n            number -= value\n\n    return roman_num.lower()\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 3567,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # check if the input values are positive integers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(c, int)):\n        return False\n    # check if the sum of the lengths of any two sides is greater than the third side\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 2616,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n            \n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 2059,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def eat(number, need, remaining):\n    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 4247,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Convert operand list to a tuple\n    operand = tuple(operand)\n\n    # Iterate over the operator list and build the expression\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            expression += f' {operator[i]} {operand[i+1]}'\n        elif operator[i] == '-':\n            expression += f' {operator[i]} {operand[i+1]}'\n        elif operator[i] == '*':\n            expression += f' {operator[i]} {operand[i+1]}'\n        elif operator[i] == '//':\n            expression += f' {operator[i]} {operand[i+1]}'\n        elif operator[i] == '**':\n            expression += f' {operator[i]} {operand[i+1]}'\n\n    # Evaluate the expression and return the result\n    return eval(expression)\n",
        "test": "assert do_algebra(['-'], [2, 3, 4, 5]) == -1  # Subtraction",
        "num_ids": 3853,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def solve(s):\n    # Initialize a new string to store the modified characters\n    new_s = \"\"\n    \n    # Loop through each character in the input string\n    for char in s:\n        # If the character is a letter, reverse its case\n        if char.isalpha():\n            if char.islower():\n                new_s += char.upper()\n            else:\n                new_s += char.lower()\n        # If the character is not a letter, keep it as is\n        else:\n            new_s += char\n    \n    # If the new string contains no letters, reverse it\n    if not any(char.isalpha() for char in new_s):\n        new_s = new_s[::-1]\n    \n    # Return the modified string\n    return new_s\n",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 1760,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 1698,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Ensure a is less than or equal to b\n    a, b = min(a, b), max(a, b)\n\n    # Initialize an empty list to store the even digits\n    even_digits = []\n\n    # Iterate over the range of numbers from a to b (inclusive)\n    for num in range(a, b+1):\n        # Convert the number to a string and iterate over its characters\n        for char in str(num):\n            # Check if the character is even and an integer\n            if char.isdigit() and int(char) % 2 == 0:\n                # If it is, append it to the list of even digits\n                even_digits.append(int(char))\n\n    # Sort the list of even digits in ascending order\n    even_digits.sort()\n\n    return even_digits",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 2746,
        "indeed": false
    }
]