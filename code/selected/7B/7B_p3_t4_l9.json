[
    {
        "number": 0,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False ",
        "num_ids": 939,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    \n    def find_closing_brace(open_index: int, open_count: int, close_count: int) -> int:\n        \"\"\"Helper function to find the index of the closing brace\n        corresponding to the given open brace.\n        \"\"\"\n        i = open_index + 1\n        while open_count > 0 and close_count > 0:\n            if paren_string[i] == '(':\n                open_count += 1\n            elif paren_string[i] == ')':\n                open_count -= 1\n                if open_count == 0:\n                    return i\n            i += 1\n        return -1\n    \n    result = []\n    i = 0\n    while i < len(paren_string):\n        open_count = 0\n        close_count = 0\n        while i < len(paren_string) and paren_string[i] != '(':\n            i += 1\n        if i == len(paren_string):\n            break\n        open_count += 1\n        open_index = i\n        i += 1\n        while open_count > 0 and i < len(paren_string):\n            if paren_string[i] == '(':\n                open_count += 1\n            elif paren_string[i] == ')':\n                open_count -= 1\n                if open_count == 0:\n                    result.append(paren_string[open_index:i+1])\n            i += 1\n    return result",
        "test": "assert separate_paren_groups('()') == ['()']",
        "num_ids": 1464,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n",
        "test": "assert truncate_number(3.5) == 0.5 ",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Detect if at any point the balance of account falls below zero, and at that point function should return True.\n    Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False  # test case 1",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset. \n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the list of numbers\n    mean = sum(numbers) / len(numbers)\n    # Calculate the absolute difference between each element and the mean\n    absolute_diff = [abs(num - mean) for num in numbers]\n    # Calculate the mean of the absolute differences\n    mad = sum(absolute_diff) / len(absolute_diff)\n    return mad\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = []\n    for i, num in enumerate(numbers):\n        if i == len(numbers) - 1:\n            result.append(num)\n            break\n        result.append(num)\n        result.append(delimeter)\n    \n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    levels = []\n    max_level = 0\n    open_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            max_level = max(max_level, open_count)\n        elif char == ')':\n            open_count -= 1\n        else:\n            continue\n\n        if open_count == 0:\n            levels.append(max_level)\n            max_level = 0\n\n    return levels",
        "test": "assert parse_nested_parens('() ()') == [1, 1]",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    total = sum(numbers) if numbers else 0\n    product = 1 if not numbers else 1\n\n    for num in numbers:\n        product *= num\n\n    return (total, product)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 796,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence. \n    \n    Args:\n    - numbers (List[int]): The input list of integers.\n    \n    Returns:\n    - List[int]: The list of rolling maximum element until a given moment in the sequence.\n    \n    Example:\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    \n    rolling_max_list = []\n    for i in range(len(numbers)):\n        max_element = max(numbers[:i+1])\n        rolling_max_list.append(max_element)\n        \n    return rolling_max_list\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]  # Test that the function returns the correct rolling maximum list for the given input",
        "num_ids": 1158,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[::-1][i:]\n\n    return None\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    \n    result = ''\n    \n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    \n    return result\n",
        "test": "assert string_xor('010', '110') == '100'  # Test case 1",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c']) # a\n    'a'\n    >>> longest(['a', 'bb', 'ccc']) # ccc\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str\n",
        "test": "assert longest([]) is None",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    n = len(string)\n    prefixes = []\n    for i in range(n):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert all_prefixes('') == []",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    \n    # Create an empty set to store the distinct characters\n    distinct_chars = set()\n    \n    # Convert the string to lower case and iterate through each character\n    for char in string.lower():\n        \n        # If the character is not already in the set, add it\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    \n    # Return the number of distinct characters in the set\n    return len(distinct_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n        else:\n            raise ValueError(f\"Invalid note: {note}\")\n\n    return beats\n",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1299,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    n = len(substring)\n    for i in range(len(string)):\n        if string[i:i+n] == substring:\n            count += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Convert the input string into a list of numberals\n    numberals = numbers.split()\n\n    # Create a dictionary to map numberals to their corresponding integer values\n    numberal_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Use the dictionary to convert the list of numberals into a list of integers\n    integer_list = [numberal_dict[numberal] for numberal in numberals]\n\n    # Sort the list of integers in ascending order\n    sorted_list = sorted(integer_list)\n\n    # Convert the sorted list of integers back into a list of numberals\n    sorted_numberals = [key for key, value in numberal_dict.items() if value in sorted_list]\n\n    # Join the sorted list of numberals into a single string and return it\n    return ' '.join(sorted_numberals)\n",
        "test": "assert sort_numbers(\"one five two\") == \"one two five\"",
        "num_ids": 1030,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    \n    # Ensure the list has at least two elements\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two elements\")\n    \n    # Initialize variables for the smallest and largest distances\n    min_distance = float('inf')\n    max_distance = float('-inf')\n    \n    # Initialize variables for the smallest and largest numbers\n    min_number = numbers[0]\n    max_number = numbers[0]\n    \n    # Loop through the list of numbers\n    for i in range(len(numbers)):\n        # Calculate the distance between the current number and the two others\n        dist_to_min = abs(numbers[i] - min_number)\n        dist_to_max = abs(numbers[i] - max_number)\n        \n        # Update the minimum and maximum distances and numbers\n        if dist_to_min < min_distance:\n            min_distance = dist_to_min\n            min_number = numbers[i]\n        \n        if dist_to_max > max_distance:\n            max_distance = dist_to_max\n            max_number = numbers[i]\n            \n    # Return the smallest and largest numbers as a tuple\n    return (min_number, max_number)",
        "test": "assert find_closest_elements([1.0, 1.0, 1.0, 1.0, 1.0]) == (1.0, 1.0) ",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list should contain at least two elements\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    scale = max_val - min_val\n    \n    if scale == 0:\n        raise ValueError(\"All numbers in the list are the same\")\n    \n    return [(num - min_val) / scale for num in numbers]",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n",
        "test": "assert largest_divisor(15) == 5, \"Incorrect output for largest_divisor(15)\"",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    \n    factors = []\n    \n    # find factors of 2\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n        \n    # find factors of odd numbers\n    while n > 1:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n        else:\n            factors.append(int(n))\n            break\n    \n    return factors\n",
        "test": "assert factorize(70) == [2, 5, 7] ",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n",
        "test": "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n",
        "test": "assert flip_case(\"Hello\") == \"hELLO\"",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == '', \"concatenate([]) should be ''\"",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False  # Should return False because 6 is not prime",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 1:\n        xs.append(0)\n    xs.reverse()\n    for i in range(len(xs) // 2):\n        if xs[i] != 0:\n            return -xs[i] / xs[i + len(xs) // 2]",
        "test": "assert find_zero([0, 0, 0]) == None",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    l1 = []\n    l2 = []\n    l3 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l1.append(l[i])\n        elif i % 3 == 1:\n            l2.append(l[i])\n        else:\n            l3.append(l[i])\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    l = l1 + l2 + l3\n    return l\n",
        "test": "assert sort_third([]) == []",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    \n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_val = l[0]  # initialize max_val to the first element of the list\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]  # update max_val if we find a larger element\n    return max_val\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 752,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 37,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]  # get even indices\n    even_values = [l[i] for i in even_indices]  # get even values\n    even_values.sort()  # sort even values\n    l_prime = [l[i] if i % 2 != 0 else even_values.pop(0) for i in range(len(l))]  # create new list with sorted even values\n    return l_prime\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse the cycling operation on each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"a\")) == \"a\"",
        "num_ids": 1154,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    is_prime returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef is_fibonacci(num: int) -> bool:\n    \"\"\"\n    is_fibonacci returns True if the given number is a Fibonacci number, False otherwise.\n    \"\"\"\n    a, b = 0, 1\n    while b <= num:\n        if b == num:\n            return True\n        a, b = b, a + b\n    return False\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    fibonacci_numbers = []\n    a, b = 0, 1\n    while len(fibonacci_numbers) < n:\n        fibonacci_numbers.append(b)\n        a, b = b, a + b\n    for num in fibonacci_numbers:\n        if is_prime(num):\n            return num\n",
        "test": "assert prime_fib(4) == 13",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1170,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    \n    # Initialize the number of collisions to zero\n    count = 0\n    \n    # Loop over the cars in each direction and check for collisions\n    for i in range(n):\n        # Skip over the cars that haven't yet moved\n        if i < n // 2:\n            continue\n        \n        # Calculate the distance between the cars\n        distance = i - n // 2 + 1\n        \n        # If the distance is less than or equal to zero, then the cars are overlapping\n        if distance <= 0:\n            count += 1\n    \n    # Return the count of collisions\n    return count\n",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9.\")\n\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n\n    return ''.join(str(d) for d in digits[::-1])\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area",
        "test": "assert triangle_area(5, 3) == 7.5",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        prev3 = 0\n        prev2 = 0\n        prev1 = 2\n        curr = 0\n        for i in range(4, n+1):\n            curr = prev3 + prev2 + prev1 + curr\n            prev3 = prev2\n            prev2 = prev1\n            prev1 = curr\n        return curr",
        "test": "assert fib4(0) == 0",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n\n    if n % 2 == 0:\n        # if the list has even length, take the average of the middle two numbers\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        # if the list has odd length, take the middle number\n        return sorted_list[n//2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3 ",
        "num_ids": 1748,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    text = text.lower() # convert to lowercase\n    text = ''.join(filter(str.isalnum, text)) # remove non-alphanumeric characters\n    return text == text[::-1] # check if string is equal to its reverse\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \n    Args:\n    n (int): Power of 2\n    p (int): Modulo\n    \n    Returns:\n    int: 2^n modulo p\n    \n    Examples:\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for n in l:\n        if n >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    \n    # Convert both words to sets of characters\n    s0_set = set(s0)\n    s1_set = set(s1)\n    \n    # Check if the sets have the same elements\n    return s0_set == s1_set\n",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(10) == 55",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    n = len(l)\n    if n <= 1:\n        return True\n    elif l[0] < l[1]:\n        for i in range(1, n-1):\n            if l[i] < l[i+1]:\n                continue\n            else:\n                return False\n        return True\n    elif l[0] > l[1]:\n        for i in range(1, n-1):\n            if l[i] > l[i+1]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert not monotonic([1, 20, 4, 10]), \"The list is monotonic increasing\"",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert lists to sets to remove duplicates\n    s1 = set(l1)\n    s2 = set(l2)\n    # Find common elements\n    common_elements = s1.intersection(s2)\n    # Convert set back to list and sort\n    return sorted(list(common_elements))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Initialize variables\n    max_factor = 0\n    i = 2\n    \n    # Find the largest prime factor\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            max_factor = i\n            \n    # Check if n is prime\n    if n > 1:\n        max_factor = n\n        \n    return max_factor\n",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "test": "assert sum_to_n(30) == 465, \"Error: sum_to_n(30) should return 465.\"",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 1:\n        return [0]\n    else:\n        derivative_coefficients = [xs[1]]\n        for i in range(2, len(xs)):\n            derivative_coefficients.append(xs[i] * i)\n        return derivative_coefficients\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3) ",
        "test": "assert fibfib(0) == 0",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    count = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    \"\"\"\n    \n    # Convert x to a string\n    x_str = str(x)\n    \n    # Get the length of x_str\n    x_len = len(x_str)\n    \n    # If shift > x_len, return x_str reversed\n    if shift > x_len:\n        return x_str[::-1]\n    \n    # Get the digits of x_str shifted to the right by shift\n    shifted_digits = x_str[-shift:] + x_str[:-shift]\n    \n    # Return the shifted digits as a string\n    return shifted_digits\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through each character in the string\n    for char in s:\n        # check if the character is uppercase\n        if char.isupper():\n            # add the ASCII code of the character to the sum variable\n            sum += ord(char)\n\n    # return the sum variable\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def fruit_distribution(s, n):\n    apples, oranges, mangoes = 0, 0, 0\n    for item in s.split():\n        if item == \"apples\":\n            apples = int(s.split()[0])\n        elif item == \"oranges\":\n            oranges = int(s.split()[0])\n        elif item == \"mangoes\":\n            mangoes = n - apples - oranges\n    return mangoes",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19, \"Test 4 failed\"",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it. \n    The plucked node should be the node with the smallest even value. \n    If multiple nodes with the same smallest even value are found return the node that has smallest index. \n\n    The plucked node should be returned in a list, [ smalest_value, its index ], \n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                        so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        1 <= nodes.length <= 10000\n        0 <= node.value\n    \"\"\"\n\n    # If the array is empty, return []\n    if not arr:\n        return []\n\n    # Initialize variables to keep track of the smallest even value and its index\n    smallest_value = float('inf')\n    smallest_index = None\n\n    # Iterate over the array and find the smallest even value and its index\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_value:\n            smallest_value = value\n            smallest_index = i\n\n    # If no even value was found, return []\n    if smallest_value == float('inf'):\n        return []\n\n    # Return the smallest even value and its index in a list\n    return [smallest_value, smallest_index]\n",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 1680,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def search(lst):\n    # Create a dictionary to keep track of frequency of each integer\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the greatest integer that satisfies the condition\n    max_num = -1\n    for num in sorted(freq_dict.keys(), reverse=True):\n        if freq_dict[num] >= num:\n            max_num = num\n            break\n    \n    return max_num\n",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, \"Incorrect output for search([1, 2, 2, 3, 3, 3, 4, 4, 4])\"",
        "num_ids": 1047,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    lst = sorted(lst)\n    result = []\n    while lst:\n        result.append(lst[0])\n        lst.remove(lst[0])\n        result.append(lst[-1])\n        lst.remove(lst[-1])\n    return result\n",
        "test": "assert strange_sort_list([]) == []",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the three sides form a valid triangle\n    if a + b > c and b + c > a and c + a > b:\n        # Calculate the area of the triangle using Heron's formula\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00, \"Incorrect area for triangle with sides (3, 4, 5)\"",
        "num_ids": 1086,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    '''\n    \n    # Check if the list is balanced\n    if q[::-1] == q:\n        # Calculate the sum of the elements in the list\n        s = sum(q)\n        # Check if the sum is less than or equal the maximum possible weight\n        if s <= w:\n            return True\n        else:\n            return False\n    else:\n        return False ",
        "test": "assert will_it_fly([3, 2, 3], 1) == False",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    # get the total number of chars in the two lists\n    lst1_total_chars = sum(len(s) for s in lst1)\n    lst2_total_chars = sum(len(s) for s in lst2)\n\n    # if the two lists have the same number of chars, return the first list\n    if lst1_total_chars == lst2_total_chars:\n        return lst1\n\n    # if the first list has less chars, return it\n    if lst1_total_chars < lst2_total_chars:\n        return lst1\n\n    # otherwise, return the second list\n    return lst2 ",
        "test": "assert total_match([], []) == []",
        "num_ids": 1135,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Main function to check if a number is the multiplication of 3 prime numbers\"\"\"\n    primes = []\n    for i in range(2, a):\n        if is_prime(i) and len(primes) < 2:\n            primes.append(i)\n        elif is_prime(i):\n            primes.append(i)\n            break\n    return a == primes[0] * primes[1] * primes[2] ",
        "test": "assert is_multiply_prime(40) == False",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases. \n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1 or x == 1:\n        return True\n    elif n == 0 or x == 0:\n        return False\n    elif x % n != 0:\n        return False\n    else:\n        quotient = x / n\n        return is_simple_power(quotient, n)\n",
        "test": "assert is_simple_power(1, 4) == True ",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number. \n    Note: you may assume the input is always valid. \n    Examples: \n    iscube(1) ==> True \n    iscube(2) ==> False \n    iscube(-1) ==> True \n    iscube(64) ==> True \n    iscube(0) ==> True \n    iscube(180) ==> False \n    '''\n    return a == int(round(a ** (1. / 3))) ** 3\n",
        "test": "assert iscube(1) == True, \"Error in iscube(1)\"",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    hex_to_dec = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15}\n    hex_prime_digits = {'2':True, '3':True, '5':True, '7':True, 'B':True, 'D':True}\n    num_primes = 0\n    for hex_digit in num:\n        if hex_digit in hex_prime_digits:\n            num_primes += 1\n    return num_primes\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 2362,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string. \n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = bin(decimal)[2:] # Converting decimal to binary and removing '0b' at the beginning of the string\n    return \"db\" + binary + \"db\" # Adding 'db' at the beginning and at the end of the binary string\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 939,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n",
        "test": "assert is_happy('abcd') == True",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading. \n    The only problem is, she has lost the code she used for grading. \n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n            GPA       |   Letter grade\n                4.0                  A+\n            > 3.7                 A\n            > 3.3                 A-\n            > 3.0                 B+\n            > 2.7                 B\n            > 2.3                 B-\n            > 2.0                 C+\n            > 1.7                 C\n            > 1.3                 C-\n            > 1.0                 D+\n            > 0.7                 D\n            > 0.0                 D-\n                0.0                 E\n    \n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    \n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0]) == ['A+'], \"Incorrect output\"",
        "num_ids": 2262,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    n = len(string)\n\n    # Check if n is prime or not\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True\n",
        "test": "assert prime_length('Hello') == True, \"Test 1 failed\"",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**n):\n        if i // 10**(n-1) == 1 or i % 10 == 1:\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(4) == 9000, \"Error: Incorrect output for n = 4\"",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n\n    # Initialize a variable to store the sum of digits in binary\n    binary_sum = 0\n\n    # Loop through each digit in the given number\n    while N > 0:\n        # Get the last digit of the number\n        digit = N % 10\n\n        # Convert the digit to binary and add it to the sum\n        binary_digit = bin(digit)[2:]\n        binary_sum += int(binary_digit)\n\n        # Remove the last digit from the number\n        N //= 10\n\n    # Convert the sum to binary and return it as a string\n    return bin(binary_sum)[2:]",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            even_sum += lst[i]\n    return even_sum\n",
        "test": "assert add([4, 2, 6, 7]) == 2 ",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. Note: You should keep the order\n    of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # Split the input string into a list of words\n    words = s.split()\n    # Initialize an empty list to store the ordered words\n    ordered_words = []\n    # Loop through each word in the list\n    for word in words:\n        # If the word is not empty (i.e. it has characters),\n        # sort the characters in the word and join them back into a string\n        if word:\n            ordered_word = ''.join(sorted(word))\n        else:\n            # If the word is empty (i.e. it only has spaces),\n            # just add a space to the list\n            ordered_word = ' '\n        # Append the ordered word to the list\n        ordered_words.append(ordered_word)\n    # Join the list of ordered words back into a string and return it\n    return ' '.join(ordered_words)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 1199,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    coords = []\n    for i, row in enumerate(lst):\n        if x in row:\n            j = row.index(x)\n            coords.append((i, j))\n    \n    coords.sort(key=lambda x: (x[0], -x[1]))\n    \n    return coords\n",
        "test": "assert get_row([",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    if not array:\n        return []\n\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    total_sum = first_index_value + last_index_value\n\n    if total_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
        "test": "assert sort_array([]) == []",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Create a dictionary to map each letter to its rotation by two multiplied to two places\n    rotated_letters = {\n        'a': 'e', 'b': 'f', 'c': 'g', 'd': 'h', 'e': 'i', 'f': 'j', 'g': 'k', 'h': 'l', 'i': 'm', 'j': 'n', 'k': 'o', 'l': 'p', 'm': 'q', 'n': 'r', 'o': 's', 'p': 't', 'q': 'u', 'r': 'v', 's': 'w', 't': 'x', 'u': 'y', 'v': 'z', 'w': 'a', 'x': 'b', 'y': 'c', 'z': 'd',\n    }\n    # Loop through each character in the input string and replace it with its rotated equivalent\n    encrypted_string = ''\n    for char in s:\n        if char.lower() in rotated_letters:\n            encrypted_string += rotated_letters[char.lower()]\n        else:\n            encrypted_string += char\n    return encrypted_string\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 1298,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers. \n    Write a function next_smallest() that returns the 2nd smallest element of the list. \n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    if len(lst) < 2:\n        return None\n    \n    lst = sorted(lst)\n    if lst[0] == lst[1]:\n        return None\n    \n    return lst[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    \n    sentences = S.split('. ')\n    \n    count = 0\n    \n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            count += 1\n    \n    return count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n    \"\"\"\n\n    if not all(isinstance(num, int) for num in (x, y, z)):\n        return False\n\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # define the vowel dictionary\n    vowel_dict = {\n        'a': 'C', 'e': 'E', 'i': 'G', 'o': 'O', 'u': 'U',\n        'A': 'C', 'E': 'E', 'I': 'G', 'O': 'O', 'U': 'U'\n    }\n    # initialize the encoded message string\n    encoded_message = ''\n    # loop through each character in the message\n    for char in message:\n        # check if the character is a vowel\n        if char.lower() in vowel_dict:\n            # add the letter 2 places ahead of the vowel in the english alphabet\n            encoded_message += chr(((ord(char) + 2 - 97) % 26) + 97)\n        else:\n            # swap case of the character\n            if char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char.upper()\n    # return the encoded message\n    return encoded_message ",
        "test": "assert encode(\"Hello World\") == \"HMLEL OWRLD\"",
        "num_ids": 1198,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max(lst)\n    while not is_prime(max_prime):\n        lst.remove(max_prime)\n        max_prime = max(lst)\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sum_of_digits(max_prime)\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 1781,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False. The function should \n    return False is the given dictionary is empty.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    \n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return all_lower or all_upper\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1025,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n    if n <= 1:\n        return []\n\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n\n    return primes\n",
        "test": "assert count_up_to(5) == [2, 3]",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits. \n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    # Convert the integers to strings so we can extract their unit digits\n    a_str = str(a)\n    b_str = str(b)\n    \n    # Get the unit digits of a and b\n    a_unit = int(a_str[-1])\n    b_unit = int(b_str[-1])\n    \n    # Multiply the unit digits and return the result\n    return a_unit * b_unit\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 944,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and s[i] in ['A', 'E', 'I', 'O', 'U'] and i % 2 == 0:\n            count += 1\n    return count\n",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Convert the input value to a float\n    num = float(value)\n    # Check if the number is equidistant from two integers\n    if num % 1 == 0.5:\n        # Round away from zero\n        if num > 0:\n            return int(num) + 1\n        else:\n            return int(num) - 1\n    else:\n        # Round towards zero\n        return round(num)\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(n-1):\n        if n%2 == 0:\n            pile.append(n+2)\n            n += 2\n        else:\n            pile.append(n+1)\n            n += 1\n    return pile\n",
        "test": "assert make_a_pile(1) == [1]  # Test for n = 1",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Remove leading and trailing spaces\n    s = s.strip()\n    # Replace spaces and commas with a single space\n    s = s.replace(\",\", \" \")\n    # Split the string into words using the space character as separator\n    words = s.split()\n    return words\n",
        "test": "assert words_string(\"Hello world\") == [\"Hello\", \"world\"]",
        "num_ids": 918,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    even_nums = []\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            even_nums.append(i)\n    if not even_nums:\n        return -1\n    else:\n        return max(even_nums)\n",
        "test": "assert choose_num(13, 12) == -1, \"Error in choose_num(13, 12)\"",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2.0\n    rounded_avg = round(avg)\n    binary = bin(rounded_avg)[2:]\n    \n    return \"0b\" + binary\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 763,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Loop through the input list and check if each element has any even digit\n    for num in x:\n        even_digit_found = False\n        \n        # Convert the number to a string to check if it has any even digit\n        str_num = str(num)\n        \n        # Loop through each character of the string and check if it's an even digit\n        for char in str_num:\n            if int(char) % 2 == 0:\n                even_digit_found = True\n                break\n        \n        # If no even digit found, add the number to the result list\n        if not even_digit_found:\n            result.append(num)\n    \n    # Sort the result list in increasing order\n    result.sort()\n    \n    return result\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def by_length(arr):\n    # Check if array is empty\n    if len(arr) == 0:\n        return []\n    \n    # Filter out numbers greater than 9 and less than 1\n    filtered_arr = [num for num in arr if num >= 1 and num <= 9]\n    \n    # Sort the filtered array in descending order\n    sorted_arr = sorted(filtered_arr, reverse=True)\n    \n    # Replace each digit with its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    name_arr = []\n    for num in sorted_arr:\n        if num == 1:\n            name_arr.append(\"One\")\n        elif num == 2:\n            name_arr.append(\"Two\")\n        elif num == 3:\n            name_arr.append(\"Three\")\n        elif num == 4:\n            name_arr.append(\"Four\")\n        elif num == 5:\n            name_arr.append(\"Five\")\n        elif num == 6:\n            name_arr.append(\"Six\")\n        elif num == 7:\n            name_arr.append(\"Seven\")\n        elif num == 8:\n            name_arr.append(\"Eight\")\n        elif num == 9:\n            name_arr.append(\"Nine\")\n    \n    return name_arr\n",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
        "num_ids": 1798,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "test": "assert f(0) == []",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    \n    # Initialize counters for even and odd palindromes\n    even_palindromes = 0\n    odd_palindromes = 0\n    \n    # Loop through numbers from 1 to n\n    for num in range(1, n+1):\n        # Convert number to string and reverse it\n        str_num = str(num)\n        rev_str_num = str_num[::-1]\n        \n        # Check if the number is a palindrome\n        if str_num == rev_str_num:\n            # Check if the number is even or odd\n            if num % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    \n    # Return a tuple with the counters\n    return (even_palindromes, odd_palindromes)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = sum(map(int, str(abs(num))))\n        if digit_sum > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].\n    The numbers in the array will be randomly ordered. Your task is to determine\n    if it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n        One right shift operation means shifting all elements of the array by one\n        position in the right direction. The last element of the array will be moved to\n        the starting position in the array i.e. 0th index.\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False. If the given array is empty then return True.\n    Note: The given list is guaranteed to have unique elements.\n    For Example:\n        move_one_ball([3, 4, 5, 1, 2])==>True\n        Explanation: By performin 2 right shift operations, non-decreasing order can\n        be achieved for the given array.\n        move_one_ball([3, 5, 4, 1, 2])==>False\n        Explanation:It is not possible to get non-decreasing order for the given\n        array by performing any number of right shift operations.\n    \"\"\"\n    \n    if not arr:\n        return True\n    \n    n = len(arr)\n    \n    # sort the array using bubble sort\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    \n    # check if the array is sorted in non-decreasing order\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    return True\n",
        "test": "assert move_one_ball([1]) == True",
        "num_ids": 1397,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    This function takes two lists of numbers and determines whether it is possible to\n    perform an exchange of elements between them to make lst1 a list of only even numbers.\n    If it is possible to exchange elements between the lst1 and lst2 to make all the elements\n    of lst1 to be even, return \"YES\". Otherwise, return \"NO\".\n    \"\"\"\n    # If lst1 is empty, return \"YES\"\n    if not lst1:\n        return \"YES\"\n    \n    # Check if lst1 has any odd numbers\n    for num in lst1:\n        if num % 2 != 0:\n            # If lst2 has an odd number, replace lst1's odd number with it\n            if lst2:\n                lst1[lst1.index(num)] = lst2[0]\n                lst2.pop(0)\n                continue\n            # If lst2 doesn't have an odd number, return \"NO\"\n            return \"NO\"\n    \n    # If lst1 has all even numbers, return \"YES\"\n    return \"YES\"\n",
        "test": "assert exchange([2, 4, 6, 8], [1, 3, 5]) == \"YES\"",
        "num_ids": 1483,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    \n    # split the input string into a list of lowercase letters\n    letters = test.split()\n    \n    # initialize a dictionary to store the count of each letter\n    count_dict = {}\n    \n    # iterate through the list of letters\n    for letter in letters:\n        # if the letter is already in the dictionary, increment its count\n        if letter in count_dict:\n            count_dict[letter] += 1\n        # if the letter is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[letter] = 1\n            \n    # find the maximum count from the dictionary\n    max_count = max(count_dict.values())\n    \n    # initialize a new dictionary to store the letters with the maximum count\n    max_count_dict = {}\n    \n    # iterate through the count_dict and add the letters with the maximum count to the new dictionary\n    for key, value in count_dict.items():\n        if value == max_count:\n            max_count_dict[key] = value\n            \n    return max_count_dict",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Delete all characters in s that are equal to any character in c\n    s = ''.join([char for char in s if char not in c])\n\n    # Check if the result string is palindrome\n    is_palindrome = s == s[::-1]\n\n    return s, is_palindrome ",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for char in lst[i]:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \"ng \" + str(i+1) + \" of the \" + str(i+1) + \"nput.\")\n    return result\n",
        "test": "assert odd_count(['1']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"]",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty\n    sub-array of nums.\n    \"\"\"\n    if not nums:\n        return None  # Handle empty input\n\n    min_sum = float('inf')  # Initialize minimum sum to infinity\n    current_sum = 0  # Initialize current sum to zero\n\n    for num in nums:\n        current_sum += num  # Add current number to current sum\n        min_sum = min(min_sum, current_sum)  # Update minimum sum if necessary\n        if current_sum < 0:\n            current_sum = 0  # Reset current sum if negative\n\n    return min_sum\n",
        "test": "assert minSubArraySum([0, 0, 0]) == 0",
        "num_ids": 1779,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    # Initialize variables\n    rows = len(grid)\n    cols = len(grid[0])\n    buckets = 0\n    wells_empty = 0\n\n    # Iterate through each well\n    for row in range(rows):\n        for col in range(cols):\n            # Check if well has water\n            if grid[row][col] == 1:\n                wells_empty += 1\n\n    # Calculate number of buckets needed\n    buckets = math.ceil(wells_empty / capacity)\n\n    return buckets\n",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order. \n    For similar number of ones, sort based on decimal value.\n    \n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert sort_array([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 1175,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s. \n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces. \n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # split the string into a list of words\n    words = s.split()\n\n    # define a function to count the number of consonants in a word\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        count = 0\n        for letter in word:\n            if letter in consonants:\n                count += 1\n        return count\n\n    # filter the list of words to keep only those with n consonants\n    result = [word for word in words if count_consonants(word) == n]\n\n    return result\n",
        "test": "assert select_words(\"simple white space\", 2) == []",
        "num_ids": 1064,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.  \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = \"AEIOUaeiou\"\n    word = word.strip()\n    len_word = len(word)\n    \n    # Check if there are at least two consonants in the right side\n    if len_word < 2:\n        return \"\"\n    \n    # Find the rightmost consonant\n    for i in range(len_word-1, 0, -1):\n        if word[i] not in vowels:\n            break\n    \n    # Find the closest vowel to the right of the rightmost consonant\n    for j in range(i+1, len_word):\n        if word[j] in vowels:\n            return word[j]\n    \n    return \"\"\n",
        "test": "assert get_closest_vowel(\"ab\") == \"\"",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_good(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack[-1] != '(':\n                    return False\n                stack.pop()\n        return not stack\n\n    return 'Yes' if is_good(lst[0] + lst[1]) else 'No'\n",
        "test": "assert match_parens(['()(', ')']) == 'Yes', 'Incorrect result for [\"()(\", \")\"]'",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # Initialize a variable to store the sum of odd elements in even positions\n    sum_of_odd_even_pos = 0\n    \n    # Loop through the list\n    for i in range(0, len(lst), 2):\n        # Check if the element is odd\n        if lst[i] % 2 != 0:\n            # Add the element to the sum\n            sum_of_odd_even_pos += lst[i]\n    \n    return sum_of_odd_even_pos\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum\n",
        "test": "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24  # sum of 21 + 3 ",
        "num_ids": 700,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = 3 * n + 1 if n % 2 == 1 else n // 2\n    result.append(1)\n    return sorted(result)\n",
        "test": "assert get_odd_collatz(1) == [1], \"Test case 1 failed\"",
        "num_ids": 1335,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def valid_date(date):\n    import re\n    import datetime\n    \n    # Checking if the date string is not empty\n    if not date:\n        return False\n    \n    # Checking if the date is in the correct format (mm-dd-yyyy)\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    \n    # Extracting the month, day and year from the date string\n    month, day, year = map(int, date.split('-'))\n    \n    # Checking if the month is in the range of 1 to 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Checking if the day is in the range of 1 to 31 based on the month\n    if (month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31) or (month in [4, 6, 9, 11] and day < 1 or day > 30):\n        return False\n    \n    # Checking if the day is in the range of 1 to 29 based on the month\n    if month == 2 and day < 1 or day > 29:\n        return False\n    \n    # Checking if the year is a leap year\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    else:\n        days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Checking if the day is less than or equal to the number of days in the month\n    if day > days_in_month[month - 1]:\n        return False\n    \n    # If all checks are passed, return True\n    return True",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 1514,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    '''\n\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for letter in txt:\n            if letter.islower():\n                count += ord(letter) % 2\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # Check if list is empty\n    if not lst:\n        return True\n    \n    # Check if list has more than one duplicate of the same number\n    if len(lst) != len(set(lst)):\n        return False\n\n    # Sort the list\n    sorted_lst = sorted(lst)\n\n    # Check if the sorted list is the same as the original list\n    return lst == sorted_lst\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((-3, -1), (-5, 5)) == \"YES\" ",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    # Calculate the product of signs of all numbers\n    sign_product = 1\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n    \n    # Calculate the sum of magnitudes of all numbers\n    magnitude_sum = 0\n    for num in arr:\n        magnitude_sum += abs(num)\n    \n    # Return the product of signs times sum of magnitudes\n    return sign_product * magnitude_sum\n",
        "test": "assert prod_signs([]) == None",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def minPath(grid, k):\n    def dfs(curr, k, visited, stack, min_stack, path_stack):\n        if k == 0:\n            return True\n        if curr == len(grid) * len(grid):\n            min_stack.append(path_stack)\n            return True\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if (i, j) not in visited and (i > 0 and grid[i][j] < grid[i - 1][j]) and (j > 0 and grid[i][j] < grid[i][j - 1]) and (i < len(grid) - 1 and grid[i][j] < grid[i + 1][j]) and (j < len(grid[0]) - 1 and grid[i][j] < grid[i][j + 1]):\n                    visited.add((i, j))\n                    stack.append((i, j))\n                    path_stack.append(grid[i][j])\n                    dfs(curr + 1, k, visited, stack, min_stack, path_stack)\n                    stack.pop()\n                    visited.remove((i, j))\n        return False\n\n    visited = set()\n    stack = []\n    min_stack = []\n    path_stack = []\n    dfs(0, k, visited, stack, min_stack, path_stack)\n    return min_stack[0]\n",
        "test": "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 4) == [1, 2, 1, 2]",
        "num_ids": 1353,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    sequence = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            sequence.append(sequence[i - 1] + i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 1])\n    return sequence\n",
        "test": "assert tri(1) == [1, 3, 2]",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits. \n    Return 0 if all digits are even. \n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n        else:\n            product = 0\n            break\n    return product\n",
        "test": "assert digits(1) == 1, \"Test 1 failed\"",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_nested(string):\n    if len(string) % 2 != 0:\n        return False\n\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n\n    return True if stack else False ",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    \n    # Round each element in the list to the upper int(Ceiling) first\n    lst = [int(math.ceil(num)) for num in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    result = sum([num ** 2 for num in lst])\n    \n    return result\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt:\n        return False\n\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False ",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False ",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    \n    # Initialize the result as -1\n    result = -1\n    \n    # Loop through the array from the second element to the last element\n    for i in range(1, len(arr)):\n        # If the current element is not greater than or equal to the element preceding it\n        if arr[i] < arr[i-1]:\n            # If the result is -1, set the result as the current index\n            if result == -1:\n                result = i\n            # If the result is greater than the current index, set the result as the current index\n            elif result > i:\n                result = i\n    \n    # Return the result\n    return result\n",
        "test": "assert can_arrange([1,2,4,3,5]) == 3",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. \n    If there is no negative or positive integers, return them as None.\n    \n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    # initialize variables to store largest negative integer and smallest positive integer\n    largest_negative = None\n    smallest_positive = None\n    \n    # iterate over the list and update largest_negative and smallest_positive variables\n    for num in lst:\n        if isinstance(num, int):\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    def convert_string_to_float(value):\n        \"\"\"\n        Helper function to convert a string to a float.\n        \"\"\"\n        if ',' in value:\n            value = value.replace(',', '.')\n        return float(value)\n\n    if type(a) != type(b):\n        a = convert_string_to_float(str(a)) if type(a) == str else a\n        b = convert_string_to_float(str(b)) if type(b) == str else b\n\n    if a == b:\n        return None\n    else:\n        return a if a > b else b",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n        if count == 4:\n            return True\n    return False\n",
        "test": "assert is_equal_to_sum_even(6) == False",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    # Check if the input is valid\n    if n <= 0:\n        return 1\n\n    # Initialize the factorial result\n    result = 1\n\n    # Calculate the special factorial\n    for i in range(1, n+1):\n        result *= i\n\n    return result",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    result = []\n    for i in range(len(text)):\n        if text[i] == \" \":\n            if i == 0 or text[i-1] != \" \":\n                result.append(\"_\")\n            else:\n                result.append(\"-\")\n        else:\n            result.append(text[i])\n    return \"\".join(result)\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if there are more than three digits in the file name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n\n    # Check if there is only one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into its components\n    name_parts = file_name.split('.')\n\n    # Check if the first part of the file name starts with a letter\n    if not name_parts[0][0].isalpha():\n        return 'No'\n\n    # Check if the second part of the file name is one of the valid extensions\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all checks pass, return 'Yes'\n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == 'Yes' ",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n\n    # Split the sentence into a list of words.\n    words = sentence.split()\n\n    # Filter out the words whose lengths are not prime numbers.\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n\n    # Join the filtered words back into a string and return it.\n    return ' '.join(prime_words)\n",
        "test": "assert words_in_sentence(\"\") == \"\"",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    # Convert strings to fractions\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate x * n\n    xn_num = x_num * n_num\n    xn_den = x_den * n_den\n\n    # Check if x * n evaluates to a whole number\n    if xn_num % xn_den == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 1072,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    sorted_nums = sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n\n    return sorted_nums\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0]) % 2 == 1) and (int(str(num)[-1]) % 2 == 1):\n            count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for k in range(n - 2):\n        for j in range(k + 1, n - 1):\n            for i in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def bf(planet1, planet2):\n    # Define a list of all planets in our solar system\n    planet_list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are in the list\n    if planet1 in planet_list and planet2 in planet_list:\n        # Find the index of planet1 and planet2 in the list\n        planet1_idx = planet_list.index(planet1)\n        planet2_idx = planet_list.index(planet2)\n        \n        # Find the planets between planet1 and planet2\n        planets_between = planet_list[planet1_idx+1:planet2_idx]\n        \n        # Return the planets between in a tuple sorted by proximity to the sun\n        return tuple(sorted(planets_between, key=lambda p: planet_list.index(p)))\n    \n    # If planet1 or planet2 are not in the list, return an empty tuple\n    else:\n        return ()\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. \n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule. \n    If two words have the same length, sort the list alphabetically. \n    The function should return a list of strings in sorted order. \n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Create a new list to store the words with odd lengths\n    odd_length_words = []\n    # Iterate through the input list and add words with odd length to the new list\n    for word in lst:\n        if len(word) % 2 != 0:\n            odd_length_words.append(word)\n    # Remove the words from the input list\n    for word in odd_length_words:\n        lst.remove(word)\n    # Sort the list based on length of each word and then alphabetically if lengths are same\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1145,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n <= 1:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through the list\n    for num in lst:\n        # Check if the number is odd and positive or zero\n        if num > 0 and num % 2 == 1:\n            # Add the square of the number to the sum\n            sum += num * num\n    \n    # Return the final sum\n    return sum\n",
        "test": "assert double_the_difference([0]) == 0",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def compare(game, guess):\n    result = []\n    for g, s in zip(guess, game):\n        if g == s:\n            result.append(0)\n        else:\n            result.append(abs(g - s))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    def extension_strength(ext):\n        uppercase_count = sum(1 for c in ext if c.isupper())\n        lowercase_count = sum(1 for c in ext if c.islower())\n        return uppercase_count - lowercase_count\n\n    max_strength = max(extension_strength(ext) for ext in extensions)\n    strongest_extensions = [ext for ext in extensions if extension_strength(ext) == max_strength]\n    return f\"{class_name}.{strongest_extensions[0]}\" ",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 1657,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word.\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n    \"\"\"\n    \n    # convert b to a list of rotations\n    b_rotations = []\n    for i in range(len(b)):\n        b_rotations.append(b[i:] + b[:i])\n    \n    # check if any of the rotations of b is a substring in a\n    for rot in b_rotations:\n        if rot in a:\n            return True\n    \n    return False\n    \n",
        "test": "assert cycpattern_check(\"hello\",\"ell\") == True",
        "num_ids": 796,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    roman_numeral = ''\n    for value, symbol in roman_numerals.items():\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 1035,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    \n    # Check if the three sides form a right-angled triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_length:\n            max_length = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_length:\n            if word < max_word:\n                max_word = word\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals. \n    You should return an array of [ total number of eaten carrots after your meals, \n                                            the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    0 <= number <= 1000\n    0 <= need <= 1000\n    0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    total_eaten = number + need\n    if total_eaten <= remaining:\n        return [total_eaten, remaining - total_eaten]\n    else:\n        return [total_eaten, 0]\n",
        "test": "assert eat(1, 10, 10) == [11, 0]",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Initialize the expression with the first operand\n    expression = str(operand[0])\n\n    # Iterate through the operator and operand lists\n    for i in range(1, len(operator) + 1):\n        if operator[i - 1] == '+':\n            expression += ' + ' + str(operand[i])\n        elif operator[i - 1] == '-':\n            expression += ' - ' + str(operand[i])\n        elif operator[i - 1] == '*':\n            expression += ' * ' + str(operand[i])\n        elif operator[i - 1] == '//':\n            expression += ' // ' + str(operand[i])\n        elif operator[i - 1] == '**':\n            expression += ' ** ' + str(operand[i])\n\n    # Evaluate the expression and return the result\n    return eval(expression) ",
        "test": "assert do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9",
        "num_ids": 1564,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is. \n    If the string contains no letters, reverse the string. \n    The function should return the resulted string. \n    Examples \n    solve(\"1234\") = \"4321\" \n    solve(\"ab\") = \"AB\" \n    solve(\"#a@C\") = \"#A@c\" \n    \"\"\" \n    \n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through the string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Reverse the case of the letter and add it to the result string\n            result += char.swapcase()\n        else:\n            # Keep the character as is and add it to the result string\n            result += char\n            \n    # If the result string contains no letters, reverse the string\n    if not any(char.isalpha() for char in result):\n        return result[::-1]\n    \n    # Return the result string\n    return result\n",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    else:\n        hash_object = hashlib.md5(text.encode())\n        return hash_object.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    if a > b:\n        a, b = b, a  # swap if a is greater than b\n\n    # create a list of even digits between a and b\n    even_digits = [digit for digit in range(a, b+1) if digit % 2 == 0]\n\n    return even_digits\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 768,
        "indeed": false
    }
]