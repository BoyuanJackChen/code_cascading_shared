[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold. \"\"\"\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 884,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    stack = []\n    groups = []\n    current_group = ''\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            if not stack:\n                return []\n            stack.pop()\n            current_group += char\n            if not stack:\n                groups.append(current_group)\n                current_group = ''\n\n    if stack:\n        return []\n\n    return groups\n",
        "test": "assert separate_paren_groups(\"()\") == [\"()\"]",
        "num_ids": 2059,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(numbers)",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0 ",
        "num_ids": 1187,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list 'numbers' \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i != len(numbers) - 1:\n            result.append(numbers[i])\n            result.append(delimeter)\n        else:\n            result.append(numbers[i])\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    levels = []\n    max_level = 0\n\n    for group in paren_string.split():\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n            elif char == ')':\n                level -= 1\n                if level < 0:\n                    return []  # Parentheses don't match\n        max_level = max(max_level, level)\n        levels.append(level)\n\n    if max_level < 0:\n        return []  # Parentheses don't match\n\n    return levels",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]  # Test case 1 ",
        "num_ids": 1546,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        Tuple[int, int]: A tuple containing the sum and the product of all the integers in the list.\n    \n    Example:\n        >>> sum_product([])\n        (0, 1)\n        >>> sum_product([1, 2, 3, 4])\n        (10, 24)\n    \"\"\"\n    \n    if not numbers:\n        return (0, 1)\n    \n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    \n    for number in numbers:\n        product_numbers *= number\n    \n    return (sum_numbers, product_numbers)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1149,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence. \"\"\"\n    max_so_far = numbers[0]\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4] ",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n\n    palindrome = \"\"\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome = string[:i+1] + string[i:][::-1]\n            break\n\n    if not palindrome:\n        return string + string[::-1]\n\n    return palindrome\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert strings to lists of characters\n    a_list = list(a)\n    b_list = list(b)\n    # Perform binary XOR on the lists\n    xor_list = [str(int(a_char) ^ int(b_char)) for a_char, b_char in zip(a_list, b_list)]\n    # Convert list back to string and return\n    return ''.join(xor_list)\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 1124,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    Args:\n        strings (List[str]): List of strings to find the longest one from.\n    \n    Returns:\n        Optional[str]: The longest string in the list or None if the list is empty.\n    \n    >>> longest([])\n    None\n    \n    >>> longest(['a', 'b', 'c']) # doctest: +NORMALIZE_WHITESPACE\n    'a'\n    \n    >>> longest(['a', 'bb', 'ccc']) # doctest: +NORMALIZE_WHITESPACE\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "test": "assert longest([]) == None",
        "num_ids": 1035,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)+1)]\n",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == '0', \"Error in string_sequence(0)\"",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ignore case\n    string = string.lower()\n    # Create an empty set to store distinct characters\n    distinct_chars = set()\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is not already in the set, add it\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    # Return the length of the set (number of distinct characters)\n    return len(distinct_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3, \"Test 1 failed\"",
        "num_ids": 978,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    notes = music_string.split()\n    beats_per_note = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n\n    for note in notes:\n        result.append(beats_per_note[note])\n\n    return result",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 2508,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Convert the string to a list of numbers as integers\n    numbers_list = [int(num) for num in numbers.split()]\n    \n    # Sort the list of numbers in ascending order\n    numbers_list.sort()\n    \n    # Convert the sorted list of numbers back to a string\n    sorted_numbers = ' '.join(str(num) for num in numbers_list)\n    \n    return sorted_numbers\n",
        "test": "assert sort_numbers('five three one') == 'one three five'",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n    min_diff = float('inf')\n    closest = (numbers[0], numbers[1])\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest = (numbers[i], numbers[j])\n    return closest\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 2129,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]  # Testing for correct linear transformation",
        "num_ids": 1675,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 885,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0, \"strlen('') should be 0\"",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 573,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \n    Args:\n    - numbers: A list of integers.\n    \n    Returns:\n    - A new list of integers with duplicates removed.\n    \n    Examples:\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    \n    # Create a new list to store the unique numbers\n    unique_numbers = []\n    \n    # Loop through the input list and add each element to the new list if it has not been added before\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    \n    # Return the new list\n    return unique_numbers\n",
        "test": "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == '', \"concatenate([]) should return ''\"",
        "num_ids": 576,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix. \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == [], \"Error in handling empty list\"",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 927,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 982,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreoever, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    if len(xs) % 2 == 1 or max(xs) == 0:\n        return None\n\n    x = 0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        x += 1",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0",
        "num_ids": 1955,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted. \n    \n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    \n    l_copy = l.copy()\n    l_copy.sort()\n    l_sorted = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_sorted.append(l[i])\n        else:\n            l_sorted.append(l_copy[i//3])\n    return l_sorted ",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Use set() to get unique elements and sorted() to sort them\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 878,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n\n    count = 0\n    for i in range(2, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n\n    l_even = sorted([i for i in l if i % 2 == 0])\n    l_odd = [i for i in l if i % 2 != 0]\n    l_sorted = l_even + l_odd\n    return l_sorted\n",
        "test": "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 38,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"hello\")) == \"hello\"  # Test for \"hello\" input",
        "num_ids": 1397,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    fib = [0, 1]\n    count = 0\n    while count < n:\n        next_fib = fib[0] + fib[1]\n        fib = [fib[1], next_fib]\n        if is_prime(next_fib):\n            count += 1\n    return next_fib\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1521,
        "indeed": true
    },
    {
        "number": 40,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1884,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Initialize the two sets of cars\n    left_cars = [0] * n\n    right_cars = [0] * n\n\n    # Simulate the movement of the cars\n    collisions = 0\n    for i in range(n):\n        # Move the left cars\n        for j in range(i, n):\n            left_cars[j] += 1\n\n        # Move the right cars\n        for j in range(i, n):\n            right_cars[j] -= 1\n\n        # Check for collisions\n        for j in range(i, n):\n            if left_cars[j] == right_cars[j]:\n                collisions += 1\n\n    return collisions",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 1633,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    new_list = []\n    for i in l:\n        new_list.append(i+1)\n    return new_list\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input. \n    It returns True if there are two distinct elements in the list that \n    sum to zero, and False otherwise.\n    \"\"\"\n    \n    seen = set()\n    for num in l:\n        if -num in seen and num != -num:\n            return True\n        seen.add(num)\n    \n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 822,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x //= base\n    return result\n",
        "test": "assert change_base(8, 3) == '22', \"The base conversion of 8 to 3 is incorrect.\"",
        "num_ids": 1067,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5  # Testing the function with a sample input",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c = 0, 2, 0\n        for i in range(4, n+1):\n            c = a + b + a + a\n            a, b = b, c\n        return c",
        "test": "assert fib4(0) == 0",
        "num_ids": 1691,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2] ",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # convert the string to lowercase\n    text = text.lower()\n    # reverse the string using slicing\n    reverse_text = text[::-1]\n    # compare the original string with the reversed string\n    if text == reverse_text:\n        return True\n    else:\n        return False\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if p == 2:\n        return 0 if n == 0 else 1\n    if p == 1:\n        return 1\n    if p == 4:\n        return 2 if n % 2 == 0 else 3\n    return pow(2, n, p)\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True  # Test case 1",
        "num_ids": 670,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5, \"Incorrect value\"",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Remove all duplicates from s0 and s1\n    s0_unique = ''.join(set(s0))\n    s1_unique = ''.join(set(s1))\n    \n    # Sort the unique characters in both strings\n    s0_unique_sorted = sorted(s0_unique)\n    s1_unique_sorted = sorted(s1_unique)\n    \n    # Check if the sorted unique characters are equal\n    return s0_unique_sorted == s1_unique_sorted\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(1) == 1, \"Incorrect Fibonacci number\"",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 1058,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    \n    n = len(l)\n    if n < 2:\n        return True\n    \n    # check if list is increasing or decreasing\n    if l[0] < l[1]:\n        # increasing\n        for i in range(1, n-1):\n            if l[i] <= l[i+1]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        # decreasing\n        for i in range(1, n-1):\n            if l[i] >= l[i+1]:\n                continue\n            else:\n                return False\n        return True ",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 1245,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    \n    def is_prime(num: int) -> bool:\n        \"\"\"Helper function to check if a number is prime or not.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    largest_prime = -1\n    \n    # Check for factors of 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Check for odd factors\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # If n is a prime number greater than 2, largest_prime will still be -1, so set it to n\n    if n > 2 and is_prime(n):\n        largest_prime = n\n    \n    return largest_prime\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 1286,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n",
        "test": "assert sum_to_n(30) == 465, \"sum_to_n(30) should be 465\"",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    stack = []\n\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 1034,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    n = len(xs)\n    result = [0] * (n-1)\n    for i in range(1, n):\n        result[i-1] = xs[i] * i\n    return result\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 1432,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1) == 0\n    >>> fibfib(5) == 4\n    >>> fibfib(8) == 24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 1331,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def vowels_count(s):\n    \"\"\"\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2, \"Test case 1 failed\"",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    num_digits = len(str(x))\n    if shift > num_digits:\n        return str(x)[::-1]\n    else:\n        return str(x)[num_digits-shift:] + str(x)[:num_digits-shift]\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 1025,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Split the string into two parts using the word \"and\" as the separator\n    parts = s.split(\" and \")\n    # Get the number of apples and oranges from the string\n    apples = int(parts[0].split(\" \")[0])\n    oranges = int(parts[1].split(\" \")[0])\n    # Calculate the number of mango fruits in the basket\n    mango = n - apples - oranges\n    return mango\n",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 1994,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pluck(arr):\n    # Find the smallest even value and its index\n    min_val = float('inf')\n    min_idx = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_idx = i\n\n    # If there is no even value or the array is empty, return an empty list\n    if min_val == float('inf') or min_idx == -1:\n        return []\n\n    # Return the node with the smallest value and index in a list\n    return [min_val, min_idx]\n",
        "test": "assert pluck([4, 2, 3]) == [2, 1]",
        "num_ids": 1468,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n\n    freq_dict = {}\n    for num in lst:\n        if num > 0:\n            if num in freq_dict:\n                freq_dict[num] += 1\n            else:\n                freq_dict[num] = 1\n\n    for num in sorted(freq_dict.keys(), reverse=True):\n        if freq_dict[num] >= num:\n            return num\n\n    return -1 ",
        "test": "assert search([4, 1, 2, 2, 3, 1]) == 2  # Test case 1",
        "num_ids": 1385,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst_len = len(lst)\n    if lst_len == 0:\n        return []\n    elif lst_len == 1:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst.remove(min_val)\n        lst.remove(max_val)\n        return [min_val] + [max_val] + strange_sort_list(lst)\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 1512,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the area of the triangle using the Heron's formula\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 1505,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def will_it_fly(q, w):\n    if len(q) == 1 and q[0] <= w:\n        return True\n    elif len(q) == 2 and q[0] == q[1] and q[0] <= w:\n        return True\n    else:\n        return False",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 73,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # First, we need to check if the array is already palindromic\n    n = len(arr)\n    if n % 2 == 0:\n        for i in range(n // 2):\n            if arr[i] != arr[n - i - 1]:\n                return 0\n    else:\n        for i in range(n // 2):\n            if arr[i] != arr[n - i - 1]:\n                return 1\n\n    # If the array is already palindromic, we need to find the minimum number of changes\n    # to make it palindromic. For this, we can use a two-pointer approach.\n    left = 0\n    right = n - 1\n    count = 0\n    while left < right:\n        # If the left element is equal to the right element, we don't need to change it\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        # If the left element is less than the right element, we can change the left element to the right element\n        elif arr[left] < arr[right]:\n            arr[left] = arr[right]\n            left += 1\n            count += 1\n        # If the left element is greater than the right element, we can change the right element to the left element\n        else:\n            arr[right] = arr[left]\n            right -= 1\n            count += 1\n\n    return count\n",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 1519,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def total_match(lst1, lst2):\n    if len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    \n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a given number is the multiplication of 3 prime numbers\"\"\"\n    # Check if a is less than 100\n    if a >= 100:\n        return False\n    # Check if a is the product of 3 primes\n    primes = [p for p in range(2, int(a**0.5)+1) if is_prime(p)]\n    if len(primes) < 2:\n        return False\n    for i in range(len(primes)-1):\n        for j in range(i+1, len(primes)):\n            if is_prime(a // (primes[i] * primes[j])):\n                return True\n    return False",
        "test": "assert is_multiply_prime(35) == True",
        "num_ids": 1746,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Returns true if a number x is a simple power of n and false in other cases.\n    x is a simple power of n if n**int(x) = x\n    \"\"\"\n    if x == 0 or n == 0:\n        return False\n    return x == n ** int(x / n)\n",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    # Check if a is negative, in which case the cube root will be imaginary\n    if a < 0:\n        return False\n    # Check if a is a perfect cube\n    cube_root = int(round(a**(1/3)))\n    return cube_root**3 == a ",
        "test": "assert iscube(1) == True",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    \n    primes = [2, 3, 5, 7, 11, 13, 17]\n    count = 0\n    \n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            if digit in ['B', 'D']:\n                digit = '11' if digit == 'B' else '13'\n                digit = int(digit, 16)\n            else:\n                digit = int(digit, 16)\n            if digit in primes:\n                count += 1\n                \n    return count\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 1829,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n    # Convert the decimal number to a binary string\n    binary = bin(decimal)[2:]\n\n    # Add 'db' at the beginning and end of the string\n    binary = 'db' + binary + 'db'\n\n    return binary\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n    return True\n",
        "test": "assert not is_happy('aa'), \"Test 2 failed\"",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n            GPA     |       Letter grade\n            4.0            A+\n        > 3.7            A\n        > 3.3            A-\n        > 3.0            B+\n        > 2.7            B\n        > 2.3            B-\n        > 2.0            C+\n        > 1.7            C\n        > 1.3            C-\n        > 1.0            D+\n        > 0.7            D\n        > 0.0            D-\n            0.0            E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    \n    grade_points = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n    \n    letter_grades = []\n    for gpa in grades:\n        for key, value in grade_points.items():\n            if gpa >= key:\n                letter_grades.append(value)\n                break\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0]) == ['A+']",
        "num_ids": 3156,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Return True if the length of the string is prime, False otherwise\"\"\"\n    return is_prime(len(string))\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, n+1):\n        if str(i)[:1] == '1' or str(i)[-1:] == '1':\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def solve(N):\n    \"\"\"\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n\n    binary_sum = 0\n    while N > 0:\n        digit = N % 10\n        binary_digit = bin(digit)[2:]  # remove the '0b' prefix\n        binary_sum += int(binary_digit)\n        N //= 10\n\n    return bin(binary_sum)[2:]  # remove the '0b' prefix\n",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 1229,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through the list starting from the odd indices\n    for i in range(1, len(lst), 2):\n        \n        # Add the even element to the sum\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n            \n    # Return the sum\n    return sum\n",
        "test": "assert add([4, 2, 6, 7]) == 2 ",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value. \n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    # Create an empty list to store ordered words\n    ordered_words = []\n    # Loop through the words list\n    for word in words:\n        # If the word is not empty, sort its characters and join them to form a new word\n        if word != '':\n            ordered_word = ''.join(sorted(word))\n            # Append the ordered word to the ordered_words list\n            ordered_words.append(ordered_word)\n        else:\n            # If the word is empty, append a blank space to the ordered_words list\n            ordered_words.append('')\n    # Join the ordered_words list back into a string and return it\n    return ' '.join(ordered_words)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 1551,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    result = []\n\n    # Iterate through rows\n    for i, row in enumerate(lst):\n        # Find occurrences of x in the row\n        col_indices = [j for j, num in enumerate(row) if num == x]\n        # Sort indices in descending order\n        col_indices.sort(reverse=True)\n        # Add tuples to result\n        for col_index in col_indices:\n            result.append((i, col_index))\n\n    # Sort result by row indices in ascending order\n    result.sort(key=lambda x: x[0])\n\n    return result\n",
        "test": "assert get_row([",
        "num_ids": 2069,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    # create a copy of the given array\n    sorted_array = array.copy()\n    \n    # sort the array based on the sum of the first and last index values\n    if sum(sorted_array[0:2]) % 2 == 0:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n        \n    return sorted_array\n",
        "test": "assert sort_array([5]) == [5], \"Test 2 failed\"",
        "num_ids": 1743,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    s = s.lower()  # Convert string to lowercase\n    encrypted_s = ''  # Initialize empty string for encrypted string\n    for char in s:\n        if char.isalpha():\n            # Calculate new character index by adding 2*2 to current index\n            new_index = (ord(char) - 97 + 2*2) % 26\n            # Add new character to encrypted string\n            encrypted_s += chr(new_index + 97)\n        else:\n            # Add non-alphabetic character to encrypted string\n            encrypted_s += char\n    return encrypted_s\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 1568,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1121,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences\n    sentences = S.split('. ')\n    sentences.extend(S.split('! '))\n    sentences.extend(S.split('? '))\n    \n    # Count the number of boredom sentences\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0].lower() == 'i':\n            count += 1\n    \n    return count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if not all(isinstance(n, int) for n in [x, y, z]):\n        return False\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                index = vowels.index(char)\n                if index >= 2:\n                    encoded_message += vowels[index-2]\n                else:\n                    encoded_message += vowels[len(vowels)-(index-1)]\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n            \n    return encoded_message\n",
        "test": "assert encode(\"b\") == \"B\"",
        "num_ids": 1437,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max([x for x in lst if is_prime(x)])\n    return sum(int(digit) for digit in str(largest_prime))\n",
        "test": "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
        "num_ids": 2592,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False. \n    The function should return False is the given dictionary is empty. \n    Examples: \n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True. \n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False. \n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False. \n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False. \n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True. \n    \"\"\"\n    if not dict: # Check if dictionary is empty\n        return False\n    \n    first_key = next(iter(dict)) # Get the first key from the dictionary\n    \n    if not isinstance(first_key, str): # Check if the first key is a string\n        return False\n    \n    if first_key == first_key.lower(): # Check if the first key is in lower case\n        return all(key.lower() == key for key in dict.keys()) # Check if all keys are in lower case\n    elif first_key == first_key.upper(): # Check if the first key is in upper case\n        return all(key.upper() == key for key in dict.keys()) # Check if all keys are in upper case\n    else:\n        return False\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True, \"check_dict_case({'a': 'apple', 'b': 'banana'}) should return True.\"",
        "num_ids": 1994,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    if n < 2:\n        return []\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n",
        "test": "assert count_up_to(5) == [2,3]",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits. \n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    # Convert the input integers to strings\n    a_str = str(a)\n    b_str = str(b)\n    \n    # Get the unit digits of both numbers\n    a_unit_digit = int(a_str[-1])\n    b_unit_digit = int(b_str[-1])\n    \n    # Multiply the unit digits and return the result\n    return a_unit_digit * b_unit_digit\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_upper(s):\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count",
        "test": "assert count_upper('abcdefg') == 0",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    float_value = float(value)\n    int_value = round(float_value)\n    if abs(int_value - float_value) == 0.5:\n        if int_value > 0:\n            return int_value - 1\n        else:\n            return int_value + 1\n    else:\n        return int_value\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1437,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    pile = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            pile.append(pile[i] + 2)\n        else:\n            pile.append(pile[i] + 2*i + 3)\n    return pile",
        "test": "assert make_a_pile(4) == [4, 6, 8, 10]",
        "num_ids": 1406,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Replace commas with spaces to make splitting easier\n    s = s.replace(\",\", \" \")\n    # Split the string into words and return the list of words\n    return s.split()\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1088,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_num = -1\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            max_num = max(max_num, num)\n    return max_num ",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 1052,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    average = round((m + n) / 2)\n    binary = bin(average)\n    return binary\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1227,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # Create a list to store the result\n    result = []\n    \n    # Loop through each element in the input list\n    for num in x:\n        # Convert the number to a string and split it into individual digits\n        digits = [int(digit) for digit in str(num)]\n        \n        # Check if any digit is even\n        has_even_digit = any(digit % 2 == 0 for digit in digits)\n        \n        # If there is no even digit, add the number to the result list\n        if not has_even_digit:\n            result.append(num)\n    \n    # Return the sorted result list\n    return sorted(result)\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1727,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def by_length(arr):\n    # If the array is empty, return an empty array\n    if not arr:\n        return []\n\n    # Sort the integers between 1 and 9 inclusive and reverse the array\n    arr = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n\n    # Replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    name_map = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    result = [name_map[x] for x in arr]\n\n    # If the array has any strange number ignore it\n    if any(x < 1 or x > 9 for x in arr):\n        result = [\"One\"]\n\n    return result",
        "test": "assert by_length([]) == []",
        "num_ids": 1534,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "test": "assert f(1) == [1]  # f(1) should return a list of size 1 with value 1",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1] and num % 2 == 0:\n            even_count += 1\n        elif str(num) == str(num)[::-1] and num % 2 != 0:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 1346,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_nums(arr):\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing  \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.  \n    \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False. If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                        be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                        array by performing any number of right shift operations.\n                        \n    \"\"\"\n    \n    # If the array is empty, it's already sorted\n    if not arr:\n        return True\n    \n    # Create a copy of the array to avoid modifying the original array\n    arr_copy = arr.copy()\n    \n    # Sort the array to determine the maximum number of right shifts needed\n    arr_copy.sort()\n    \n    # If the maximum number of right shifts needed is greater than the length of the array, it's not possible to sort the array\n    if len(arr) - arr_copy.index(min(arr_copy)) > len(arr_copy):\n        return False\n    \n    # Otherwise, it's possible to sort the array using right shifts\n    return True\n",
        "test": "assert move_one_ball([3, 4, 5, 1, 2]) == True",
        "num_ids": 2849,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\". For example: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" It is assumed that the input lists will be non-empty.\"\"\"\n    \n    for num in lst1:\n        if num % 2 == 1:\n            for i in range(len(lst2)):\n                if lst2[i] % 2 == 0:\n                    lst1[lst1.index(num)], lst2[i] = lst2[i], num\n                    if all(x % 2 == 0 for x in lst1):\n                        return \"YES\"\n    return \"NO\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 2448,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    if not test:\n        return {}\n\n    test_list = test.split()\n    letter_count = {}\n\n    for letter in test_list:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    max_count = max(letter_count.values())\n    max_dict = {}\n\n    for key, value in letter_count.items():\n        if value == max_count:\n            max_dict[key] = value\n\n    return max_dict ",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 1871,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome. \n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Remove all characters in s that are equal to any character in c\n    new_s = \"\"\n    for char in s:\n        if char not in c:\n            new_s += char\n    # Check if the result string is palindrome\n    if new_s == new_s[::-1]:\n        return (new_s, True)\n    else:\n        return (new_s, False)\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 1352,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i, s in enumerate(lst):\n        count = 0\n        for digit in s:\n            if int(digit) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{} of the {}nput.\".format(count, i, i))\n    return result",
        "test": "assert odd_count(['3', \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
        "num_ids": 2003,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums. \n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    \n    # Initialize the minimum sum and the current sum\n    min_sum = float('inf')\n    current_sum = 0\n    \n    # Iterate through the array, adding each element to the current sum\n    for num in nums:\n        current_sum += num\n        \n        # If the current sum is less than the minimum sum, update the minimum sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n            \n        # If the current sum is negative, reset the current sum to 0\n        if current_sum < 0:\n            current_sum = 0\n            \n    return min_sum\n",
        "test": "assert minSubArraySum([1, 2, 3, 4, 1]) == 1, \"Incorrect output for [1, 2, 3, 4, 1]\"",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_fill(grid, capacity):\n    import math\n    # Get the dimensions of the grid\n    n_rows = len(grid)\n    n_cols = len(grid[0])\n    bucket_count = 0\n\n    # Initialize the bucket count\n    for row in grid:\n        bucket_count += row.count(1)\n\n    # Initialize the number of times we need to lower the bucket\n    times_to_lower = 0\n\n    while bucket_count > 0:\n        # Calculate the maximum number of units we can extract per bucket\n        max_units = capacity\n\n        # Iterate through the grid and extract water\n        for row in grid:\n            if bucket_count == 0:\n                break\n            for i in range(n_cols):\n                if row[i] == 1:\n                    row[i] = 0\n                    bucket_count -= 1\n                    max_units -= 1\n                    if max_units == 0:\n                        break\n                if max_units == 0:\n                    break\n\n        times_to_lower += 1\n\n    return times_to_lower",
        "test": "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
        "num_ids": 2139,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order. \n    For similar number of ones, sort based on decimal value. \n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    \n    # first, count the number of ones in each element's binary representation\n    num_ones = []\n    for num in arr:\n        binary_rep = bin(num)[2:]\n        num_ones.append(binary_rep.count('1'))\n    \n    # use a lambda function to sort based on the number of ones and then decimal value\n    return sorted(arr, key=lambda x: (num_ones[arr.index(x)], x))\n",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 1673,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Split the string into words\n    words = s.split()\n\n    # Initialize an empty list to store the selected words\n    selected_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Initialize a counter for the number of consonants in the word\n        consonant_count = 0\n\n        # Loop through each character in the word\n        for char in word:\n            # Check if the character is a consonant\n            if char.lower() not in \"aeiou\":\n                # If so, increment the counter\n                consonant_count += 1\n\n        # If the word has exactly n consonants, add it to the selected_words list\n        if consonant_count == n:\n            selected_words.append(word)\n\n    # Return the list of selected words\n    return selected_words",
        "test": "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
        "num_ids": 1538,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    # Check if the word has at least 3 characters\n    if len(word) < 3:\n        return \"\"\n    \n    # Initialize the closest vowel variable\n    closest_vowel = \"\"\n    \n    # Loop through the word from the end to the beginning\n    for i in range(len(word)-2, -1, -1):\n        # Check if the current character is a vowel\n        if word[i].lower() in \"aeiou\":\n            # If it is a vowel, check if the next two characters are consonants\n            if word[i+1].lower() not in \"aeiou\" and word[i+2].lower() not in \"aeiou\":\n                # If they are consonants, store the vowel and break out of the loop\n                closest_vowel = word[i].upper()\n                break\n    \n    # Return the closest vowel\n    return closest_vowel\n",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\"",
        "num_ids": 1783,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    s1, s2 = lst\n    return 'Yes' if is_balanced(s1 + s2) else 'No'\n",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(arr, k):\n    result = []\n    for num in arr:\n        if len(result) < k:\n            result.append(num)\n        elif num > min(result):\n            result.remove(min(result))\n            result.append(num)\n    return sorted(result)\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    result = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            result += lst[i]\n    return result\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 1225,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def add_elements(arr, k):\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # Add the current element to the total sum\n            total_sum += arr[i]\n\n    # Return the total sum\n    return total_sum",
        "test": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
        "num_ids": 1283,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    def collatz_sequence(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz_sequence(n)\n    odd_numbers = sorted([x for x in sequence if x % 2 != 0])\n    return odd_numbers\n",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 2028,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def valid_date(date_string):\n    try:\n        month, day, year = map(int, date_string.split('-'))\n    except ValueError:\n        return False\n    \n    if not (1 <= month <= 12) or not (1 <= day <= 31):\n        return False\n    \n    if month in [4, 6, 9, 11] and not (1 <= day <= 30):\n        return False\n    \n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if not (1 <= day <= 29):\n                return False\n        else:\n            if not (1 <= day <= 28):\n                return False\n    \n    return True\n",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 2447,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.replace(',', ' ').split()\n    else:\n        count = 0\n        for i in range(26):\n            count += ord(chr(i + 97)) % 2\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1844,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1638,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    signs = []\n    for num in arr:\n        if num > 0:\n            signs.append(1)\n        elif num < 0:\n            signs.append(-1)\n        else:\n            signs.append(0)\n\n    magnitude_sum = sum(abs(num) for num in arr)\n    sign_product = 1\n    for sign in signs:\n        sign_product *= sign\n\n    return sign_product * magnitude_sum",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def minPath(grid, k):\n    def dfs(grid, k, i, j, visited, path, paths):\n        if len(path) == k:\n            paths.append(path[:])\n            return\n        \n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or visited[i][j]:\n            return\n        \n        visited[i][j] = True\n        path.append(grid[i][j])\n        \n        dfs(grid, k, i-1, j, visited, path, paths)\n        dfs(grid, k, i+1, j, visited, path, paths)\n        dfs(grid, k, i, j-1, visited, path, paths)\n        dfs(grid, k, i, j+1, visited, path, paths)\n        \n        path.pop()\n        visited[i][j] = False\n    \n    n = len(grid)\n    paths = []\n    for i in range(n):\n        for j in range(n):\n            visited = [[False for _ in range(n)] for _ in range(n)]\n            path = []\n            dfs(grid, k, i, j, visited, path, paths)\n    \n    paths.sort()\n    return paths[0]\n",
        "test": "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 1) == [1]",
        "num_ids": 1812,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1, 3, 2]\n    elif n == 1:\n        return [1, 3, 2, 8]\n    elif n % 2 == 0:\n        trib = [1, 3, 2]\n        for i in range(n // 2):\n            trib.append(1 + trib[-1] / 2)\n        return trib\n    else:\n        trib = [1, 3, 2, 8]\n        for i in range(n - 2):\n            trib.append(trib[-1] + trib[-2] + trib[-3])\n        return trib\n",
        "test": "assert tri(1) == [1, 3, 2, 8]",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n        else:\n            return 0\n    return product\n",
        "test": "assert digits(1) == 1",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if len(stack) > 1:\n                return True\n    return len(stack) == 0\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers. \n    You need to return the sum of squared numbers in the given list, \n    round each element in the list to the upper int(Ceiling) first. \n    Examples: \n    For lst = [1,2,3] the output should be 14 \n    For lst = [1,4,9] the output should be 98 \n    For lst = [1,3,5,7] the output should be 84 \n    For lst = [1.4,4.2,0] the output should be 29 \n    For lst = [-2.4,1,1] the output should be 6 \n    \n    \"\"\"\n    return sum(int(round(x**2)) for x in lst)\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False  \n    \"\"\"\n\n    if not txt:  # If the string is empty\n        return False\n\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n\n    words = txt.split()  # Split the string into words\n    last_word = words[-1]\n\n    if last_char in last_word:  # If the last character is part of the last word\n        return False\n\n    return True\n",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 1628,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def can_arrange(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            continue\n        else:\n            return i-1\n    return -1\n",
        "test": "assert can_arrange([1,2,3,4,5]) == -1",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # Initialize the largest negative integer and smallest positive integer as None\n    largest_negative = None\n    smallest_positive = None\n\n    # Loop through the list and find the largest negative and smallest positive integers\n    for num in lst:\n        if isinstance(num, int):\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n\n    # Return the tuple of the largest negative and smallest positive integers\n    return (largest_negative, smallest_positive) ",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 1525,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type. \n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    def str_to_float(string):\n        \"\"\"\n        Helper function to convert string to float if possible. \n        \"\"\"\n        try:\n            return float(string.replace(\",\", \".\"))\n        except ValueError:\n            return None\n        \n    a = str_to_float(str(a))\n    b = str_to_float(str(b))\n    \n    if a == b:\n        return None\n    elif a is not None and b is not None:\n        return max(a, b)\n    elif a is not None:\n        return a\n    else:\n        return b\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Check if the given number is even\n    if n % 2 != 0:\n        return False\n    # Check if the given number is divisible by 4\n    if n % 4 != 0:\n        return False\n    # Check if the given number is greater than 4\n    if n < 4:\n        return False\n    # Check if the given number can be written as the sum of 4 even numbers\n    for i in range(2, int(n/2)+1):\n        for j in range(2, int(n/2)+1):\n            for k in range(2, int(n/2)+1):\n                for l in range(2, int(n/2)+1):\n                    if i + j + k + l == n:\n                        return True\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    if n <= 0:\n        return 1\n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    return factorial\n",
        "test": "assert special_factorial(1) == 1, \"Error in special_factorial(1)\"",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fix_spaces(text):\n    new_text = \"\"\n    prev_char = \"\"\n    for char in text:\n        if char == \" \":\n            if prev_char == \" \":\n                new_text += \"-\"\n            else:\n                new_text += \"_\"\n        else:\n            new_text += char\n        prev_char = char\n    return new_text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise. \n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    pre, post = file_name.split('.')\n    if not pre[0].isalpha() or not pre.isalnum():\n        return 'No'\n    \n    if post not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    return 'Yes'\n",
        "test": "assert file_name_check(\"1example.txt\") == 'No' # Test case 2",
        "num_ids": 2174,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    # Initialize a variable to store the sum of all entries\n    total = 0\n    \n    # Loop through the list and apply the appropriate transformation based on the index\n    for i in range(len(lst)):\n        if i % 3 == 0:  # If the index is a multiple of 3\n            total += lst[i] ** 2  # Square the entry and add it to the total\n        elif i % 4 == 0:  # If the index is a multiple of 4 but not a multiple of 3\n            total += lst[i] ** 3  # Cube the entry and add it to the total\n        else:  # If the index is not a multiple of 3 or 4\n            total += lst[i]  # Add the entry to the total\n            \n    return total\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1497,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the result of x * n\n    result = x_num * n_num / x_den * n_den\n    \n    # Check if the result is a whole number\n    return result.is_integer()\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 1320,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits. If there are\n    several items with similar sum of their digits, order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_of_digits(num):\n        \"\"\"\n        Helper function to calculate the sum of digits of a given number.\n        \"\"\"\n        return sum(map(int, str(abs(num))))\n\n    # Create a list of tuples containing the original number and the sum of its digits.\n    sorted_nums = [(num, sum_of_digits(num)) for num in nums]\n\n    # Sort the list of tuples based on the second element (sum of digits) and then the first element (index in original list).\n    sorted_nums.sort(key=lambda x: (x[1], nums.index(x[0])))\n\n    # Extract the sorted list of numbers from the sorted list of tuples.\n    sorted_nums = [num[0] for num in sorted_nums]\n\n    return sorted_nums\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1681,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0]) % 2 == 1) and (int(str(num)[-1]) % 2 == 1):\n            count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Initialize the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through the array and check for valid triples\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count",
        "test": "assert get_max_triples(5) == 1 # a = [1, 3, 7, 13, 21]",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        result = []\n        if index1 < index2:\n            for i in range(index1+1, index2):\n                result.append(planets[i])\n        else:\n            for i in range(index2+1, index1):\n                result.append(planets[i])\n        return tuple(result)\n    else:\n        return tuple()\n",
        "test": "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"The function should return the correct tuple for Mercury and Uranus\"",
        "num_ids": 1730,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule. If two words have the same length,\n    sort the list alphabetically. The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    \n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1518,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    \n    # first, we check if n is a prime number\n    prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            prime = False\n            break\n    \n    # if n is prime, return x, otherwise return y\n    if prime:\n        return x\n    else:\n        return y ",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 151,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 != 0:\n                result += num ** 2\n                \n    return result",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"\n    Determine how far off each guess is compared to the corresponding score in the game array.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1123,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM.  \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName. \n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    \"\"\"\n\n    # Initialize the strongest extension\n    strongest = None\n\n    # Initialize the strength of the strongest extension\n    max_strength = float('-inf')\n\n    # Loop through each extension\n    for extension in extensions:\n        # Calculate the strength of the extension\n        cap = extension.count('A') + extension.count('E') + extension.count('I') + extension.count('O') + extension.count('U')\n        sm = extension.count('a') + extension.count('e') + extension.count('i') + extension.count('o') + extension.count('u')\n        strength = cap - sm\n\n        # If the strength is greater than the current max strength, update the strongest extension\n        if strength > max_strength:\n            max_strength = strength\n            strongest = extension\n\n    # Return the class name and the strongest extension name in the desired format\n    return f'{class_name}.{strongest}'\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 2679,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    \n    def rotate(s):\n        return s[-1] + s[:-1]\n    \n    b_set = set([b, rotate(b), rotate(rotate(b)), rotate(rotate(rotate(b))), rotate(rotate(rotate(rotate(b)))), rotate(rotate(rotate(rotate(rotate(b)))))])\n    \n    if any(b_rot in a for b_rot in b_set):\n        return True\n    else:\n        return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 1053,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n    \n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    \n    # Iterate through each digit of the number\n    for digit in str(abs(num)):\n        # Check if the digit is even or odd using the modulus operator\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n            \n    # Return a tuple containing the count of even and odd digits\n    return (count_even, count_odd)\n",
        "test": "assert even_odd_count(12) == (1, 1)",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_dict = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n                     100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n                     10: 'x', 9: 'ix', 5: 'v', 4: 'iv',\n                     1: 'i'}\n\n    roman_num = ''\n    for key, value in roman_dict.items():\n        while number >= key:\n            roman_num += value\n            number -= key\n\n    return roman_num\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 1718,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # check if any two sides form a right-angle triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count or (count == max_count and word < max_word):\n            max_count = count\n            max_word = word\n    return max_word\n",
        "test": "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                        the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    0 <= number <= 1000\n    0 <= need <= 1000\n    0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need] ",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 1803,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def do_algebra(operator, operand):\n    expression = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            expression += operand[i+1]\n        elif operator[i] == '-':\n            expression -= operand[i+1]\n        elif operator[i] == '*':\n            expression *= operand[i+1]\n        elif operator[i] == '//':\n            expression //= operand[i+1]\n        elif operator[i] == '**':\n            expression **= operand[i+1]\n    return expression",
        "test": "assert do_algebra(['+'], [2, 3]) == 5",
        "num_ids": 1775,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    result = \"\"\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n\n    if not has_letter:\n        result = result[::-1]\n\n    return result\n",
        "test": "assert solve(\"ab\") == \"AB\"",
        "num_ids": 933,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    else:\n        md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n        return md5_hash\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n\n    # Initialize an empty list to store the even digits\n    even_digits = []\n\n    # Iterate over the range between a and b, inclusive\n    for num in range(a, b + 1):\n        # Convert the number to a string so we can check if it's even\n        num_str = str(num)\n\n        # Check if the number is even by checking if the last digit is even\n        if int(num_str[-1]) % 2 == 0:\n            even_digits.append(int(num_str[-1]))\n\n    # Sort the even digits and return them\n    return sorted(even_digits)",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1495,
        "indeed": false
    }
]