[
    {
        "number": 0,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 2942,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Removing all spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initializing an empty list to store the separated groups\n    result = []\n    \n    # Initializing a counter variable to keep track of the open and closed parentheses\n    open_count = 0\n    \n    # Initializing a variable to store the current group of parentheses\n    current_group = \"\"\n    \n    # Iterating through each character in the input string\n    for char in paren_string:\n        if char == \"(\":\n            # If the character is an open parenthesis, increment the open_count\n            open_count += 1\n            # Append the character to the current group\n            current_group += char\n        elif char == \")\":\n            # If the character is a closed parenthesis, decrement the open_count\n            open_count -= 1\n            # Append the character to the current group\n            current_group += char\n            # If the open_count is 0, it means that the current group is complete\n            # Append the current group to the result list and reset the current group\n            if open_count == 0:\n                result.append(current_group)\n                current_group = \"\"\n    \n    return result\n",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 4517,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    \n    # Separate the integer part from the decimal part\n    integer_part, decimal_part = str(number).split('.')\n    \n    # Convert the decimal part to a float\n    decimal_part = float('0.' + decimal_part)\n    \n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5 ",
        "num_ids": 2025,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1915,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(numbers)\n    return mad\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 3389,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result\n",
        "test": "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
        "num_ids": 2736,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def count_nested_parens(s: str) -> int:\n        count = 0\n        max_count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif c == ')':\n                count -= 1\n        return max_count\n\n    result = []\n    for group in paren_string.split():\n        result.append(count_nested_parens(group))\n    return result\n",
        "test": "assert parse_nested_parens('') == []",
        "num_ids": 3208,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 2267,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    \n    # Initialize sum and product as 0 and 1 respectively\n    sum = 0\n    product = 1\n    \n    # Iterate through the list of integers and add them to the sum and multiply them to the product\n    for num in numbers:\n        sum += num\n        product *= num\n    \n    # Return a tuple of the sum and product\n    return (sum, product)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2776,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    \n    max_so_far = numbers[0]\n    result = [max_so_far]\n    \n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    \n    return result\n",
        "test": "assert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]",
        "num_ids": 3455,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    \n    # base case\n    if string == '':\n        return string\n    \n    # find the longest palindromic postfix of the string\n    n = len(string)\n    i = n - 1\n    while i >= 0 and string[n-1:i] == string[n-1:i][::-1]:\n        i -= 1\n    \n    # append the reverse of the string prefix to the end of the string\n    return string + string[:i][::-1]\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 3291,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert strings to lists of characters\n    a_list = list(a)\n    b_list = list(b)\n\n    # Perform XOR on corresponding characters in the lists\n    xor_list = ['0' if a_list[i] == b_list[i] else '1' for i in range(len(a_list))]\n\n    # Convert the XOR list back to a string\n    xor_string = ''.join(xor_list)\n\n    return xor_string\n",
        "test": "assert string_xor('010', '110') == '100'  # Test case 1",
        "num_ids": 2685,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one.\n    Return the first one in case of multiple strings of the same length.\n    Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    max_length = 0\n    longest_str = None\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_str = string\n    return longest_str\n",
        "test": "assert longest([]) is None",
        "num_ids": 2214,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 2185,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert all_prefixes('') == []",
        "num_ids": 1679,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join([str(i) for i in range(n+1)])\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 1838,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase for case-insensitive comparison\n    string = string.lower()\n    \n    # Use a set to keep track of unique characters\n    unique_chars = set()\n    \n    # Iterate over each character in the string\n    for char in string:\n        # Add the character to the set\n        unique_chars.add(char)\n    \n    # Return the length of the set (number of unique characters)\n    return len(unique_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 2038,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    result = []\n    for note in music_string.split():\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] # test with given example",
        "num_ids": 6019,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    \n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    \n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 2041,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Create a list of numbers from the words\n    nums = [word_to_num(word) for word in words]\n\n    # Sort the list of numbers\n    nums.sort()\n\n    # Create a new list of words from the sorted list of numbers\n    sorted_words = [num_to_word(num) for num in nums]\n\n    # Join the sorted list of words into a single string\n    sorted_string = ' '.join(sorted_words)\n\n    return sorted_string\n\n\ndef word_to_num(word: str) -> int:\n    \"\"\"\n    Convert a word representing a number to an integer.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    \"\"\"\n    if word == 'zero':\n        return 0\n    elif word == 'one':\n        return 1\n    elif word == 'two':\n        return 2\n    elif word == 'three':\n        return 3\n    elif word == 'four':\n        return 4\n    elif word == 'five':\n        return 5\n    elif word == 'six':\n        return 6\n    elif word == 'seven':\n        return 7\n    elif word == 'eight':\n        return 8\n    elif word == 'nine':\n        return 9\n    else:\n        raise ValueError(f\"Invalid word '{word}'\")\n\n\ndef num_to_word(num: int) -> str:\n    \"\"\"\n    Convert an integer to a word representing a number.\n    Valid choices are 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9.\n    \"\"\"\n    if num == 0:\n        return 'zero'\n    elif num == 1:\n        return 'one'\n    elif num == 2:\n        return 'two'\n    elif num == 3:\n        return 'three'\n    elif num == 4:\n        return 'four'\n    elif num == 5:\n        return 'five'\n    elif num == 6:\n        return 'six'\n    elif num == 7:\n        return 'seven'\n    elif num == 8:\n        return 'eight'\n    elif num == 9:\n        return 'nine'\n    else:\n        raise ValueError(f\"Invalid number {num}\")\n",
        "test": "assert sort_numbers('') == ''",
        "num_ids": 3900,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(closest_pair[0] - closest_pair[1])\n\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 4443,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = 1 / (max_num - min_num)\n    shift = -min_num * scale\n    return [num * scale + shift for num in numbers]\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 4327,
        "indeed": false
    },
    {
        "number": 22,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any python values only for integers.\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 1792,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 37,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    i = n - 1\n    while i > 1:\n        if n % i == 0:\n            return i\n        i -= 1\n    return 1\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 1886,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    # Initialize a list to store the factors\n    factors = []\n\n    # Divide the number by 2 as many times as possible\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    # Check for odd factors\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 2\n\n    return factors\n",
        "test": "assert factorize(70) == [2, 5, 7]",
        "num_ids": 4009,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2601,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 1702,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 1376,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix. \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 2588,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 2234,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n < 2:  # 0 and 1 are not prime\n        return False\n\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n\n    return True",
        "test": "assert is_prime(6) == False",
        "num_ids": 2206,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution. \n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs should have even number of coefficients\")\n    \n    if xs[0] == 0:\n        raise ValueError(\"Largest non-zero coefficient should be at index 0\")\n    \n    n = len(xs) - 1\n    \n    if xs[0] > 0:\n        start = 0\n        end = abs(xs[n])\n    elif xs[0] < 0:\n        start = abs(xs[n])\n        end = 0\n    else:\n        raise ValueError(\"Largest non-zero coefficient should be positive or negative\")\n    \n    while start - end > 1e-10:\n        mid = (start + end) / 2\n        \n        if poly(xs, mid) > 0:\n            start = mid\n        else:\n            end = mid\n            \n    return start\n",
        "test": "assert find_zero([-6, 11, -6, 1]) == 1.0",
        "num_ids": 3524,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three,\n    while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_copy = l.copy()\n    for i in range(0, len(l_copy), 3):\n        l_copy[i:i+3] = sorted(l_copy[i:i+3])\n    return l_copy\n",
        "test": "assert sort_third([]) == []",
        "num_ids": 3744,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(l)\n    # Convert the set back to a list and sort it\n    unique_list = sorted(list(unique_set))\n    return unique_list\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1695,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:  # empty list\n        return None\n    max_val = l[0]\n    for val in l:\n        if val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1927,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for digit in str(i):\n                if digit == '7':\n                    count += 1\n    return count\n",
        "test": "assert fizz_buzz(50) == 0, \"Error in fizz_buzz(50)\"",
        "num_ids": 1693,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 31,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_vals = sorted([l[i] for i in range(0, len(l), 2)])\n    l_copy = l.copy()\n    for i in range(0, len(l), 2):\n        l_copy[i] = even_vals[i // 2]\n    return l_copy\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 3309,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 39,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 3472,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 40,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    is_prime returns True if the given number is prime, else False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\"\n    fibonacci returns the n-th Fibonacci number.\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 0\n    i = 0\n    while count < n:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n        i += 1\n    return fibonacci(i-1)\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 3140,
        "indeed": true
    },
    {
        "number": 40,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Create an empty dictionary to store the frequency of elements in the list\n    freq = {}\n\n    # Iterate over the list and update the frequency of each element in the dictionary\n    for num in l:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Iterate over the list again and check for three distinct elements that sum to zero\n    for num1 in l:\n        for num2 in l:\n            if num1 == num2:\n                continue\n            else:\n                complement = -num1 - num2\n                if complement in freq and (complement != num1 or freq[complement] > 1) and (complement != num2 or freq[complement] > 1):\n                    return True\n\n    # If no three distinct elements sum to zero, return False\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
        "num_ids": 4495,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Initialize variables to keep track of collisions\n    collisions = 0\n    left_to_right_cars = []\n    right_to_left_cars = []\n\n    # Initialize the first car in each set\n    left_to_right_cars.append(0)\n    right_to_left_cars.append(0)\n\n    # Loop through all cars and check for collisions\n    for i in range(1, n):\n        # Determine the position of the current car\n        left_to_right_car = left_to_right_cars[-1] + i\n        right_to_left_car = right_to_left_cars[-1] - i\n\n        # Check for collisions\n        if left_to_right_car == right_to_left_car:\n            collisions += 1\n\n        # Add the current car to the lists\n        left_to_right_cars.append(left_to_right_car)\n        right_to_left_cars.append(right_to_left_car)\n\n    return collisions\n",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 4204,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i+1 for i in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 2492,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) < 2:  # if list has less than 2 elements, can't have two distinct elements that sum to zero\n        return False\n    \n    seen = set()  # use a set to keep track of seen elements\n    for num in l:\n        if -num in seen:  # if we've seen the negation of the current element, then we've found a pair that sums to zero\n            return True\n        seen.add(num)\n    \n    return False  # if we've reached this point, no pair has been found that sums to zero\n",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False, \"Test case 2 failed\"",
        "num_ids": 3078,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = \"\"\n    while x > 0:\n        result = digits[x % base] + result\n        x //= base\n    return result if result else \"0\"\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2716,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 38,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "test": "assert triangle_area(5, 3) == 7.5, \"Incorrect triangle area returned\"",
        "num_ids": 1387,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    # Calculate the n-th element using the formula:\n    # fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "test": "assert fib4(0) == 0",
        "num_ids": 2548,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # sort the list in ascending order\n    l = sorted(l)\n    # find the middle index of the list\n    mid = len(l) // 2\n    # if the length of the list is odd\n    if len(l) % 2 != 0:\n        # return the middle element\n        return l[mid]\n    else:\n        # if the length of the list is even\n        # return the average of the two middle elements\n        return (l[mid - 1] + l[mid]) / 2\n",
        "test": "assert median([1, 2, 3, 4, 5]) == 3",
        "num_ids": 2230,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Convert the text to lowercase\n    text = text.lower()\n    # Remove all non-alphanumeric characters from the text\n    text = ''.join(char for char in text if char.isalnum())\n    # Check if the reversed text is the same as the original text\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 1734,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return pow(2, n, p)\n",
        "test": "assert modp(0, 101) == 1",
        "num_ids": 2527,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 2205,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 2088,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 31,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"\n    Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1965,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 1100,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert both strings to sets of characters to remove duplicates\n    set0 = set(s0)\n    set1 = set(s1)\n    \n    # If the sets have different lengths, they cannot contain the same characters\n    if len(set0) != len(set1):\n        return False\n    \n    # Check if each character in set0 appears in set1\n    for char in set0:\n        if char not in set1:\n            return False\n    \n    # If we have made it this far, the two strings contain the same characters\n    return True\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 2289,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 37,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n",
        "test": "assert fib(10) == 55",
        "num_ids": 2252,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"<\") == False, \"Test case 1 failed\"",
        "num_ids": 1835,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    n = len(l)\n    increasing = l[0] < l[1]\n    for i in range(1, n):\n        if increasing and l[i] < l[i-1]:\n            return False\n        elif not increasing and l[i] > l[i-1]:\n            return False\n    return True\n",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 2447,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Convert lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Get the intersection of the two sets (common elements)\n    common_set = set1.intersection(set2)\n\n    # Convert the set back to a list and sort it\n    common_list = sorted(list(common_set))\n\n    return common_list\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2876,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n.\n    Assume n > 1 and is not a prime.\n    \"\"\"\n    largest = 1\n    while n % 2 == 0:\n        largest = 2\n        n //= 2\n    \n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            largest = i\n            n //= i\n    \n    if n > 2:\n        largest = n\n    \n    return largest\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 2459,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sum_to_n(n: int):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all numbers from 1 to n.\n    \"\"\"\n    return int((n*(n+1))/2) # This is a mathematical formula to find the sum of numbers from 1 to n\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 1835,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 2024,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n",
        "test": "assert derivative([1]) == []",
        "num_ids": 2560,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 2368,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n            if char.lower() == 'y' and s.index(char) != len(s)-1:\n                count -= 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2, \"Test Case 1 Failed\"",
        "num_ids": 1798,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits,\n    return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    n = len(x_str)\n    if shift > n:\n        return x_str[::-1]\n    else:\n        shifted = x_str[shift:] + x_str[:shift]\n        return shifted\n",
        "test": "assert circular_shift(12, 2) == \"12\"",
        "num_ids": 2833,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digitSum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 1810,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 40,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apples_count = 0\n    oranges_count = 0\n    mango_count = 0\n    \n    # Extracting apples and oranges count\n    if 'apples' in s:\n        apples_count = int(s.split('apples')[0].strip())\n    if 'oranges' in s:\n        oranges_count = int(s.split('oranges')[0].strip().split(' ')[-1])\n    \n    # Calculating mango count\n    mango_count = n - apples_count - oranges_count\n    \n    return mango_count ",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\",3) == 2",
        "num_ids": 3929,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    even_values = []\n    even_indexes = []\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_values.append(arr[i])\n            even_indexes.append(i)\n\n    if not even_values:\n        return []\n\n    min_value = min(even_values)\n    min_index = even_indexes[even_values.index(min_value)]\n\n    return [min_value, min_index]",
        "test": "assert pluck([4, 2, 3]) == [2, 1]",
        "num_ids": 5175,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    freq_dict = {}\n    for num in lst:\n        if num not in freq_dict:\n            freq_dict[num] = 1\n        else:\n            freq_dict[num] += 1\n    max_freq = -1\n    result = -1\n    for num in freq_dict:\n        if num > 0 and freq_dict[num] >= num and num > max_freq:\n            max_freq = num\n            result = num\n    return result\n",
        "test": "assert search([5, 5, 4, 4, 4]) == -1",
        "num_ids": 2712,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    sorted_list = sorted(lst)\n    result = []\n\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop(-1))\n\n    return result",
        "test": "assert strange_sort_list([]) == []",
        "num_ids": 2979,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Calculate the perimeter of the triangle\n    perimeter = a + b + c\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = perimeter / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        # Round the area to 2 decimal points and return it\n        return round(area, 2)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 3269,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def will_it_fly(q, w):\n    if len(q) == 0:\n        return False\n    \n    if q == q[::-1]:\n        if sum(q) <= w:\n            return True\n    \n    return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 1887,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    n = len(arr)\n    mid = n // 2\n    changes = 0\n\n    # Check for even and odd length arrays\n    if n % 2 == 0:\n        for i in range(mid):\n            if arr[i] != arr[n - i - 1]:\n                changes += 1\n    else:\n        for i in range(mid + 1):\n            if arr[i] != arr[n - i - 1]:\n                changes += 1\n\n    return changes",
        "test": "assert smallest_change([1, 2, 3, 3, 2, 1]) == 0",
        "num_ids": 4419,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    if len(lst1) == 0:\n        return []\n    elif len(lst2) == 0:\n        return lst1\n    \n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    \n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 3543,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Returns True if the given number is the multiplication of 3 prime numbers,\n    and False otherwise.\n    \"\"\"\n    if a < 100:\n        # Create a list of prime numbers less than or equal to a\n        primes = [i for i in range(2, a+1) if all(i % j != 0 for j in range(2, int(i**0.5)+1))]\n        \n        # Check if a can be written as the product of 3 prime numbers\n        for i in range(len(primes)):\n            for j in range(i+1, len(primes)):\n                for k in range(j+1, len(primes)):\n                    if primes[i] * primes[j] * primes[k] == a:\n                        return True\n        \n        # If no such combination is found, return False\n        return False\n    else:\n        return False\n",
        "test": "assert is_multiply_prime(2) == False",
        "num_ids": 2967,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Returns true if x is a simple power of n and false otherwise.\n    A number x is a simple power of n if n ** int == x.\n    \"\"\"\n    if n == 1:\n        return x == 1\n    elif x == 1:\n        return True\n    else:\n        i = 1\n        while n ** i <= x:\n            if n ** i == x:\n                return True\n            i += 1\n        return False\n",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 2043,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def iscube(a):\n    if a == 0:\n        return True\n    if a < 0:\n        a = abs(a)\n    for i in range(1, a+1):\n        if i**3 == a:\n            return True\n    return False\n",
        "test": "assert iscube(2) == False",
        "num_ids": 1930,
        "indeed": true
    },
    {
        "number": 78,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for char in num:\n        if char in primes:\n            count += 1\n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 3878,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n    \n    There will be an extra couple of characters 'db' at the beginning and at the end of the string. \n    The extra characters are there to help with the format.\n    \n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the string\n    binary = 'db' + binary + 'db'\n    \n    # Return the binary string\n    return binary\n",
        "test": "assert decimal_to_binary(4) == \"db100db\"",
        "num_ids": 2546,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_happy(s):\n    \"\"\"\n    Checks if the given string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n\n    return True\n",
        "test": "assert is_happy('a') == False",
        "num_ids": 2009,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n            GPA            |   Letter grade\n            4.0              A+\n            > 3.7           A \n            > 3.3           A- \n            > 3.0           B+\n            > 2.7           B \n            > 2.3           B-\n            > 2.0           C+\n            > 1.7           C\n            > 1.3           C-\n            > 1.0           D+ \n            > 0.7           D \n            > 0.0           D-\n            0.0           E\n    \n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+', 'A+', 'A+']",
        "num_ids": 7486,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def prime_length(string):\n    \"\"\"\n    Returns True if the length of the string is a prime number,\n    otherwise returns False.\n    \"\"\"\n    n = len(string)\n    if n == 0 or n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 1826,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or i // 10 == 1:\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 1567,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n        \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    # Convert N to binary string\n    binary = bin(N)[2:]\n    \n    # Convert each digit to integer and add to sum\n    total = 0\n    for digit in binary:\n        total += int(digit)\n    \n    # Convert sum to binary string and return\n    return bin(total)[2:]\n",
        "test": "assert solve(0) == '0'",
        "num_ids": 2244,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
        "test": "assert add([4, 2, 6, 7]) == 2",
        "num_ids": 2100,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def anti_shuffle(s):\n    # Split the string into words\n    words = s.split()\n    \n    # Create an empty list to store the shuffled words\n    shuffled_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Create a new string where all characters are arranged in ascending order based on ascii value\n        shuffled_word = ''.join(sorted(word))\n        # Add the shuffled word to the list\n        shuffled_words.append(shuffled_word)\n    \n    # Join the shuffled words back into a string and return it\n    return ' '.join(shuffled_words)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 2909,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, \n    which is similar to matrix, however, unlike matrices, \n    each row may contain a different number of columns. \n    Given lst, and integer x, find integers x in the list, \n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that \n    each tuple is a coordinate - (row, columns), starting with 0. \n    Sort coordinates initially by rows in ascending order. \n    Also, sort coordinates of the row by columns in descending order. \n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row([], 1) == []",
        "num_ids": 4052,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting, \n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd, \n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sorted_array = array.copy()\n    n = len(sorted_array)\n    if n <= 1:\n        return sorted_array\n    \n    if (sorted_array[0] + sorted_array[n-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    \n    return sorted_array\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 4120,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 40,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    \n    # Define the alphabet to be rotated\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # Create an empty string to store the encrypted text\n    encrypted = ''\n    # Iterate through each character in the input string\n    for char in s:\n        # If the character is an alphabet, rotate it down by 2 multiplied by 2\n        if char.lower() in alphabet:\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char.lower())\n            # Rotate the index down by 2 multiplied by 2\n            rotated_index = (index + (2*2)) % 26\n            # Retrieve the rotated character from the alphabet\n            rotated_char = alphabet[rotated_index]\n            # Add the rotated character to the encrypted string\n            encrypted += rotated_char\n        else:\n            # If the character is not an alphabet, add it as is to the encrypted string\n            encrypted += char\n    \n    return encrypted\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 3836,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            return lst[i]\n    return None\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 2512,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n        \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    \n    boredom_count = 0\n    sentences = S.split('.')\n    \n    for sentence in sentences:\n        words = sentence.split()\n        if words:\n            if words[0] == \"I\":\n                boredom_count += 1\n    \n    return boredom_count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 2273,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two,\n    and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 2131,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if char.islower():\n                encoded_char = chr(ord(char) + 2)\n            else:\n                encoded_char = chr(ord(char.lower()) + 2)\n            encoded_message += encoded_char.upper()\n        else:\n            encoded_message += char.lower() if char.isupper() else char.upper()\n    return encoded_message\n",
        "test": "assert encode(\"\") == \"\"",
        "num_ids": 3237,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(prime))",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 4170,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \n    # If the dictionary is empty, return False\n    if not dict:\n        return False\n    \n    # Get the first key to check if all keys are in lower or upper case\n    first_key = next(iter(dict.keys()))\n    \n    # Check if all keys are in lower case or upper case\n    if all(isinstance(key, str) and key.islower() for key in dict.keys()) or \\\n       all(isinstance(key, str) and key.isupper() for key in dict.keys()):\n        return True\n    else:\n        return False\n",
        "test": "assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True",
        "num_ids": 4435,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n. For example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 3155,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers and returns the product of their unit digits.\n    It assumes the input is always valid.\n    \"\"\"\n    # extract the unit digits of a and b\n    a_unit = a % 10\n    b_unit = b % 10\n    # multiply the unit digits and return the result\n    return a_unit * b_unit\n",
        "test": "assert multiply(2020, 1851) == 0",
        "num_ids": 1732,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper('aBCdEf') == 1, \"Incorrect count_upper output for 'aBCdEf'\"",
        "num_ids": 1487,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    \n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    '''\n    \n    # Convert the input value to a float\n    num = float(value)\n    \n    # Calculate the floor and ceiling of the number\n    floor_num = int(num)\n    ceil_num = floor_num + 1\n    \n    # Calculate the distances to the floor and ceiling\n    floor_dist = num - floor_num\n    ceil_dist = ceil_num - num\n    \n    # If the distances are equal, round away from zero\n    if floor_dist == ceil_dist:\n        if num >= 0:\n            return ceil_num\n        else:\n            return floor_num\n    \n    # Otherwise, return the closest integer\n    else:\n        if floor_dist < ceil_dist:\n            return floor_num\n        else:\n            return ceil_num\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 3006,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    \n    pile = [n]\n    \n    while len(pile) < n:\n        last = pile[-1]\n        \n        if last % 2 == 0:\n            next_num = last + 1\n        else:\n            next_num = last + 2\n        \n        pile.append(next_num)\n    \n    return pile\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 3253,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def words_string(s):\n    # split the string by commas and/or spaces, and return an array of the words\n    words = s.replace(\",\", \" \").split()\n    return words\n",
        "test": "assert words_string(\"\") == []",
        "num_ids": 2727,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Check if x and y are positive numbers\n    if x <= 0 or y <= 0:\n        return -1\n\n    # Find the smallest even number in the range [x, y]\n    min_even_num = None\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            min_even_num = i\n            break\n\n    # If there's no even number in the range [x, y], return -1\n    if min_even_num is None:\n        return -1\n\n    # Find the biggest even number in the range [x, y]\n    max_even_num = min_even_num\n    for i in range(min_even_num+2, y+1, 2):\n        max_even_num = i\n\n    # Return the biggest even number in the range [x, y]\n    return max_even_num\n",
        "test": "assert choose_num(1, 1) == -1",
        "num_ids": 2955,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary. \n    If n is greater than m, return -1. \n    Example: \n    rounded_avg(1, 5) => \"0b11\" \n    rounded_avg(7, 5) => -1 \n    rounded_avg(10, 20) => \"0b1111\" \n    rounded_avg(20, 33) => \"0b11010\" \n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m+1):\n            sum += i\n        avg = round(sum/(m-n+1))\n        return bin(avg)\n",
        "test": "assert rounded_avg(1, 5) == \"0b11\"",
        "num_ids": 2537,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    result = []\n    for num in x:\n        if not any(digit in str(num) for digit in ['0', '2', '4', '6', '8']):\n            result.append(num)\n    result.sort()\n    return result\n",
        "test": "assert unique_digits([]) == []",
        "num_ids": 3551,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    \n               -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n               -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n    \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n               -> sort arr -> [-1, 1, 55]\n               -> reverse arr -> [55, 1, -1]\n    return = ['One']\n    \"\"\"\n    \n    # Sort the array\n    arr.sort()\n    \n    # Reverse the sorted array\n    arr.reverse()\n    \n    # Create a list of the names of the digits from 1 to 9\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \n    # Create an empty list to store the names of the digits in the array\n    result = []\n    \n    # Loop through the sorted and reversed array\n    for i in arr:\n        # If the current element is between 1 and 9 inclusive, append its corresponding name to the result list\n        if i >= 1 and i <= 9:\n            result.append(digit_names[i-1])\n    \n    # Return the result list\n    return result\n",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
        "num_ids": 6079,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # i is even, compute factorial\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # i is odd, compute sum of numbers from 1 to i\n            total = 0\n            for j in range(1, i+1):\n                total += j\n            result.append(total)\n    return result\n",
        "test": "assert f(0) == []",
        "num_ids": 2312,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 3146,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0. \n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    count = 0\n    for num in arr:\n        sum_of_digits = 0\n        if num < 0:\n            num = -num\n            sum_of_digits += -1\n        while num > 0:\n            digit = num % 10\n            sum_of_digits += digit\n            num //= 10\n        if sum_of_digits > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 2261,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 37,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                    array by performing any number of right shift operations.\n                    \n    \"\"\"\n\n    if len(arr) == 0:\n        return True\n\n    if arr == sorted(arr):\n        return True\n\n    for _ in range(len(arr)):\n        right_shifted_arr = arr[-1:] + arr[:-1]\n        if right_shifted_arr == sorted(right_shifted_arr):\n            return True\n        arr = right_shifted_arr\n\n    return False",
        "test": "assert move_one_ball([3, 5, 4, 1, 2])==False",
        "num_ids": 4283,
        "indeed": true
    },
    {
        "number": 110,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    for num in lst1:\n        if num % 2 != 0:\n            for i in range(len(lst2)):\n                if lst2[i] % 2 == 0:\n                    lst1[lst1.index(num)] = lst2[i]\n                    lst2.pop(i)\n                    break\n            else:\n                return \"NO\"\n\n    return \"YES\"\n",
        "test": "assert exchange([2, 4, 6, 8], [2, 4, 6, 8]) == \"YES\"",
        "num_ids": 5173,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    \n    # Create an empty dictionary to store the histogram\n    hist = {}\n    \n    # Split the input string into a list of words\n    words = test.split()\n    \n    # Iterate through the list of words\n    for word in words:\n        # If the word is not already in the histogram, add it with count 1\n        if word not in hist:\n            hist[word] = 1\n        # If the word is already in the histogram, increment its count\n        else:\n            hist[word] += 1\n    \n    # Find the maximum count in the histogram\n    max_count = max(hist.values())\n    \n    # Create an empty dictionary to store the result\n    result = {}\n    \n    # Iterate through the keys in the histogram\n    for key in hist:\n        # If the count for the key is equal to the maximum count, add it to the result\n        if hist[key] == max_count:\n            result[key] = max_count\n    \n    # Return the result\n    return result\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 3875,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Create a set of characters from c\n    c_set = set(c)\n    \n    # Create a new string by deleting all the characters in s that are in c_set\n    result = ''.join([char for char in s if char not in c_set])\n    \n    # Check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 3003,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list. \n    Each element i of the output should be \"the number of odd elements in the \n    string i of the input.\" where all the i's should be replaced by the number \n    of odd digits in the i'th string of the input. \n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4 in the string 4 of the input.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1 in the string 1 of the input.\", \n     \"the number of odd elements 8 in the string 8 of the input.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if int(lst[i][j]) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \" in the string \" + str(i+1) + \" of the input.\")\n    return result\n",
        "test": "assert odd_count(['1234567']) == [\"the number of odd elements 4 in the string 1 of the input.\"]",
        "num_ids": 4455,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums. \n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum if min_sum != float('inf') else 0",
        "test": "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
        "num_ids": 2703,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well, \n    and each 1 in a row represents a single unit of water. \n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity. \n    Your task is to use the buckets to empty the wells. \n    Output the number of times you need to lower the buckets. \n    \n    Example 1: \n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n    \n    Example 2: \n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3: \n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n    \n    Constraints: \n        * all wells have the same length \n        * 1 <= grid.length <= 10^2 \n        * 1 <= grid[:,1].length <= 10^2 \n        * grid[i][j] -> 0 | 1 \n        * 1 <= capacity <= 10\n    \"\"\"\n\n    # Calculate the total number of units of water in the grid\n    total_water = sum(sum(row) for row in grid)\n\n    # If there is no water or the capacity is greater than the total water, return 0\n    if total_water == 0 or capacity > total_water:\n        return 0\n\n    # Calculate the number of times the buckets need to be lowered\n    return math.ceil(total_water / capacity)\n",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
        "num_ids": 6160,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order. \n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert sort_array([0, 0, 0, 0]) == [0, 0, 0, 0]",
        "num_ids": 3886,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for c in word if c.lower() not in 'aeiou') == n:\n            result.append(word)\n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 2565,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = \"aeiouAEIOU\"\n    \n    # Find the closest vowel from the right side of the word\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            if i != 0 and i != len(word)-1:\n                return word[i]\n    \n    # If no vowel is found, return empty string\n    return \"\"\n",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 3010,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # Concatenate the two strings\n    s = lst[0] + lst[1]\n\n    # Initialize parentheses stack\n    stack = []\n\n    # Iterate over the characters in the concatenated string\n    for char in s:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, check if there's a matching opening parenthesis\n        # on the top of the stack. If there is, pop it off the stack. If there isn't, the string is not good.\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n\n    # If there are any opening parentheses left on the stack, the string is not good.\n    if stack:\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert match_parens(['()', '()']) == 'Yes'",
        "num_ids": 3889,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    \n    # Create a list of tuples (value, index) from the input array\n    arr_tuples = [(x, i) for i, x in enumerate(arr)]\n    \n    # Sort the list of tuples based on the values in descending order\n    sorted_arr = sorted(arr_tuples, key=lambda x: x[0], reverse=True)\n    \n    # Return the k largest values in the sorted list of tuples\n    return [x[0] for x in sorted_arr[:k]]\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 3448,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Loop through the list\n    for i in range(len(lst)):\n        # Check if the element is odd and in an even position\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            # Add the odd element to the total sum\n            total_sum += lst[i]\n    \n    # Return the total sum\n    return total_sum\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 2671,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Initialize a variable to store the sum of elements with at most two digits\n    sum_elements = 0\n\n    # Loop through the first k elements of the array\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # Add the current element to the sum\n            sum_elements += arr[i]\n\n    # Return the sum of elements with at most two digits\n    return sum_elements",
        "test": "assert add_elements([1,2,3,4,5], 5) == 15, \"Incorrect output for given input\"",
        "num_ids": 3439,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def collatz_sequence(n):\n    \"\"\"\n    Returns the Collatz sequence for a given positive integer n.\n    \"\"\"\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sequence\n\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    collatz = collatz_sequence(n)\n    odd_collatz = [x for x in collatz if x % 2 != 0]\n    return sorted(odd_collatz)\n",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 5045,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def valid_date(date):\n    \"\"\"\n    Checks if the given date string is valid according to the rules specified.\n\n    :param date: The date string to validate, in the format \"mm-dd-yyyy\"\n    :return: True if the date is valid, False otherwise\n    \"\"\"\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    days_in_month = {\n        1: 31, 3: 31, 5: 31, 7: 31, 8: 31, 10: 31, 12: 31,\n        4: 30, 6: 30, 9: 30, 11: 30,\n        2: 28 if year % 4 != 0 else 29\n    }\n\n    return 1 <= month <= 12 and 1 <= day <= days_in_month[month] and 1900 <= year <= 9999",
        "test": "assert valid_date('03-11-2000') == True, \"Incorrect output\"",
        "num_ids": 5345,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for letter in txt:\n            if 'a' <= letter <= 'z' and (ord(letter) - 97) % 2 == 1:\n                count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 2174,
        "indeed": true
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    if len(lst) == 1:\n        return True\n\n    sorted_lst = sorted(lst)\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        elif lst[i] == lst[i + 1]:\n            if sorted_lst.count(lst[i]) == 1:\n                return False\n\n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 2731,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def intersection(interval1, interval2):\n    # Check if the intervals intersect\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    # Compute the intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if the intersection length is a prime number\n    if intersection_length == 1:\n        return \"NO\"\n    for i in range(2, intersection_length):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 3828,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def prod_signs(arr):\n    if not arr:  # empty array\n        return None\n\n    product = 1\n    sum_magnitudes = 0\n\n    for num in arr:\n        if num == 0:\n            product *= 0\n        elif num > 0:\n            product *= 1\n            sum_magnitudes += num\n        else:\n            product *= -1\n            sum_magnitudes += -num\n\n    return sum_magnitudes * product",
        "test": "assert prod_signs([]) == None",
        "num_ids": 2693,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def minPath(grid, k):\n    n = len(grid)\n    if n == 1:\n        return [grid[0][0] + 1]\n\n    # Initialize DP table and visited cells\n    dp = [[0] * n for _ in range(n)]\n    visited = set()\n\n    # Fill in the first row and column\n    for j in range(n):\n        dp[0][j] = grid[0][j] + 1\n        dp[j][0] = grid[j][0] + 1\n\n    # Fill in the rest of the table using DP\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] + 1\n\n    # Find the minimum path of length k\n    path = []\n    i, j = 0, 0\n    for _ in range(k):\n        visited.add((i, j))\n        path.append(grid[i][j])\n        if i < n - 1 and (i + 1, j) not in visited:\n            i += 1\n        elif j < n - 1 and (i, j + 1) not in visited:\n            j += 1\n        else:\n            break\n\n    return path",
        "test": "assert minPath([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 3) == [1, 1, 1]",
        "num_ids": 6953,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def tri(n):\n    \"\"\"Returns a list with the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                seq.append(1 + i / 2)\n            else:\n                seq.append(seq[-1] + seq[-2] + seq[-3])\n        return seq\n",
        "test": "assert tri(2) == [1, 3, 2]",
        "num_ids": 3022,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n",
        "test": "assert digits(4) == 0",
        "num_ids": 1957,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_nested(string):\n    # Initialize variables\n    stack = []\n    nested = False\n\n    # Iterate through the string\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    # If the stack is not empty, it means there are unmatched brackets\n    if stack:\n        return False\n\n    # If the nested flag is still False, it means there are no nested brackets\n    return nested",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 1607,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sum_squares(lst):\n    # Round each element in the list to the upper int(Ceiling)\n    lst = [int(math.ceil(num)) for num in lst]\n    # Calculate the sum of squares of each element in the list\n    sum_of_squares = sum([num**2 for num in lst])\n    return sum_of_squares ",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 3150,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    elif txt[-1].isalpha() and txt[-2] == \" \":\n        return True\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False",
        "num_ids": 2520,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    i = 1\n    while i < n:\n        if arr[i] < arr[i-1]:\n            return i\n        i += 1\n    return -1\n",
        "test": "assert can_arrange([1,2,3]) == -1, \"Test case 2 failed\"",
        "num_ids": 2307,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. If there is no negative or positive integers, \n    return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    largest_neg = None\n    smallest_pos = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n        elif num > 0:\n            if smallest_pos is None or num < smallest_pos:\n                smallest_pos = num\n    \n    return largest_neg, smallest_pos\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 3798,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    # convert to floats if possible (and keep track of original type)\n    a_type = type(a)\n    b_type = type(b)\n    try:\n        a = float(a)\n        b = float(b)\n    except ValueError:\n        # if conversion fails, assume string representation\n        pass\n    # compare values\n    if a == b:\n        return None\n    elif a > b:\n        return a_type(a)\n    else:\n        return b_type(b)\n",
        "test": "assert compare_one(\"1\", 1) is None",
        "num_ids": 3286,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 8 or n % 2 != 0:\n        return False\n    elif n == 8:\n        return True\n    else:\n        for i in range(4, n//2+1, 2):\n            if i > (n-i)//2:\n                break\n            elif (n-i) % 2 == 0:\n                return True\n        return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 2791,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 2118,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Check if the string has more than 2 consecutive spaces\n    if \"__\" in text:\n        # Replace all consecutive spaces with -\n        text = text.replace(\"__\", \"-\")\n\n    return text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2152,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    \n    # Check if there are more than 3 digits in the file name\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    \n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Check if the substring before the dot is valid\n    sub_str = file_name.split('.')[0]\n    if len(sub_str) == 0 or not sub_str[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is valid\n    sub_str = file_name.split('.')[1]\n    if sub_str not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
        "test": "assert file_name_check(\"1example.dll\") == \"No\"",
        "num_ids": 4814,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    # Initialize sum variable to 0\n    total_sum = 0\n    \n    # Loop through each element in the list\n    for i in range(len(lst)):\n        # If index is multiple of 3, square the element\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        # If index is multiple of 4 but not multiple of 3, cube the element\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        \n        # Add the element to the total sum\n        total_sum += lst[i]\n    \n    return total_sum\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 3912,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n\n    for word in words:\n        if len(word) > 1 and is_prime(len(word)):\n            result.append(word)\n\n    return ' '.join(result)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 2592,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Split the input strings into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the product of x and n\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # Check if the product evaluates to a whole number\n    if product_num % product_den == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 2743,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits. \n    Note: if there are several items with similar sum of their digits, \n    order them based on their index in original list. \n    \n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \n    # If the list is empty, return it as is\n    if not nums:\n        return []\n    \n    # Calculate the sum of digits for each number\n    digit_sums = [sum(int(digit) for digit in str(abs(num))) for num in nums]\n    \n    # Combine the original list and the digit sums into tuples, sort them by digit sum, and extract the original list back\n    sorted_nums = [num for (sum_digits, num) in sorted(zip(digit_sums, nums))]\n    \n    return sorted_nums\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 4500,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count\n",
        "test": "assert specialFilter([11, 22, 33, 44, 55, 66, 77, 88, 99]) == 5",
        "num_ids": 1953,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    a = []\n    for i in range(1, n+1):\n        a.append(i*i - i + 1)\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 2866,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    \n    if planet1_index < planet2_index:\n        return tuple(planets[planet1_index+1:planet2_index])\n    else:\n        return tuple(planets[planet2_index+1:planet1_index][::-1])\n",
        "test": "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
        "num_ids": 3581,
        "indeed": false
    },
    {
        "number": 149,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    \n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 3897,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    # If n is 1 or 0, it's not a prime number\n    if n == 1 or n == 0:\n        return y\n    \n    # If n is 2 or 3, it's a prime number\n    if n == 2 or n == 3:\n        return x\n    \n    # If n is divisible by 2 or 3, it's not a prime number\n    if n % 2 == 0 or n % 3 == 0:\n        return y\n    \n    # Check if n is a prime number\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return y\n        i += 6\n    \n    return x\n",
        "test": "assert x_or_y(7, 34, 12) == 34, \"Error: x_or_y(7, 34, 12) should be 34\"",
        "num_ids": 2963,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def double_the_difference(lst):\n    # Initialize the sum of squares to 0\n    sum_of_squares = 0\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is odd and not negative\n        if num % 2 != 0 and num >= 0:\n            # Square the number and add it to the sum of squares\n            sum_of_squares += num**2\n            \n    # Return the sum of squares\n    return sum_of_squares\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 2723,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def compare(game, guess):\n    \"\"\"\n    Compare the scores and guesses of a game and determine how far off each guess was.\n\n    Parameters:\n    game (list): A list of scores for a series of matches.\n    guess (list): A list of guesses for the same series of matches.\n\n    Returns:\n    list: A list of integers representing the difference between the guesses and scores.\n    \"\"\"\n    results = []\n    for i in range(len(game)):\n        results.append(abs(game[i] - guess[i]))\n    return results",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 4004,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName. \n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    max_strength = -float('inf')\n    \n    for extension in extensions:\n        strength = len([c for c in extension if c.isupper()]) - len([c for c in extension if c.islower()])\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 5746,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cycpattern_check(a, b):\n    # Check if b is a substring of a\n    if b in a:\n        return True\n\n    # Check if any rotation of b is a substring of a\n    b_rotations = []\n    for i in range(len(b)):\n        b_rotations.append(b[i:] + b[:i])\n\n    for rotated_b in b_rotations:\n        if rotated_b in a:\n            return True\n\n    # If none of the above conditions are met, return False\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 2823,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple containing the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    \n    even_count = 0\n    odd_count = 0\n    \n    # If the number is negative, convert it to positive\n    num = abs(num)\n    \n    # Convert the number to a string to iterate over its digits\n    num_str = str(num)\n    \n    # Iterate over the digits and count the even and odd digits\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 2755,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 38,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_mapping = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_numeral = ''\n\n    for value, numeral in roman_mapping.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n\n    return roman_numeral.lower()\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 4642,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Using Heron's formula to calculate the area of the triangle\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    # If the area is zero, then the triangle is degenerate and does not exist.\n    if area == 0:\n        return False\n    # Check if any side is greater than the sum of the other two sides.\n    # If it is, then the triangle is not a valid triangle.\n    if a > b + c or b > a + c or c > a + b:\n        return False\n    # Check if the triangle is a right-angled triangle by checking if any angle is 90 degrees.\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(1, 2, 2) == False",
        "num_ids": 2795,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_max(words):\n    \"\"\"\n    Returns the word with maximum number of unique characters.\n    If multiple strings have maximum number of unique characters, returns\n    the one which comes first in lexicographical order.\n    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_word = word\n            max_count = count\n        elif count == max_count:\n            if word < max_word:\n                max_word = word\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 2538,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n",
        "test": "assert eat(2, 11, 5) == [7, 0]",
        "num_ids": 4471,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def do_algebra(operator, operand):\n    # Initialize the result with the first operand\n    result = operand[0]\n    # Loop over the rest of the operands and operators\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n        else:\n            raise ValueError(\"Invalid operator\")\n    return result\n",
        "test": "assert do_algebra(['//', '**'], [2, 3, 4]) == 0",
        "num_ids": 4408,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(s):\n    # Initialize an empty list to store the modified characters\n    modified_chars = []\n    \n    # Loop through each character in the string\n    for char in s:\n        # If the character is a letter, reverse its case\n        if char.isalpha():\n            modified_chars.append(char.swapcase())\n        # Otherwise, just add the character to the list\n        else:\n            modified_chars.append(char)\n    \n    # Convert the list of modified characters back into a string\n    modified_string = ''.join(modified_chars)\n    \n    # If the string contains no letters, reverse it\n    if not any(char.isalpha() for char in s):\n        modified_string = modified_string[::-1]\n    \n    return modified_string\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 2290,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    md5_hash = hashlib.md5(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 3897,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # ensure a is the smaller integer\n    a, b = (a, b) if a < b else (b, a)\n    # initialize the result list\n    result = []\n    # loop through all integers between a and b\n    for num in range(a, b+1):\n        # loop through each digit of the integer\n        for digit in str(num):\n            # if the digit is even, add it to the result list\n            if int(digit) % 2 == 0:\n                result.append(int(digit))\n    # remove duplicates and sort the result list in ascending order\n    result = sorted(list(set(result)))\n    return result\n",
        "test": "assert generate_integers(1, 1) == []",
        "num_ids": 3575,
        "indeed": false
    }
]