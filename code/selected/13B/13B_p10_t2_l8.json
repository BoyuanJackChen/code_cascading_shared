[
    {
        "number": 0,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 2211,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those. \n    Separate groups are balanced (each open brace is properly closed) and not nested within each other \n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove any spaces from the input string\n    paren_string = ''.join(paren_string.split())\n    \n    # Initialize a list to store the separate groups\n    groups = []\n    \n    # Initialize a string to store the current group being parsed\n    current_group = ''\n    \n    # Initialize a counter to keep track of the current number of open parentheses\n    open_parens = 0\n    \n    # Loop through each character in the input string\n    for char in paren_string:\n        if char == '(':\n            # If the character is an open parenthesis, increment the open_parens counter and add it to the current group\n            open_parens += 1\n            current_group += char\n        elif char == ')':\n            # If the character is a close parenthesis, decrement the open_parens counter and add it to the current group\n            open_parens -= 1\n            current_group += char\n            # If the open_parens counter reaches 0, the current group is complete\n            if open_parens == 0:\n                # Append the current group to the groups list\n                groups.append(current_group)\n                # Reset the current group and open_parens counter for the next group\n                current_group = ''\n                open_parens = 0\n        else:\n            # If the character is not a parenthesis, ignore it\n            pass\n    \n    return groups\n",
        "test": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
        "num_ids": 4467,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # Find the integer part of the number\n    integer_part = int(number)\n    \n    # Subtract the integer part from the original number\n    decimal_part = number - integer_part\n    \n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1492,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 2528,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result\n",
        "test": "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
        "num_ids": 2158,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses\n    separated by spaces. For each of the group, output the deepest level of\n    nesting of parentheses.\n    \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # initialize an empty list to store the results\n    results = []\n    # split the input string into groups\n    groups = paren_string.split()\n    # iterate over each group and calculate the max depth of nesting\n    for group in groups:\n        # initialize the current depth and the max depth to zero\n        current_depth = 0\n        max_depth = 0\n        # iterate over each character in the group\n        for char in group:\n            if char == '(':\n                # increase the current depth by one\n                current_depth += 1\n                # update the max depth if the current depth is greater\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                # decrease the current depth by one\n                current_depth -= 1\n        # add the max depth to the results list\n        results.append(max_depth)\n    # return the results list\n    return results\n",
        "test": "assert parse_nested_parens('()') == [1]",
        "num_ids": 3097,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \n    >>> filter_by_substring([], 'a')\n    []\n    \n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    \n    filtered_list = []\n    \n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    \n    return filtered_list\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1781,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    \n    for number in numbers:\n        total_product *= number\n        \n    return total_sum, total_product\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2518,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 2545,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Check if the string is already a palindrome\n    if is_palindrome(string):\n        return string\n\n    # Find the longest postfix of the string that is a palindrome\n    i = len(string) - 1\n    while i >= 0:\n        if is_palindrome(string[i:]):\n            break\n        i -= 1\n\n    # Append reverse of the string prefix to the end of the string\n    return string + string[:i][::-1]",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 3107,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 2009,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str\n",
        "test": "assert longest([]) == None",
        "num_ids": 1658,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1576,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert all_prefixes('') == []",
        "num_ids": 1319,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    return ' '.join(map(str, range(n+1)))",
        "test": "assert string_sequence(0) == \"0\"",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\"Given a string, find out how many distinct characters (regardless of case) does it consist of\"\"\"\n    # Convert the string to lowercase to make it case-insensitive\n    string = string.lower()\n    # Create a set of the distinct characters in the string\n    distinct_chars = set(string)\n    # Return the length of the set (which is the number of distinct characters)\n    return len(distinct_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 1669,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') != [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4, 5]",
        "num_ids": 3418,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases. \"\"\"\n    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 1803,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    \n    # Split the input string into a list of numbers\n    num_list = numbers.split()\n    \n    # Define a mapping of numberals to their corresponding integers\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Convert each number in the list to its corresponding integer using the num_map\n    num_int_list = [num_map[num] for num in num_list]\n    \n    # Sort the list of integers in ascending order\n    num_int_list.sort()\n    \n    # Convert the sorted list of integers back to their corresponding numberals using the reverse num_map\n    num_sorted_list = [list(num_map.keys())[list(num_map.values()).index(num)] for num in num_int_list]\n    \n    # Join the sorted list of numberals into a string and return it\n    return ' '.join(num_sorted_list)\n",
        "test": "assert sort_numbers(\"one two three four five\") == \"one two three four five\"",
        "num_ids": 3200,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    min_diff = float('inf')\n    smallest_num = None\n    largest_num = None\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                smallest_num = min(numbers[i], numbers[j])\n                largest_num = max(numbers[i], numbers[j])\n\n    return smallest_num, largest_num\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 3879,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list, \n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    \n    # finding the smallest and largest number in the list\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    # applying the linear transformation to all the numbers in the list\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    \n    return rescaled_numbers\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 3383,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    filtered_list = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_list.append(value)\n    return filtered_list\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 1507,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    i = n-1\n    while i >= 1:\n        if n % i == 0:\n            return i\n        i -= 1\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 2392,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            result.append(num)\n    return result\n",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1871,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase. \"\"\"\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n",
        "test": "assert flip_case(\"\") == \"\", \"Empty string should remain empty\"",
        "num_ids": 1278,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 1119,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix. \"\"\"\n\n    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1699,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 2150,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 1577,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n    \n    largest_non_zero = max(abs(coeff) for coeff in xs)\n    \n    start = -1.0\n    end = 1.0\n    \n    while end - start > 1e-10:\n        mid = (start + end) / 2\n        value = poly(xs, mid)\n        if abs(value) < 1e-10:\n            return mid\n        if value > 0:\n            end = mid\n        else:\n            start = mid\n        \n    return mid ",
        "test": "assert find_zero([1, 2]) == -0.5 # x = -0.5 will make f(x) = 1 + 2x = 0",
        "num_ids": 3758,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 2814,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1152,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1707,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for digit in str(i):\n                if digit == '7':\n                    count += 1\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 1628,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    l_even = sorted([l[i] for i in range(0, len(l), 2)])\n    l_odd = [l[i] for i in range(1, len(l), 2)]\n    l_sorted = []\n    for i in range(len(l_even)):\n        l_sorted.append(l_even[i])\n        if i < len(l_odd):\n            l_sorted.append(l_odd[i])\n    return l_sorted\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 2575,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycling of characters in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 2956,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    is_prime returns True if num is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_fibonacci(num: int) -> bool:\n    \"\"\"\n    is_fibonacci returns True if num is a Fibonacci number, False otherwise.\n    \"\"\"\n    a, b = 0, 1\n    while b < num:\n        a, b = b, a+b\n    return b == num\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 0\n    a, b = 0, 1\n    while count < n:\n        a, b = b, a+b\n        if is_prime(b) and is_fibonacci(b):\n            count += 1\n    return b\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 2724,
        "indeed": true
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    if len(l) < 3:\n        return False\n\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 4350,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    collisions = 0\n    left_to_right = [i * 2 for i in range(n)]\n    right_to_left = [(i * 2) + 1 for i in range(n)]\n\n    while left_to_right and right_to_left:\n        if left_to_right[0] == right_to_left[0]:\n            collisions += 1\n            left_to_right.pop(0)\n            right_to_left.pop(0)\n        elif left_to_right[0] < right_to_left[0]:\n            left_to_right.pop(0)\n        else:\n            right_to_left.pop(0)\n\n    return collisions",
        "test": "assert car_race_collision(1) == 0",
        "num_ids": 3223,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1886,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1752,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2131,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return 0.5 * a * h",
        "test": "assert triangle_area(5, 3) == 7.5, \"Function triangle_area should return 7.5 for inputs 5 and 3\"",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n\n    # Initialize the first 4 elements of the fib4 sequence\n    fib4_sequence = [0, 0, 2, 0]\n\n    # Calculate the remaining elements of the fib4 sequence\n    for i in range(4, n+1):\n        fib4_sequence.append(fib4_sequence[i-1] + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4])\n\n    # Return the n-th element of the fib4 sequence\n    return fib4_sequence[n]\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 2896,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    l.sort() # sort the list in ascending order\n    n = len(l) # get the length of the list\n    if n % 2 == 0: # if the list has an even number of elements\n        # take the average of the two middle numbers\n        return (l[n//2-1] + l[n//2]) / 2\n    else: # if the list has an odd number of elements\n        # return the middle number\n        return l[n//2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 2204,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 1273,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) * modp(n // 2, p) % p\n    else:\n        return (modp(n // 2, p) * modp(n // 2, p) * 2) % p\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 2020,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 1598,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 1795,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    set0 = set(s0)\n    set1 = set(s1)\n    return set0 == set1\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 1770,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(10) == 55",
        "num_ids": 1322,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    This function takes a string of \"<\" and \">\" characters as input.\n    It returns True if every opening bracket has a corresponding closing bracket, and False otherwise.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"<\") == False, \"Error: '<' should return False\"",
        "num_ids": 1452,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    inc = False\n    dec = False\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            if inc:\n                return False\n            dec = True\n        elif l[i] > l[i-1]:\n            if dec:\n                return False\n            inc = True\n    return True\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 1846,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    return sorted(list(common_elements))",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2297,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 1998,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return (n * (n + 1)) // 2\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 1500,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 1630,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    # Create an empty list to store the derivative coefficients\n    deriv = []\n    # Iterate over the coefficients, starting from the second one (i.e., skip the constant term)\n    for i in range(1, len(xs)):\n        # Multiply the coefficient by the degree it corresponds to\n        # and append it to the derivative list\n        deriv.append(i * xs[i])\n    return deriv\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 1945,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 2201,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1683,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits,\n    return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    \n    # Convert x to a string\n    x_str = str(x)\n    \n    # Get the number of digits in x\n    num_digits = len(x_str)\n    \n    # Check if shift is greater than the number of digits\n    if shift > num_digits:\n        # Reverse the digits of x and return as a string\n        return x_str[::-1]\n    else:\n        # Get the last shift digits of x\n        last_digits = x_str[-shift:]\n        \n        # Get the remaining digits of x\n        remaining_digits = x_str[:-shift]\n        \n        # Concatenate the last shift digits and remaining digits to form the result\n        result = last_digits + remaining_digits\n        \n        # Return the result as a string\n        return result\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 2310,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digitSum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n",
        "test": "assert digitSum(\"\") == 0, \"Test case 1 failed\"",
        "num_ids": 1729,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    try:\n        s = s.split()\n        count = 0\n        for word in s:\n            if word.isdigit():\n                count += int(word)\n        return n - count\n    except:\n        return \"Invalid input\"\n",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 3465,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_value = min(even_nodes)\n    smallest_index = arr.index(smallest_value)\n    return [smallest_value, smallest_index]",
        "test": "assert pluck([]) == []",
        "num_ids": 3015,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def search(lst):\n    max_value = -1\n    for num in lst:\n        if num > max_value and lst.count(num) >= num:\n            max_value = num\n    return max_value\n",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 2531,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    \n    if not lst:\n        return []\n    \n    new_list = []\n    \n    while lst:\n        min_val = min(lst)\n        new_list.append(min_val)\n        lst.remove(min_val)\n        \n        if lst:\n            max_val = max(lst)\n            new_list.append(max_val)\n            lst.remove(max_val)\n            \n    return new_list\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 3187,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side. \n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the three sides form a valid triangle\n    if a+b > c and a+c > b and b+c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a+b+c)/2\n        # Calculate the area of the triangle using Heron's formula\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 2799,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_palindrome(lst):\n    return lst == lst[::-1]\n\ndef sum_of_elements(lst):\n    return sum(lst)\n\ndef will_it_fly(q, w):\n    if is_palindrome(q) and sum_of_elements(q) <= w:\n        return True\n    return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 2109,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def smallest_change(arr):\n    n = len(arr)\n    # Initialize the number of changes required\n    changes = 0\n    # Initialize the index of the first element in the array\n    i = 0\n    # Initialize the index of the last element in the array\n    j = n-1\n    \n    while i < j:\n        # If the current element and the corresponding element from the end of the array are different, increment the number of changes\n        if arr[i] != arr[j]:\n            changes += 1\n        # Move the index of the first element one step to the right\n        i += 1\n        # Move the index of the last element one step to the left\n        j -= 1\n        \n    return changes\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 2874,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        total_len1 = sum(len(s) for s in lst1)\n        total_len2 = sum(len(s) for s in lst2)\n        if total_len1 == total_len2:\n            return lst1\n        elif total_len1 < total_len2:\n            return lst1\n        else:\n            return lst2\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 2333,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_multiply_prime(a):\n    \"\"\"Return True if a is the multiplication of 3 prime numbers,\n    False otherwise. The number a must be less than 100.\"\"\"\n    # Create a list of prime numbers up to 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # Iterate over the primes and check if a is their product\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n",
        "test": "assert is_multiply_prime(25) == False, \"25 is a multiplication of three prime numbers\"",
        "num_ids": 3104,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Returns true if a number x is a simple power of n and false in other cases.\n\n    :param x: the number to check if it's a simple power of n\n    :param n: the base of the simple power\n    :return: True if x is a simple power of n, False otherwise\n    \"\"\"\n    if n == 1:\n        return x == 1\n    elif n == 0:\n        return x == 0\n    else:\n        return x == n ** int(x / n)\n",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 1765,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def iscube(a):\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n    for i in range(1, int(a ** (1/3))+1):\n        if i**3 == a:\n            return True\n    return False\n",
        "test": "assert iscube(1) == True",
        "num_ids": 1758,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = {2, 3, 5, 7, 11, 13}\n    hex_to_dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, \n                   '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, \n                   'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    count = 0\n    for char in num:\n        if hex_to_dec[char] in primes:\n            count += 1\n    return count\n",
        "test": "assert hex_key(\"1077E\") == 2, \"Should be 2\"",
        "num_ids": 3072,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string. \n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    \n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 2019,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    # Check if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Check if every 3 consecutive letters are distinct\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    \n    # If no three consecutive letters are the same, return True\n    return True\n",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 1894,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n            GPA   |   Letter grade\n            4.0          A+\n            > 3.7       A \n            > 3.3       A- \n            > 3.0       B+\n            > 2.7       B \n            > 2.3       B-\n            > 2.0       C+\n            > 1.7       C\n            > 1.3       C-\n            > 1.0       D+ \n            > 0.7       D \n            > 0.0       D-\n            0.0       E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade > 3.7:\n            letter_grades.append(\"A\")\n        elif grade > 3.3:\n            letter_grades.append(\"A-\")\n        elif grade > 3.0:\n            letter_grades.append(\"B+\")\n        elif grade > 2.7:\n            letter_grades.append(\"B\")\n        elif grade > 2.3:\n            letter_grades.append(\"B-\")\n        elif grade > 2.0:\n            letter_grades.append(\"C+\")\n        elif grade > 1.7:\n            letter_grades.append(\"C\")\n        elif grade > 1.3:\n            letter_grades.append(\"C-\")\n        elif grade > 1.0:\n            letter_grades.append(\"D+\")\n        elif grade > 0.7:\n            letter_grades.append(\"D\")\n        elif grade > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    \n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 6688,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_length(string):\n    \"\"\"\n    Function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"\n    length = len(string)\n    return is_prime(length)\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 1545,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or i // 10 == 1:\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 1490,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    binary_sum = 0\n    while N > 0:\n        digit = N % 10\n        binary_sum += digit\n        N //= 10\n    binary_sum_str = format(binary_sum, 'b')\n    return binary_sum_str\n",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 1625,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n",
        "test": "assert add([4, 2, 6, 7]) == 2",
        "num_ids": 1741,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def anti_shuffle(s):\n    words = s.split()\n    anti_words = []\n    \n    for word in words:\n        anti_word = ''.join(sorted(word))\n        anti_words.append(anti_word)\n    \n    return ' '.join(anti_words)\n",
        "test": "assert anti_shuffle(\"Hi\") == \"Hi\"",
        "num_ids": 2002,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, which is similar to matrix,\n    however, unlike matrices, each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
        "num_ids": 3551,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting, \n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd, \n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    # Create a copy of the array to avoid changing the original array\n    sorted_array = array.copy()\n    \n    # Calculate the sum of the first and last element\n    first_sum = array[0]\n    last_sum = array[-1]\n    \n    # Determine if the sum is odd or even\n    if (first_sum + last_sum) % 2 == 0:\n        # Sort the array in descending order\n        sorted_array = sorted(array, reverse=True)\n    else:\n        # Sort the array in ascending order\n        sorted_array = sorted(array)\n    \n    return sorted_array\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 3650,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        ascii_value = ord(char)\n        # Check if the character is an uppercase letter\n        if 65 <= ascii_value <= 90:\n            ascii_value = ((ascii_value - 65 + 26 * 2) % 26) + 65\n        # Check if the character is a lowercase letter\n        elif 97 <= ascii_value <= 122:\n            ascii_value = ((ascii_value - 97 + 26 * 2) % 26) + 97\n        result += chr(ascii_value)\n    return result ",
        "test": "assert encrypt('') == ''",
        "num_ids": 3131,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Check if the list is empty\n    if len(lst) == 0:\n        return None\n    \n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Check if there is no second smallest element\n    if len(lst) == 1:\n        return None\n    \n    # Return the second smallest element\n    return lst[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 2263,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredom_count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 2128,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 1529,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    # define vowels and english alphabet\n    vowels = 'aeiouAEIOU'\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    # swap case of all letters\n    message = message.swapcase()\n    \n    # replace vowels with letter 2 places ahead\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            index = alphabet.index(char)\n            new_char = alphabet[index+2]\n            encoded_message += new_char\n        else:\n            encoded_message += char\n    \n    return encoded_message\n",
        "test": "assert encode(\"\") == \"\"",
        "num_ids": 2414,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(n):\n        return sum(map(int, str(n)))\n    \n    max_prime = max(filter(is_prime, lst))\n    return sum_of_digits(max_prime) ",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 3025,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n\n    is_lower = True\n    is_upper = True\n\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n\n        if is_lower and key.lower() != key:\n            is_lower = False\n        if is_upper and key.upper() != key:\n            is_upper = False\n\n    return is_lower or is_upper\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 2696,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n. \n    for example: \n    count_up_to(5) => [2,3] \n    count_up_to(11) => [2,3,5,7] \n    count_up_to(0) => [] \n    count_up_to(20) => [2,3,5,7,11,13,17,19] \n    count_up_to(1) => [] \n    count_up_to(18) => [2,3,5,7,11,13,17] \n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes[:n]\n",
        "test": "assert count_up_to(5) == [2,3]",
        "num_ids": 2690,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits. \n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # get the last digit of a\n    a_unit_digit = a % 10\n    # get the last digit of b\n    b_unit_digit = b % 10\n    # multiply the two digits\n    product = a_unit_digit * b_unit_digit\n    # return the product\n    return product\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 1823,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper('aBCdEf') == 1",
        "num_ids": 1226,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # convert the value to a float\n    num = float(value)\n\n    # check if the number is already an integer\n    if num == int(num):\n        return int(num)\n\n    # round the number away from zero\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 2806,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    if n % 2 == 0:\n        for i in range(n-1):\n            next_num = pile[-1] + 2\n            pile.append(next_num)\n    else:\n        for i in range(n-1):\n            next_num = pile[-1] + 1\n            pile.append(next_num)\n    return pile\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 2945,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces.\n    Your task is to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    \n    # split the string into words using commas or spaces as separators\n    words = s.split(\",\")\n    words = [word.strip() for word in words]\n    words = sum([word.split(\" \") for word in words], [])\n    \n    return words\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1994,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Check if x is greater than y\n    if x > y:\n        return -1\n    \n    # If x and y are even, then we can start checking from y\n    if x % 2 == 0 and y % 2 == 0:\n        # Keep checking numbers from y until we find an even number in the range\n        while y >= x:\n            if y % 2 == 0:\n                return y\n            y -= 1\n        return -1\n    \n    # If x is even and y is odd, then we can start checking from y-1\n    elif x % 2 == 0 and y % 2 != 0:\n        # Keep checking numbers from y until we find an even number in the range\n        while y >= x:\n            if y % 2 == 0:\n                return y\n            y -= 1\n        return -1\n    \n    # If x is odd and y is even, then we can start checking from y-1\n    elif x % 2 != 0 and y % 2 == 0:\n        # Keep checking numbers from y-1 until we find an even number in the range\n        while y >= x:\n            if y % 2 == 0:\n                return y\n            y -= 1\n        return -1\n    \n    # If x and y are odd, then we can start checking from y-1\n    else:\n        # Keep checking numbers from y-1 until we find an even number in the range\n        while y >= x:\n            if y % 2 == 0:\n                return y\n            y -= 1\n        return -1\n",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 3277,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        total = 0\n        for i in range(n, m+1):\n            total += i\n        rounded_total = round(total / (m - n + 1))\n        binary_repr = bin(rounded_total)\n        return binary_repr\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 2234,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)\n",
        "test": "assert unique_digits([152, 323, 1422, 10]) == []",
        "num_ids": 2758,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    \n               -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n               -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n    \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n               -> sort arr -> [-1, 1, 55]\n               -> reverse arr -> [55, 1, -1]\n    return = ['One']\n    \"\"\"\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr, reverse=True)\n    result = [digit_names[num-1] for num in sorted_arr]\n    return result\n",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
        "num_ids": 4959,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter, and returns a list of size n,\n    such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\n\ndef factorial(n):\n    \"\"\" Calculate the factorial of n \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n",
        "test": "assert f(0) == []",
        "num_ids": 1930,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count) ",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 2504,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num) if digit != '-') > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1997,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    One right shift operation means shifting all elements of the array by one \n    position in the right direction. The last element of the array will be moved to \n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False. If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can \n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given \n                    array by performing any number of right shift operations.\n                    \n    \"\"\"\n    \n    if not arr:\n        return True\n    \n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    return True\n",
        "test": "assert move_one_ball([]) == True",
        "num_ids": 4083,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers. \n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    # Check if all elements in lst1 are even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    \n    # Find the indices of all odd elements in lst1\n    odd_indices = [i for i in range(len(lst1)) if lst1[i] % 2 != 0]\n    \n    # If there are no odd elements in lst1, return \"YES\"\n    if not odd_indices:\n        return \"YES\"\n    \n    # Find the indices of even elements in lst2 that can be replaced with odd elements in lst1\n    even_indices = [i for i in range(len(lst2)) if lst2[i] % 2 == 0 and lst2[i] % 2 != lst1[odd_indices[0]] % 2]\n    \n    # If there are no even elements in lst2 that can be replaced with odd elements in lst1, return \"NO\"\n    if not even_indices:\n        return \"NO\"\n    \n    # Replace the first odd element in lst1 with the first even element in lst2\n    lst1[odd_indices[0]], lst2[even_indices[0]] = lst2[even_indices[0]], lst1[odd_indices[0]]\n    \n    # Check if all elements in lst1 are even after the exchange\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    \n    # If not, check if the remaining elements can be exchanged to make lst1 a list of only even numbers\n    return exchange(lst1[1:], lst2[1:] + [lst2[even_indices[0]]])\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 3932,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # create an empty dictionary to store the letter count\n    letter_count = {}\n    \n    # split the input string into a list of letters\n    letters = test.split()\n    \n    # loop through each letter in the list\n    for letter in letters:\n        # if the letter is already in the dictionary, increment its count\n        if letter in letter_count:\n            letter_count[letter] += 1\n        # else, add the letter to the dictionary with a count of 1\n        else:\n            letter_count[letter] = 1\n    \n    # find the most frequent letter(s) and their count(s)\n    max_count = 0\n    max_letters = []\n    for letter, count in letter_count.items():\n        if count > max_count:\n            max_count = count\n            max_letters = [letter]\n        elif count == max_count:\n            max_letters.append(letter)\n    \n    # create a dictionary with the most frequent letter(s) and their count(s)\n    result = {}\n    for letter in max_letters:\n        result[letter] = max_count\n    \n    return result",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 4427,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Create a set of characters from c\n    exclude_chars = set(c)\n\n    # Filter out the characters in s that are in exclude_chars\n    result_str = ''.join(filter(lambda x: x not in exclude_chars, s))\n\n    # Check if the result string is palindrome\n    is_palindrome = result_str == result_str[::-1]\n\n    return (result_str, is_palindrome)\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 2582,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    # initialize an empty list to store the output strings\n    output_list = []\n\n    # iterate over each string in the input list\n    for i in range(len(lst)):\n        # initialize an empty string to store the output for this string\n        output_string = \"\"\n\n        # iterate over each digit in the string\n        for j in range(len(lst[i])):\n            # check if the digit is odd\n            if int(lst[i][j]) % 2 == 1:\n                # if it is, add the string \"n\" to the output string\n                output_string += \"n\"\n            else:\n                # otherwise, add the string \"0\" to the output string\n                output_string += \"0\"\n\n        # add the output string to the list of output strings\n        output_list.append(\"the number of odd elements \" + output_string + \" in the string \" + str(i+1) + \" of the input.\")\n\n    return output_list\n",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",",
        "num_ids": 3423,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n",
        "test": "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
        "num_ids": 2390,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    # Initialize variables\n    wells = len(grid)\n    bucket_count = 0\n    bucket_capacity = 0\n    times = 0\n\n    # Traverse each well\n    for i in range(wells):\n        # Traverse each row of the well\n        for j in range(len(grid[i])):\n            # If the current unit is filled, add it to the bucket\n            if grid[i][j] == 1:\n                bucket_capacity += 1\n                # Check if the bucket is full\n                if bucket_capacity == capacity:\n                    # If the bucket is full, empty it\n                    bucket_count += 1\n                    times += math.ceil(bucket_capacity / wells)\n                    bucket_capacity = 0\n            else:\n                # If the current unit is empty, empty the bucket\n                if bucket_capacity > 0:\n                    bucket_count += 1\n                    times += math.ceil(bucket_capacity / wells)\n                    bucket_capacity = 0\n\n    # If there are still units left in the bucket, empty it\n    if bucket_capacity > 0:\n        bucket_count += 1\n        times += math.ceil(bucket_capacity / wells)\n\n    # Return the number of times the bucket needs to be lowered\n    return times\n",
        "test": "assert max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6",
        "num_ids": 5443,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sort_array(arr):\n    # First, sort the array based on the number of ones in their binary representation\n    arr.sort(key=lambda x: bin(x).count('1'))\n    \n    # Then, sort based on decimal value\n    arr.sort()\n    \n    # Return the sorted array\n    return arr\n",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 2751,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def select_words(s, n):\n    # Split the string s into a list of words\n    words = s.split()\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each word in the list of words\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        # Loop through each character in the word\n        for char in word:\n            # Check if the character is a consonant\n            if char.lower() in ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']:\n                # Increment the consonant counter\n                consonant_count += 1\n        # Check if the consonant count matches the given value n\n        if consonant_count == n:\n            # Add the word to the result list\n            result.append(word)\n    # Return the result list\n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 2511,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def get_closest_vowel(word):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    found = False\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+1] not in vowels and word[i+2] not in vowels:\n            found = True\n            break\n    if found:\n        return word[i]\n    else:\n        return \"\"\n",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 1660,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def match_parens(lst):\n    # Concatenate the two strings in the input list\n    s = lst[0] + lst[1]\n    \n    # Use a stack to keep track of open parentheses\n    stack = []\n    \n    # Iterate through the characters in the concatenated string\n    for c in s:\n        # If the character is an open parenthesis, push it onto the stack\n        if c == '(':\n            stack.append(c)\n        # If the character is a close parenthesis, check if the stack is empty\n        # If it is, the parentheses are not balanced and we can return 'No'\n        elif c == ')':\n            if not stack:\n                return 'No'\n            # If the stack is not empty, pop an open parenthesis off the stack\n            # We don't care what the popped parenthesis was, as long as we have an open one\n            # to balance this close parenthesis\n            stack.pop()\n    \n    # If we've made it this far, the parentheses are balanced and we can return 'Yes'\n    return 'Yes'\n",
        "test": "assert match_parens(['(', ')']) == 'Yes'",
        "num_ids": 3077,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    arr.sort()\n    return arr[-k:]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 2958,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # initialize the sum to 0\n    total = 0\n    \n    # loop over the even positions in the list\n    for i in range(0, len(lst), 2):\n        # if the element at this position is odd, add it to the total\n        if lst[i] % 2 == 1:\n            total += lst[i]\n    \n    return total\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 2459,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    total = 0\n    for num in arr[:k]:\n        if num < 100 and num >= 0:\n            total += num\n    return total\n",
        "test": "assert add_elements([1,2,3,4,5], 5) == 15",
        "num_ids": 3066,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([x for x in collatz if x % 2 != 0])",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 3394,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def valid_date(date):\n    \"\"\"\n    A function to validate the given date string.\n\n    Args:\n    date (str): A date string in the format mm-dd-yyyy.\n\n    Returns:\n    bool: True if the date is valid, False otherwise.\n    \"\"\"\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    # Check if the month, day, and year are within valid ranges\n    if 1 <= month <= 12 and 1 <= day <= 31 and 1900 <= year <= 2100:\n        # Check if the day is valid for the given month\n        if month in [1, 3, 5, 7, 8, 10, 12] and 1 <= day <= 31:\n            return True\n        elif month in [4, 6, 9, 11] and 1 <= day <= 30:\n            return True\n        elif month == 2 and 1 <= day <= 29:\n            return True\n\n    return False ",
        "test": "assert valid_date('03-11-2000') == True, \"Date should be valid\"",
        "num_ids": 4618,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for letter in txt:\n            if 'a' <= letter <= 'z':\n                count += ord(letter) % 2 == 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1393,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        elif lst[i] == lst[i+1]:\n            if i == len(lst)-2:\n                return True\n            elif lst[i] != lst[i+2]:\n                return False\n            else:\n                continue\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 2983,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals, where each interval is a pair of integers.\n    For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end. For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number. If the length of the intersection is a prime number,\n    return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect,\n    return \"NO\".\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Check if the intervals intersect\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    intersection_length = min(end1, end2) - max(start1, start2)\n\n    # Check if the length of the intersection is a prime number\n    if intersection_length > 1:\n        for i in range(2, int(intersection_length**0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 3705,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n\n    sign_product = 1\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n\n    mag_sum = sum([abs(num) for num in arr])\n\n    return mag_sum * sign_product\n",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9, \"Test case failed for [1, 2, 2, -4]\"",
        "num_ids": 2557,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell. Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct). You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that\n    lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    N = len(grid)\n    values = set(range(1, N*N+1))\n    grid_values = [grid[i][j] for i in range(N) for j in range(N)]\n    grid_values.sort()\n    min_path = []\n    for i in range(N*N):\n        for j in range(i+1, N*N):\n            if grid_values[j] not in values:\n                continue\n            lst_A = grid_values[:k]\n            lst_B = grid_values[:k]\n            lst_B[k-1] = grid_values[j]\n            lst_A.sort()\n            lst_B.sort()\n            if lst_A < lst_B:\n                min_path = lst_A\n                break\n        else:\n            continue\n        break\n    return min_path\n",
        "test": "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
        "num_ids": 6650,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def tri(n):\n    \"\"\"\n    Returns a list of the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    tribonacci = [1, 3, 2]\n    if n <= 2:\n        return tribonacci[:n + 1]\n\n    for i in range(3, n + 1):\n        tribonacci.append(tri(i - 1) + tri(i - 2) + tri(i + 1))\n    \n    return tribonacci[:n + 1]\n",
        "test": "assert tri(2) == [1, 3, 2]",
        "num_ids": 2975,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n",
        "test": "assert digits(4) == 0",
        "num_ids": 1559,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 1370,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n\n    # Round each element in the list to the upper int(Ceiling)\n    lst = [int(round(num)) for num in lst]\n\n    # Calculate the sum of squared numbers in the list\n    result = sum([num**2 for num in lst])\n\n    return result\n",
        "test": "assert sum_squares([1, 2, 3]) == 14",
        "num_ids": 2734,
        "indeed": false
    },
    {
        "number": 134,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False  \n    '''\n    if len(txt) == 0:\n        return False\n    \n    words = txt.split()\n    last_word = words[-1]\n    \n    if last_word[-1].isalpha() and len(last_word) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
        "num_ids": 1941,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def can_arrange(arr):\n    if len(arr) < 2:\n        return -1\n    \n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            continue\n        else:\n            return i\n    \n    return -1\n",
        "test": "assert can_arrange([1,2,3]) == -1, \"Test 2 failed\"",
        "num_ids": 1844,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 2916,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def compare_one(a, b):\n    try:\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n    except (AttributeError, ValueError):\n        pass\n    \n    if a > b:\n        return type(a)(a)\n    elif b > a:\n        return type(b)(b)\n    else:\n        return None\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 2486,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        n = n - 2\n    else:\n        n = n - 1\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            count += 1\n            n = n - 2\n        else:\n            n -= 1\n    return count == 4\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 2508,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def special_factorial(n):\n    \"\"\"\n    Calculates the special factorial of n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        for i in range(2, n):\n            result *= i\n        return result\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 1703,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    result = \"\"\n    previous_char = \"\"\n    consecutive_spaces = 0\n    \n    for char in text:\n        if char == \" \":\n            if previous_char == \" \":\n                consecutive_spaces += 1\n            else:\n                consecutive_spaces = 1\n        else:\n            if consecutive_spaces > 2:\n                result += \"-\" * (consecutive_spaces - 1)\n            elif consecutive_spaces == 1:\n                result += \"_\"\n            consecutive_spaces = 0\n            result += char\n        previous_char = char\n    \n    if consecutive_spaces > 2:\n        result += \"-\" * (consecutive_spaces - 1)\n    elif consecutive_spaces == 1:\n        result += \"_\"\n    \n    return result",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2002,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    \n    # Check if the file name contains more than three digits\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    # Split the file name into two parts before and after the dot\n    parts = file_name.split('.')\n    \n    # Check if the file name contains exactly one dot\n    if len(parts) != 2:\n        return 'No'\n    \n    # Check if the substring before the dot is valid\n    if not parts[0] or not (parts[0][0].isalpha() and parts[0][1:].isalnum()):\n        return 'No'\n    \n    # Check if the substring after the dot is valid\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all conditions are met, return 'Yes'\n    return 'Yes'\n",
        "test": "assert file_name_check(\"1example.dll\") == \"No\"",
        "num_ids": 4452,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    sum_value = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        \n        sum_value += lst[i]\n    \n    return sum_value\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 3021,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence, the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    words = sentence.split()\n    primes = []\n    for i in range(2, 10):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    new_words = []\n    for word in words:\n        if len(word) in primes:\n            new_words.append(word)\n    return \" \".join(new_words)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 2156,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def simplify(x, n):\n    # Split each fraction into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    # Calculate the product of the two fractions\n    prod_num = x_num * n_num\n    prod_den = x_den * n_den\n    # Check if the product evaluates to a whole number\n    if prod_num % prod_den == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 2577,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits. If there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(n):\n        \"\"\"\n        A helper function to calculate the sum of digits of a given number.\n        \"\"\"\n        s = 0\n        while n > 0:\n            s += n % 10\n            n //= 10\n        return s\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n",
        "test": "assert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2957,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and int(str(num)[0]) % 2 != 0:\n            count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1, \"Incorrect result for [15, -73, 14, -15]\"",
        "num_ids": 1483,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 2814,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune. \n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        i1 = planets.index(planet1)\n        i2 = planets.index(planet2)\n        if i1 <= i2:\n            return tuple(planets[i1+1:i2])\n        else:\n            return tuple(planets[i2+1:i1])\n    except ValueError:\n        return ()\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 3574,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. The order of the list should be ascending by length of each word,\n    and you should return the list sorted by that rule. If two words have the same length,\n    sort the list alphabetically. The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length. For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Remove strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length of each word and alphabetically for strings with the same length\n    sorted_lst = sorted(lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"ab\", \"cd\"]) == [\"aa\", \"ab\", \"cd\"]",
        "num_ids": 3140,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 2188,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    \n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            total += num * num\n    return total\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 2265,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def compare(game, guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing. \n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 3624,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class.\n    The strength of the extension is as follows:\n    Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = extensions[0]\n    strongest_strength = 0\n    \n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n        \n        if strength > strongest_strength or (strength == strongest_strength and extension < strongest_extension):\n            strongest_extension = extension\n            strongest_strength = strength\n    \n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 4098,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    b_rotations = []\n    b_len = len(b)\n    for i in range(b_len):\n        b_rotations.append(b[i:] + b[:i])\n\n    for rotation in b_rotations:\n        if rotation in a:\n            return True\n\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 2203,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    \n    even_count = 0\n    odd_count = 0\n    \n    # Convert the number to a string to count the number of even and odd digits\n    num_str = str(abs(num))\n    \n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2) # Test case 1: 1 even and 2 odd digits",
        "num_ids": 2217,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Define a dictionary mapping integers to roman numeral strings\n    roman_dict = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n\n    # Initialize an empty string to hold the roman numeral\n    roman_numeral = ''\n\n    # Iterate over the keys in descending order\n    for key in sorted(roman_dict.keys(), reverse=True):\n        # Divide the number by the key and obtain the quotient and remainder\n        quotient, remainder = divmod(number, key)\n\n        # Add the appropriate number of occurrences of the corresponding roman numeral string to the result\n        roman_numeral += roman_dict[key] * quotient\n\n        # Update the number to the remainder for the next iteration\n        number = remainder\n\n    # Return the result in lowercase\n    return roman_numeral.lower()\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 4230,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # check if the triangle inequality is satisfied\n    if a + b > c and a + c > b and b + c > a:\n        # if the triangle inequality is satisfied, check if any two sides form a right angle\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 2347,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_max(words):\n    \"\"\"Finds the word with maximum number of unique characters.\n    If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        unique_chars = set(word)\n        count = len(unique_chars)\n        if count > max_count or (count == max_count and word < max_word):\n            max_word = word\n            max_count = count\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1651,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 4801,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Check if operator and operand lists are valid\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Invalid operator and operand lists.\")\n\n    # Create the expression string\n    expression = \"\"\n    for i in range(len(operator)):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n\n    # Evaluate the expression\n    result = eval(expression)\n\n    return result",
        "test": "assert do_algebra(['+'], [1, 2]) == 3",
        "num_ids": 4322,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def solve(s):\n    # initialize the result string\n    result = \"\"\n    \n    # check if the string contains any letters\n    has_letters = False\n    for c in s:\n        if c.isalpha():\n            has_letters = True\n            break\n    \n    # if the string contains no letters, reverse it\n    if not has_letters:\n        result = s[::-1]\n    else:\n        # iterate over each character in the string\n        for c in s:\n            # if the character is a letter, reverse its case\n            if c.isalpha():\n                if c.islower():\n                    result += c.upper()\n                else:\n                    result += c.lower()\n            # otherwise, keep it as it is\n            else:\n                result += c\n    \n    return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 2072,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    md5 = hashlib.md5(text.encode())\n    return md5.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 1935,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    if a > b:\n        a, b = b, a\n\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n\n    return sorted(result)\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 3278,
        "indeed": false
    }
]