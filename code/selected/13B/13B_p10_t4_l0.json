[
    {
        "number": 0,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 2836,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    stack = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            if not stack:\n                continue\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n        elif char == \" \":\n            continue\n        else:\n            raise ValueError(\"Invalid character in input string\")\n\n    if stack:\n        raise ValueError(\"Unbalanced parentheses in input string\")\n\n    return result\n",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 4473,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    # get the integer and decimal parts of the number\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    # return the decimal part\n    return decimal_part ",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 1974,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1695,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset. \n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case): \n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    \n    mean = sum(numbers) / len(numbers)\n    deviation = [abs(x - mean) for x in numbers]\n    return sum(deviation) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 3145,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 2696,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses\n    separated by spaces. For each of the group, output the deepest level of nesting of parentheses.\n\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def helper(s: str, depth: int) -> int:\n        max_depth = depth\n        i = 0\n        while i < len(s):\n            if s[i] == '(':\n                max_depth = max(max_depth, helper(s[i+1:], depth+1))\n                i += 1  # skip the '('\n            elif s[i] == ')':\n                break\n            i += 1\n        return max_depth\n\n    result = []\n    for group in paren_string.split():\n        result.append(helper(group, 0))\n    return result\n",
        "test": "assert parse_nested_parens('') == [] ",
        "num_ids": 2922,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n\n    return filtered_strings\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 2486,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    \n    # Initialize sum and product variables to 0 and 1, respectively\n    total_sum = 0\n    total_product = 1\n    \n    # Iterate through the list of numbers\n    for num in numbers:\n        # Add the current number to the total sum\n        total_sum += num\n        \n        # Multiply the current number to the total product\n        total_product *= num\n    \n    # Return a tuple containing the total sum and total product\n    return (total_sum, total_product)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 2814,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        max_list.append(max_so_far)\n    return max_list",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 3202,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i-1::-1]\n    \n    # This should never happen, but just in case\n    return None\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 2903,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    Example:\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(a) ^ int(b)) for a, b in zip(a, b))\n",
        "test": "assert string_xor('010', '110') == '100' ",
        "num_ids": 2768,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    \n    max_length = len(strings[0])\n    longest_string = strings[0]\n    \n    for string in strings[1:]:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n            \n    return longest_string\n",
        "test": "assert longest([]) == None",
        "num_ids": 2049,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 2032,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefix_list = []\n    for i in range(len(string)):\n        prefix_list.append(string[:i+1])\n    return prefix_list\n",
        "test": "assert all_prefixes('') == []",
        "num_ids": 1649,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join([str(i) for i in range(n+1)])\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 2253,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    string = string.lower()\n    char_set = set()\n    for char in string:\n        char_set.add(char)\n    return len(char_set)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 2145,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    \n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    \n    for note in music_string.split():\n        result.append(beats[note])\n    \n    return result\n",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') != [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 5]",
        "num_ids": 4882,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases. \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 2067,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 36,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_list = []\n    for num in numbers.split():\n        if num == 'zero':\n            num_list.append(0)\n        elif num == 'one':\n            num_list.append(1)\n        elif num == 'two':\n            num_list.append(2)\n        elif num == 'three':\n            num_list.append(3)\n        elif num == 'four':\n            num_list.append(4)\n        elif num == 'five':\n            num_list.append(5)\n        elif num == 'six':\n            num_list.append(6)\n        elif num == 'seven':\n            num_list.append(7)\n        elif num == 'eight':\n            num_list.append(8)\n        elif num == 'nine':\n            num_list.append(9)\n    num_list.sort()\n    sorted_str = ''\n    for i in num_list:\n        if i == 0:\n            sorted_str += 'zero '\n        elif i == 1:\n            sorted_str += 'one '\n        elif i == 2:\n            sorted_str += 'two '\n        elif i == 3:\n            sorted_str += 'three '\n        elif i == 4:\n            sorted_str += 'four '\n        elif i == 5:\n            sorted_str += 'five '\n        elif i == 6:\n            sorted_str += 'six '\n        elif i == 7:\n            sorted_str += 'seven '\n        elif i == 8:\n            sorted_str += 'eight '\n        elif i == 9:\n            sorted_str += 'nine '\n    return sorted_str.strip()  # remove trailing space\n",
        "test": "assert sort_numbers('three one five') == 'one three five'",
        "num_ids": 4037,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers = sorted(numbers)\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n    \n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < min_diff:\n                closest_pair = (numbers[i], numbers[j])\n                min_diff = abs(numbers[i] - numbers[j])\n    \n    return closest_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 4446,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List should have at least two elements\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    \n    scaled_numbers = [(num - min_val) / (max_val - min_val) for num in numbers]\n    \n    return scaled_numbers\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 3938,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 1694,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 1008,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 35,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    i = n-1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n    return 1  # or throw an error, if no divisor is found\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 2039,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if the given integer is prime, else False.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 5449,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = [num for num in numbers if counts[num] == 1]\n    return result\n",
        "test": "assert remove_duplicates([]) == []",
        "num_ids": 2368,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 1679,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n\n    :param strings: List of strings to concatenate\n    :return: Concatenated string\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 1564,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 2593,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 2200,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    # if n is less than 2, it's not prime\n    if n < 2:\n        return False\n\n    # if n is 2, it's prime\n    if n == 2:\n        return True\n\n    # check if n is divisible by any number from 2 to n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    # if none of the above conditions are true, n is prime\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 2053,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if max(abs(coeff) for coeff in xs) == 0:\n        raise ValueError(\"xs must have non zero coefficients\")\n\n    x = 0\n    while abs(poly(xs, x)) > 1e-10:\n        x = x - poly(xs, x) / poly_derivative(xs, x)\n\n    return round(x, 2)\n\n\ndef poly_derivative(xs: list, x: float):\n    return sum([i * coeff for i, coeff in enumerate(xs)])\n",
        "test": "assert find_zero([1, -1]) == 1",
        "num_ids": 4420,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sort_third(l: list):\n    # Separate the list into two lists: one for indicies not divisible by three\n    # and one for indicies divisible by three.\n    not_div_by_3 = [x for i, x in enumerate(l) if i % 3 != 0]\n    div_by_3 = [x for i, x in enumerate(l) if i % 3 == 0]\n    # Sort the second list.\n    div_by_3.sort()\n    # Merge the two lists back together.\n    merged = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            merged.append(div_by_3.pop(0))\n        else:\n            merged.append(not_div_by_3.pop(0))\n    return merged\n",
        "test": "assert sort_third([]) == []",
        "num_ids": 3977,
        "indeed": true
    },
    {
        "number": 34,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123] ",
        "num_ids": 1610,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    if not l:\n        return None\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1790,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            while i > 0:\n                if i % 10 == 7:\n                    count += 1\n                i //= 10\n    return count",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 1927,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    l_sorted = sorted([l[i] for i in even_indices])\n    for i in even_indices:\n        l[i] = l_sorted.pop(0)\n    return l\n",
        "test": "assert sort_even([7, 8, 9, 10, 11, 12]) == [7, 8, 9, 10, 11, 12]",
        "num_ids": 3301,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 3792,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef fib(n: int) -> int:\n    \"\"\"\n    fib returns the n-th Fibonacci number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 0\n    i = 0\n    while True:\n        fib_n = fib(i)\n        if is_prime(fib_n):\n            count += 1\n            if count == n:\n                return fib_n\n        i += 1\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 3233,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()  # Sort the list in ascending order\n    n = len(l)\n    for i in range(n-2):  # Iterate through the list except the last two elements\n        left = i + 1  # Left pointer\n        right = n - 1  # Right pointer\n        while left < right:  # While the left pointer is less than the right pointer\n            total = l[i] + l[left] + l[right]  # Calculate the sum of the three elements\n            if total == 0:  # If the sum is 0, return True\n                return True\n            elif total < 0:  # If the sum is negative, increment the left pointer\n                left += 1\n            else:  # If the sum is positive, decrement the right pointer\n                right -= 1\n    return False  # If no three distinct elements sum to zero, return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 4534,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n // 2\n",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 3263,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 2373,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    \n    # First, create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for num in l:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Now, iterate over the dictionary and check if there are two elements that sum to zero\n    for num in freq_dict:\n        if -num in freq_dict:\n            if num != 0 and -num != 0:\n                return True\n    \n    # If no such pair is found, return False\n    return False ",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 2415,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if base == 1:\n        return '1' * x\n    result = ''\n    while x > 0:\n        remainder = x % base\n        if remainder < 10:\n            result = chr(remainder + ord('0')) + result\n        else:\n            result = chr(remainder - 10 + ord('A')) + result\n        x //= base\n    return result\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 2726,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5",
        "num_ids": 1302,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    # Initialize the first four elements of the sequence\n    fib4_seq = [0, 0, 2, 0]\n\n    # Compute the remaining elements of the sequence\n    for i in range(4, n+1):\n        fib4_seq.append(fib4_seq[-1] + fib4_seq[-2] + fib4_seq[-3] + fib4_seq[-4])\n\n    # Return the n-th element of the sequence\n    return fib4_seq[n]\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 2604,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    6\n    \"\"\"\n    sorted_l = sorted(l)\n    length = len(sorted_l)\n    mid = length // 2\n    if length % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]\n",
        "test": "assert median([1]) == 1",
        "num_ids": 2710,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 1664,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return pow(2, n, p)\n",
        "test": "assert modp(0, 101) == 1",
        "num_ids": 2314,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 31,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 2170,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 2051,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num > t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 2084,
        "indeed": false
    },
    {
        "number": 53,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"\n    This function adds two numbers x and y.\n\n    Args:\n    x: an integer value\n    y: an integer value\n\n    Returns:\n    The sum of x and y\n\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n\n    return set_s0 == set_s1",
        "test": "assert same_chars('eabcd', 'dddddddabc') == False",
        "num_ids": 2784,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55",
        "num_ids": 1455,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 1560,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    \n    if len(l) < 2:\n        return True\n    \n    direction = l[1] - l[0]\n    \n    for i in range(1, len(l)):\n        if direction == 0:\n            direction = l[i] - l[i-1]\n        elif (l[i] - l[i-1]) * direction < 0:\n            return False\n    \n    return True\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 2801,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1.intersection(s2))",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 2886,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_prime(n: int) -> bool:\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i <= n // i:\n        if n % i == 0 and is_prime(i):\n            n //= i\n        else:\n            i += 1\n    return n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 2512,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def sum_to_n(n: int):\n    \"\"\"\n    This function calculates the sum of numbers from 1 to n.\n    \"\"\"\n    return (n * (n + 1)) // 2",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 1671,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 1792,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    derivative_coefficients = []\n    for i in range(1, len(xs)):\n        derivative_coefficients.append(i * xs[i])\n    return derivative_coefficients\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 2271,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(1) == 0",
        "num_ids": 2157,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    count = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n            if letter.lower() == 'y' and s.index(letter) != len(s)-1:\n                count -= 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 2194,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert x to a string and split into a list of digits\n    digits = [int(d) for d in str(x)]\n    # Calculate the length of the list of digits\n    length = len(digits)\n    # If shift is greater than length, shift will be reduced modulo length\n    shift = shift % length\n    # Circular shift the list of digits\n    digits = digits[shift:] + digits[:shift]\n    # Join the list of digits back into a string and return it\n    return ''.join(str(d) for d in digits)\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 2666,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digitSum(s):\n    # Initialize sum variable\n    sum = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Convert the character to its ASCII code and add it to the sum\n            sum += ord(char)\n    \n    # Return the final sum\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 1737,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 40,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def fruit_distribution(s,n):\n    # split the string into two parts\n    fruit_list = s.split()\n    # initialize variables for apples and oranges\n    apples = 0\n    oranges = 0\n    # iterate through the list and find the count of apples and oranges\n    for i in range(len(fruit_list)):\n        if fruit_list[i] == \"apples\":\n            apples = int(fruit_list[i-1])\n        elif fruit_list[i] == \"oranges\":\n            oranges = int(fruit_list[i-1])\n    # calculate the number of mango fruits in the basket\n    mango_fruits = n - apples - oranges\n    return mango_fruits\n",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\",3) == 2",
        "num_ids": 3975,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_value:\n            smallest_value = value\n            smallest_index = i\n\n    if smallest_index == -1:\n        return []\n    else:\n        return [smallest_value, smallest_index]",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 3369,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the maximum integer that meets the frequency condition\n    max_num = -1\n    for num in freq_dict:\n        if num > 0 and freq_dict[num] >= num:\n            if num > max_num:\n                max_num = num\n    \n    return max_num",
        "test": "assert search([]) == -1",
        "num_ids": 2574,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:  # if the list is empty\n        return []\n    \n    result = []\n    lst.sort()  # sort the list in ascending order\n    \n    for i in range(len(lst)//2):\n        result.append(lst[i])\n        result.append(lst[-(i+1)])\n    \n    if len(lst) % 2 != 0:  # if the list has an odd length\n        result.append(lst[len(lst)//2])\n    \n    return result\n",
        "test": "assert strange_sort_list([]) == []",
        "num_ids": 3441,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Check if the three sides form a valid triangle\n    if a+b > c and a+c > b and b+c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c)/2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00, \"Test case 1 failed\"",
        "num_ids": 3139,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def will_it_fly(q,w):\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 2334,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def smallest_change(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count\n",
        "test": "assert smallest_change([1,1,1,1,1]) == 0",
        "num_ids": 3499,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Get the total number of chars in the two lists\n    total1 = sum([len(s) for s in lst1])\n    total2 = sum([len(s) for s in lst2])\n\n    # If the two lists have the same number of chars, return the first list\n    if total1 == total2:\n        return lst1\n\n    # Return the list that has less total number of chars\n    if total1 < total2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 2541,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Returns True if the given number 'a' is the multiplication of 3 prime numbers\n    and False otherwise. The number 'a' should be less than 100.\n    \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # Create a list of prime numbers less than 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check if 'a' is a product of 3 prime numbers\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    \n    # If no such combination is found, return False\n    return False\n",
        "test": "assert is_multiply_prime(16) == False",
        "num_ids": 3564,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Returns true if a number x is a simple power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    elif n == 1:\n        return x == 1\n    else:\n        return x == n ** (x // n)\n",
        "test": "assert is_simple_power(3, 2) == False",
        "num_ids": 2076,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def iscube(a):\n    if a > 0:\n        return round(a ** (1/3)) ** 3 == a\n    elif a < 0:\n        return round((-a) ** (1/3)) ** 3 == -a\n    else:\n        return True\n",
        "test": "assert iscube(2) == False",
        "num_ids": 2021,
        "indeed": true
    },
    {
        "number": 78,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def hex_key(num):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n        elif digit in ['A', 'B', 'C', 'D', 'E', 'F']:\n            hex_digit = int(digit, 16)\n            if hex_digit in primes:\n                count += 1\n\n    return count",
        "test": "assert hex_key(\"1077E\") == 2",
        "num_ids": 4072,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts a decimal number to binary format and returns a string with the result.\n    The string will have an extra 'db' at the beginning and the end.\n    \"\"\"\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    result = \"db\" + binary_str + \"db\"\n    return result ",
        "test": "assert decimal_to_binary(255) == \"db11111111db\"",
        "num_ids": 2359,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_happy(s):\n    \"\"\"\n    This function takes a string as input and returns True if the string is happy, False otherwise.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    # If every 3 consecutive letters are distinct, return True\n    return True\n",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 2181,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n            4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n            0.0                E\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 7928,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Checks if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Checks if the length of a string is a prime number\"\"\"\n    length = len(string)\n    return is_prime(length)",
        "test": "assert prime_length('Hello') == True, \"prime_length('Hello') should be True\"",
        "num_ids": 1648,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or i // 10 == 1:\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 1600,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 38,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    sum = 0\n    while N > 0:\n        digit = N % 10\n        sum += digit\n        N //= 10\n    return bin(sum)[2:]\n",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 2663,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Loop through the list\n    for i in range(len(lst)):\n        \n        # Check if the current element is even and at odd index\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            \n            # Add the even element to the total sum\n            total_sum += lst[i]\n    \n    # Return the total sum\n    return total_sum\n",
        "test": "assert add([4, 2, 6, 7]) == 2 # Test case 1",
        "num_ids": 2217,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def anti_shuffle(s):\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return ' '.join(words)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 2064,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    result = []\n    for row_index, row in enumerate(lst):\n        for column_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, column_index))\n\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row([], 1) == []",
        "num_ids": 4223,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 30,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    # Create a copy of the input array to avoid modifying the original\n    array_copy = array.copy()\n    \n    # Calculate the sum of the first and last elements of the array\n    array_sum = array_copy[0] + array_copy[-1]\n    \n    # If the sum is odd, sort the array in ascending order\n    if array_sum % 2 == 1:\n        array_copy.sort()\n    # If the sum is even, sort the array in descending order\n    else:\n        array_copy.sort(reverse=True)\n        \n    return array_copy",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 4436,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 40,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def encrypt(s):\n    \"\"\"\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Create an empty string to hold the encrypted string\n    encrypted_string = \"\"\n\n    # Loop through each character in the input string\n    for char in s:\n        # If the character is a letter, encrypt it and add it to the encrypted string\n        if char.isalpha():\n            # Get the ASCII value of the character\n            ascii_value = ord(char)\n\n            # If the character is uppercase, shift it down by two * 2 = 4\n            if char.isupper():\n                encrypted_char = chr((ascii_value - 65 + 4) % 26 + 65)  # 65 = ASCII value of 'A'\n            # If the character is lowercase, shift it down by two * 2 = 4\n            else:\n                encrypted_char = chr((ascii_value - 97 + 4) % 26 + 97)  # 97 = ASCII value of 'a'\n            encrypted_string += encrypted_char\n        # If the character is not a letter, add it to the encrypted string as is\n        else:\n            encrypted_string += char\n\n    return encrypted_string\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 3218,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    lst = sorted(set(lst))\n    \n    if len(lst) < 2:\n        return None\n    \n    return lst[1]\n",
        "test": "assert next_smallest([5, 1, 4, 3, 2]) == 2",
        "num_ids": 2615,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    \n    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            count += 1\n            \n    return count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 2777,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert any_int(3, 2, 2) == False",
        "num_ids": 2016,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def encode(message):\n    vowels = 'AEIOUaeiou'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            index = (ord(char) - ord('A') + 2) % 26\n            encoded_message += chr(index + ord('A'))\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message",
        "test": "assert encode('12345') == '12345'",
        "num_ids": 2721,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    primes = [x for x in lst if is_prime(x)]\n    largest_prime = max(primes)\n    digits = [int(digit) for digit in str(largest_prime)]\n    return sum(digits)\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 4562,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    # check if all keys are strings in lower case\n    if all(isinstance(k, str) and k.islower() for k in dict.keys()):\n        return True\n    \n    # check if all keys are strings in upper case\n    if all(isinstance(k, str) and k.isupper() for k in dict.keys()):\n        return True\n    \n    return False\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True, \"Test case 1 failed\"",
        "num_ids": 3595,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_up_to(n):\n    \"\"\"\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n. For example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n < 2:\n        return []\n    primes = [2]\n    for num in range(3, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes[:n]\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 2904,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    # Get the unit digits of a and b\n    a_unit = a % 10\n    b_unit = b % 10\n    \n    # Calculate the product of the unit digits\n    product = a_unit * b_unit\n    \n    return product\n",
        "test": "assert multiply(2020, 1851) == 0",
        "num_ids": 2434,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper('aBCdEf') == 1, \"Count upper failed on 'aBCdEf'\"",
        "num_ids": 1581,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # convert the string value to float\n    num = float(value)\n\n    # get the integer part and the decimal part\n    integer_part = int(num)\n    decimal_part = num - integer_part\n\n    # if the decimal part is 0, the number is already an integer\n    if decimal_part == 0:\n        return integer_part\n\n    # calculate the difference between the decimal part and 0.5\n    diff = abs(decimal_part - 0.5)\n\n    # if the difference is less than 0.5, round the number to the nearest integer\n    if diff < 0.5:\n        if decimal_part < 0.5:\n            return integer_part\n        else:\n            return integer_part + 1\n\n    # if the difference is greater than 0.5, round the number away from zero\n    elif decimal_part < 0:\n        return integer_part - 1\n    else:\n        return integer_part + 1",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 3308,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = []\n    if n % 2 == 0:\n        pile.append(n)\n        for i in range(n-1):\n            pile.append(pile[-1]+2)\n    else:\n        pile.append(n)\n        for i in range(n-1):\n            pile.append(pile[-1]+1)\n    return pile\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 2886,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 36,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def words_string(s):\n    # Split the string using commas and spaces as separators\n    words = s.split(', ')\n    words = [word.strip() for word in words]\n    \n    # If there are still spaces in the words, split them again\n    words = [word.split() for word in words]\n    words = [word for sublist in words for word in sublist]\n    \n    # Return the list of words\n    return words",
        "test": "assert words_string(\"Hello\") == [\"Hello\"]",
        "num_ids": 3144,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # Initialize the result variable to -1\n    result = -1\n    \n    # Check if x is greater than y\n    if x > y:\n        return result\n    \n    # Initialize the current number variable to the smallest even number in the range\n    current_number = x if x % 2 == 0 else x + 1\n    \n    # Loop through all even numbers in the range\n    while current_number <= y:\n        # Check if the current number is even\n        if current_number % 2 == 0:\n            # Update the result variable if the current number is greater than the previous result\n            if current_number > result:\n                result = current_number\n        \n        # Increment the current number by 2\n        current_number += 2\n    \n    # Return the result variable\n    return result\n",
        "test": "assert choose_num(1, 1) == -1",
        "num_ids": 3556,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m+1):\n            sum += i\n        avg = sum / (m - n + 1)\n        rounded_avg = round(avg)\n        binary = bin(rounded_avg)\n        return binary\n",
        "test": "assert rounded_avg(1, 5) == \"0b11\"",
        "num_ids": 2339,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_digits(x):\n    def has_even_digit(n):\n        while n > 0:\n            if n % 2 == 0:\n                return True\n            n //= 10\n        return False\n    \n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result",
        "test": "assert unique_digits([152, 323, 1422, 10]) == []",
        "num_ids": 3318,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]  \n                            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n\n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55]  -> sort arr -> [-1, 1, 55]\n                              -> reverse arr -> [55, 1, -1]\n    return = ['One']\n    \"\"\"\n    \n    # First, create a dictionary to map integers to their corresponding names\n    names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    \n    # Filter out the integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort and reverse the filtered array\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each integer to its corresponding name and return the resulting array\n    result = [names[num] for num in reversed_arr]\n    \n    return result\n",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
        "num_ids": 5269,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise. i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result\n",
        "test": "assert f(0) == []",
        "num_ids": 2396,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 3767,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 36,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def sum_of_digits(num):\n        \"\"\"\n        Helper function to calculate the sum of digits of a number.\n        \"\"\"\n        if num == 0:\n            return 0\n        elif num < 0:\n            num = -num\n            return -sum_of_digits(num // 10)\n        else:\n            return num % 10 + sum_of_digits(num // 10)\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count",
        "test": "assert count_nums([]) == 0",
        "num_ids": 2611,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n                 \n    \"\"\"\n\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n\n    if arr == sorted_arr:\n        return True\n\n    for i in range(len(arr)):\n        arr.append(arr.pop(0))\n        if arr == sorted_arr:\n            return True\n\n    return False",
        "test": "assert move_one_ball([]) == True",
        "num_ids": 5385,
        "indeed": true
    },
    {
        "number": 110,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    This function takes two lists of numbers and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers.\n    If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".\n    \"\"\"\n    # Initialize the count of even numbers in lst1 and odd numbers in lst1\n    count_even = 0\n    count_odd = 0\n    \n    # Traverse through lst1 and count the even and odd numbers in it\n    for num in lst1:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    \n    # If all the elements of lst1 are even, return \"YES\"\n    if count_even == len(lst1):\n        return \"YES\"\n    \n    # If all the elements of lst1 are odd, return \"NO\"\n    elif count_odd == len(lst1):\n        return \"NO\"\n    \n    # If lst1 has both even and odd numbers, then we need to swap elements from lst2 to make lst1 a list of only even numbers\n    else:\n        for i in range(len(lst2)):\n            # If the i-th element of lst2 is odd and can be swapped with an even element of lst1, then swap it\n            if lst2[i] % 2 != 0 and count_even > 0:\n                # Find the index of the first even element of lst1\n                j = 0\n                while j < len(lst1) and lst1[j] % 2 != 0:\n                    j += 1\n                lst1[j], lst2[i] = lst2[i], lst1[j]\n                count_even -= 1\n                count_odd += 1\n            # If the i-th element of lst2 is even and can be swapped with an odd element of lst1, then swap it\n            elif lst2[i] % 2 == 0 and count_odd > 0:\n                # Find the index of the first odd element of lst1\n                j = 0\n                while j < len(lst1) and lst1[j] % 2 == 0:\n                    j += 1\n                lst1[j], lst2[i] = lst2[i], lst1[j]\n                count_even += 1\n                count_odd -= 1\n        \n        # Check if lst1 contains only even numbers after the swaps\n        if count_even == len(lst1):\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "test": "assert exchange([2, 4], [1, 2, 3, 4]) == \"YES\"",
        "num_ids": 5732,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def histogram(test):\n    # Split the input string into a list of characters\n    chars = test.split()\n    \n    # Create an empty dictionary to store the histogram\n    hist = {}\n    \n    # Iterate over the characters\n    for char in chars:\n        # If the character is already in the histogram, increment its count\n        if char in hist:\n            hist[char] += 1\n        # Otherwise, add it to the histogram with a count of 1\n        else:\n            hist[char] = 1\n    \n    # Find the maximum count in the histogram\n    max_count = max(hist.values())\n    \n    # Create a new dictionary to store the result\n    result = {}\n    \n    # Iterate over the characters again\n    for char, count in hist.items():\n        # If the count is equal to the maximum count, add it to the result\n        if count == max_count:\n            result[char] = count\n    \n    # Return the result dictionary\n    return result",
        "test": "assert histogram('a b b a') == {'a': 2, 'b': 2}",
        "num_ids": 3718,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_delete(s, c):\n    # Removing the characters in c from s\n    s = ''.join([i for i in s if i not in c])\n    \n    # Checking if the result string is palindrome or not\n    is_palindrome = True if s == s[::-1] else False\n    \n    # Returning the result string and the palindrome check\n    return (s, is_palindrome)\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 2310,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4 in the string 1 of the input.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1 in the string 1 of the input.\",\n     \"the number of odd elements 8 in the string 2 of the input.\"]\n    \"\"\"\n    result = []\n    for index, string in enumerate(lst):\n        odd_count = 0\n        for char in string:\n            if char in '13579':\n                odd_count += 1\n        result.append(f\"the number of odd elements {odd_count} in the string {index+1} of the input.\")\n    return result\n",
        "test": "assert odd_count(['1234567']) == [\"the number of odd elements 4 in the string 1 of the input.\"]",
        "num_ids": 3991,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n            \n    return min_sum",
        "test": "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
        "num_ids": 2607,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def max_fill(grid, capacity):\n    import math\n\n    # Count the number of wells with water\n    num_wells = 0\n    for row in grid:\n        num_wells += row.count(1)\n\n    # Calculate the maximum number of times we can lower the buckets\n    max_fills = math.ceil(num_wells / capacity)\n\n    return max_fills\n",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0 ",
        "num_ids": 5576,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Count number of ones in binary representation of each number\n    def count_ones(n):\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count\n\n    # Sort the array based on number of ones and then on decimal value\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
        "test": "assert sort_array([32, 64, 128, 256, 512]) == [32, 64, 128, 256, 512]",
        "num_ids": 3791,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    def is_consonant(c):\n        return c not in ['a', 'e', 'i', 'o', 'u']\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        \n        for c in word:\n            if is_consonant(c):\n                consonant_count += 1\n        \n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 3746,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"AEIOUaeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"\n",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 3139,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    '''\n    \n    # Concatenate the two strings in the given order\n    s = lst[0] + lst[1]\n    \n    # Initialize a stack to keep track of open parentheses\n    stack = []\n    \n    # Iterate through the concatenated string\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    \n    # If the stack is empty, then all parentheses are balanced and the string is good\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "test": "assert match_parens(['()(', ')']) == 'Yes'",
        "num_ids": 4047,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n\n    # Return the first k elements of the sorted array\n    return sorted_arr[:k]\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 3033,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through the list\n    for i in range(len(lst)):\n        # Check if the current element is odd and the index is even\n        if i % 2 == 0 and lst[i] % 2 == 1:\n            # Add the current element to the total sum\n            total_sum += lst[i]\n    \n    return total_sum\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 2722,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def add_elements(arr, k):\n    count = 0\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            count += 1\n            sum += arr[i]\n    return sum\n",
        "test": "assert add_elements([10, 20, 30, 40, 50], 5) == 150 ",
        "num_ids": 3516,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def collatz(n):\n    \"\"\"\n    Given a positive integer n, return a list of the Collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the  \n    previous term as follows: if the previous term is even, the next term is one half of  \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    collatz(5) returns [5, 16, 8, 4, 2, 1] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + collatz(n // 2)\n    else:\n        return [n] + collatz(3 * n + 1)\n\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_seq = collatz(n)\n    odd_nums = [num for num in collatz_seq if num % 2 != 0]\n    return sorted(odd_nums)\n",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 3813,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def valid_date(date_str):\n    \"\"\"\n    Validate a given date string and return True if the date is valid, False otherwise.\n    A date is valid if it meets the following criteria:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than the maximum number of days for the given month.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n\n    # Split the date string into month, day, and year components\n    try:\n        month, day, year = map(int, date_str.split('-'))\n    except ValueError:\n        return False\n\n    # Check if the date string is empty or in the wrong format\n    if not all((month, day, year)):\n        return False\n\n    # Check if the month is out of range\n    if month < 1 or month > 12:\n        return False\n\n    # Determine the maximum number of days for the given month\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        max_days = 31\n    elif month in (4, 6, 9, 11):\n        max_days = 30\n    elif month == 2:\n        max_days = 29 if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) else 28\n    else:\n        return False\n\n    # Check if the day is out of range\n    if day < 1 or day > max_days:\n        return False\n\n    # If all checks passed, the date is valid\n    return True\n",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 5248,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt.lower():\n            if ord(char) % 2 != 0:\n                count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 1732,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    prev = None\n    for i in lst:\n        if prev is not None and i < prev:\n            return False\n        prev = i\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 3532,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def intersection(interval1, interval2):\n    # Check if the two intervals intersect\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n\n    # Find the start and end points of the intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Check if the length is a prime number\n    is_prime = True\n    if length <= 1:\n        is_prime = False\n    elif length == 2:\n        is_prime = False\n    else:\n        for i in range(2, length):\n            if length % i == 0:\n                is_prime = False\n                break\n\n    if is_prime:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 3652,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    prod_sign = 1\n    for sign in signs:\n        prod_sign *= sign\n\n    magnitudes = [abs(x) for x in arr]\n    mag_sum = sum(magnitudes)\n\n    result = mag_sum * prod_sign\n    return result ",
        "test": "assert prod_signs([]) == None",
        "num_ids": 2446,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef minPath(grid, k):\n    N = len(grid)\n    cell_values = {}\n    for i in range(N):\n        for j in range(N):\n            cell_values[grid[i][j]] = (i, j)\n\n    def is_valid(x, y):\n        return 0 <= x < N and 0 <= y < N\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny) and grid[nx][ny] not in path:\n                path.append(grid[nx][ny])\n                if dfs(nx, ny, path):\n                    return path\n                path.pop()\n\n    start_cell = cell_values[1]\n    path = [1]\n    if dfs(start_cell[0], start_cell[1], path):\n        return path\n    else:\n        return []\n",
        "test": "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 1) == [1]",
        "num_ids": 6650,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    tribonacci = [1, 3]\n    n_plus_1 = n + 1\n\n    if n_plus_1 <= 2:\n        return tribonacci[:n_plus_1]\n\n    for i in range(2, n_plus_1):\n        if i % 2 == 0:\n            tribonacci.append(tribonacci[-1] + i // 2)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n\n    return tribonacci\n",
        "test": "assert tri(1) == [1, 3]",
        "num_ids": 3661,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    all_even = True\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            all_even = False\n        n //= 10\n    return product if not all_even else 0\n",
        "test": "assert digits(4) == 0",
        "num_ids": 1894,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']':\n            if not stack or stack[-1] == ']':\n                return False\n            stack.pop()\n            \n    return bool(stack) and any(bracket == '[' for bracket in stack)\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 1737,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    \n    # Round each element in the list to the upper int(Ceiling)\n    rounded_lst = [math.ceil(num) for num in lst]\n    \n    # Compute the sum of squared rounded elements\n    sum_of_squares = sum([num**2 for num in rounded_lst])\n    \n    return sum_of_squares\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 3222,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty\n    if not txt:\n        return False\n\n    # Check if the last character is an alphabetical character\n    if txt[-1].isalpha():\n        # Check if the last character is part of a word\n        if txt[-2] == \" \":\n            return True\n    return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"\") == False ",
        "num_ids": 2660,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i-1\n        \n    return -1\n",
        "test": "assert can_arrange([1]) == -1",
        "num_ids": 2417,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. If there is no negative or positive integers,\n    return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negative_largest = None\n    positive_smallest = None\n\n    for num in lst:\n        if num < 0:\n            if negative_largest is None or num > negative_largest:\n                negative_largest = num\n        elif num > 0:\n            if positive_smallest is None or num < positive_smallest:\n                positive_smallest = num\n\n    return negative_largest, positive_smallest\n",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 3349,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    try:\n        a = float(a.replace(',', '.'))\n    except (ValueError, AttributeError):\n        pass\n\n    try:\n        b = float(b.replace(',', '.'))\n    except (ValueError, AttributeError):\n        pass\n\n    if a == b:\n        return None\n    elif a > b:\n        return type(a)(a)\n    else:\n        return type(b)(b)\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 2964,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 8:\n        return False\n    elif n == 8:\n        return True\n    else:\n        for i in range(2, n//2+1, 2):\n            for j in range(2, (n-i)//2+1, 2):\n                for k in range(2, (n-i-j)//2+1, 2):\n                    l = n-i-j-k\n                    if l > 0 and l%2 == 0:\n                        return True\n        return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 2814,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # Initialize the result with 1\n    result = 1\n    \n    # Loop from n to 1 and multiply with the result\n    for i in range(n, 0, -1):\n        result *= i\n    \n    # Return the result\n    return result\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 2019,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    \n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Split the text into words\n    words = text.split(\"_\")\n    \n    # Loop through the words and replace consecutive spaces with -\n    new_words = []\n    for i, word in enumerate(words):\n        if \"  \" in word:\n            new_words.append(word.replace(\"  \", \"-\"))\n        else:\n            new_words.append(word)\n    \n    # Join the words back together\n    return \"_\".join(new_words)\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 2580,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Initialize variables to keep track of the number of digits, the number of dots, and whether the name starts with a letter or not\n    num_digits = 0\n    num_dots = 0\n    starts_with_letter = False\n\n    # Iterate through the file name\n    for i in range(len(file_name)):\n        # If the character is a digit, increment the counter\n        if file_name[i].isdigit():\n            num_digits += 1\n        # If the character is a dot, increment the counter\n        elif file_name[i] == '.':\n            num_dots += 1\n        # If the character is a letter and it's the first character, set the flag to True\n        elif i == 0 and file_name[i].isalpha():\n            starts_with_letter = True\n\n    # Check if there are more than three digits, more than one dot, or the name doesn't start with a letter\n    if num_digits > 3 or num_dots != 1 or not starts_with_letter:\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    allowed_extensions = ['txt', 'exe', 'dll']\n    if file_name.split('.')[-1] not in allowed_extensions:\n        return 'No'\n\n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == \"Yes\"",
        "num_ids": 5516,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    \n    return total\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 3693,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def words_in_sentence(sentence):\n    # create a list of all prime numbers up to 25 (the maximum possible word length)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n    # split the sentence into words\n    words = sentence.split()\n\n    # initialize an empty list to store the words with prime lengths\n    prime_words = []\n\n    # iterate through each word in the sentence\n    for word in words:\n        # check if the length of the word is a prime number\n        if len(word) in primes:\n            # add the word to the prime_words list\n            prime_words.append(word)\n\n    # join the prime_words list into a single string\n    result = \" \".join(prime_words)\n\n    return result\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 2425,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def simplify(x, n):\n    # Split the fractions into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the result of x * n\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    \n    # Check if the result is a whole number\n    if result_num % result_den == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 2983,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits. \n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \n    def sum_of_digits(num):\n        \"\"\"\n        Returns the sum of digits of a given number.\n        \"\"\"\n        return sum(map(int, str(abs(num))))\n    \n    def key_func(num):\n        \"\"\"\n        Returns a tuple containing the sum of digits of a number and its index.\n        \"\"\"\n        return (sum_of_digits(num), num)\n    \n    return sorted(nums, key=key_func)\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 4503,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and isOdd(num):\n            count += 1\n    return count\n    \ndef isOdd(num):\n    # convert number to a string to get its digits\n    digits = str(num)\n    # check if first and last digits are odd\n    if int(digits[0]) % 2 == 1 and int(digits[-1]) % 2 == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 2585,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 2517,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n\n    if planet1_index < planet2_index:\n        return tuple(planets[planet1_index+1:planet2_index])\n    else:\n        return tuple(planets[planet2_index+1:planet1_index])",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 3311,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. The order of the list should be ascending by length of each word,\n    and you should return the list sorted by that rule. If two words have the same length,\n    sort the list alphabetically. The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length. For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # filter out words with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    # sort the list by length of the words and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst\n",
        "test": "assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]",
        "num_ids": 3529,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef x_or_y(n, x, y):\n    \"\"\"Return x if n is prime, y otherwise\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 2471,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\n    # Initialize sum of squares to 0\n    sum_of_squares = 0\n\n    # Iterate through the list\n    for num in lst:\n        # Check if the number is positive, odd and an integer\n        if num > 0 and num % 2 != 0 and isinstance(num, int):\n            # Add the square of the number to the sum\n            sum_of_squares += num ** 2\n\n    return sum_of_squares",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 3036,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing. \n    Your task is to determine if a person correctly guessed the results of a number of matches. \n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 3741,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class.\n    The strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = extensions[0]\n    strongest_strength = 0\n    for ext in extensions:\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_extension = ext\n            strongest_strength = strength\n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 5372,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cycpattern_check(a, b):\n    # Convert the strings to lowercase to ignore case\n    a = a.lower()\n    b = b.lower()\n\n    # Check if b is a substring in a or any of its rotations\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i + len(b)] == b or a[i:i + len(b)] == b[len(b) - len(a) - i:] + b[:len(b) - len(a) - i]:\n            return True\n    \n    # If we haven't found a match, return False\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 2538,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n    \n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num_str = str(abs(num))  # convert to string and take absolute value\n    even_count = 0\n    odd_count = 0\n    for digit in num_str:\n        if digit in '02468':  # even digits\n            even_count += 1\n        elif digit in '13579':  # odd digits\n            odd_count += 1\n    return even_count, odd_count\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 2569,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 38,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    roman_numeral = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n\n    return roman_numeral.lower()\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 4138,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the sum of the squares of the lengths of the three sides is equal to the square of the sum of the lengths of the sides\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 2612,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count or (count == max_count and word < max_word):\n            max_count = count\n            max_word = word\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 2278,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]\n",
        "test": "assert eat(1, 10, 10) == [11, 0]",
        "num_ids": 3764,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )  \n    Subtraction ( - )  \n    Multiplication ( * )  \n    Floor division ( // )  \n    Exponentiation ( ** )  \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Initialize the expression string with the first operand\n    expression = str(operand[0])\n\n    # Loop through the operator and operand list, and build the expression string\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n\n    # Evaluate the expression and return the result\n    return eval(expression)\n",
        "test": "assert do_algebra(['+'], [1, 2]) == 3, \"Expected 3, but got {}\".format(do_algebra(['+'], [1, 2]))",
        "num_ids": 4128,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def solve(s):\n    # Initialize variables to keep track of letter count and result string\n    letter_count = 0\n    result = ''\n    \n    # Iterate through the string\n    for i in range(len(s)):\n        # If the character is a letter, reverse its case\n        if s[i].isalpha():\n            letter_count += 1\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    \n    # If no letters were found, reverse the string\n    if letter_count == 0:\n        result = result[::-1]\n    \n    return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 2566,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if not text:\n        return None\n    else:\n        md5_hash = hashlib.md5(text.encode())\n        return md5_hash.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 2812,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    \n    # check if a is less than b\n    if a < b:\n        start = a\n        end = b\n    else:\n        start = b\n        end = a\n    \n    # initialize an empty list to store even digits\n    even_digits = []\n    \n    # loop through the range from start to end\n    for i in range(start, end+1):\n        # check if the digit is even\n        if i % 2 == 0:\n            # add the even digit to the list\n            even_digits.append(i)\n    \n    # return the list of even digits in ascending order\n    return sorted(even_digits)\n",
        "test": "assert generate_integers(1, 1) == []",
        "num_ids": 4119,
        "indeed": false
    }
]