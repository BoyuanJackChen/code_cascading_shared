[
    {
        "number": 0,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 1472,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses.\n    Your goal is to separate those groups into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    \"\"\"\n    # Remove all spaces from the input string\n    paren_string = ''.join(paren_string.split())\n    # Initialize the list to store the separate groups\n    groups = []\n    # Initialize a variable to keep track of the current group\n    group = ''\n    # Initialize a variable to keep track of the current parentheses depth\n    depth = 0\n    # Loop through the input string character by character\n    for char in paren_string:\n        if char == '(':\n            # If the character is an open parenthesis, increase the depth and add it to the current group\n            depth += 1\n            group += char\n        elif char == ')':\n            # If the character is a close parenthesis, decrease the depth and add it to the current group\n            depth -= 1\n            group += char\n            # If the depth is zero, the current group is complete. Add it to the list of groups and reset the group variable\n            if depth == 0:\n                groups.append(group)\n                group = ''\n    # Return the list of groups\n    return groups\n",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 2079,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    \n    # Converting the number to a string and splitting it at the decimal point\n    number_str = str(number)\n    decimal_str = number_str.split('.')[-1]\n    \n    # Converting the decimal part back to a float\n    decimal_part = float('.' + decimal_str)\n    \n    return decimal_part ",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset.\n\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    numbers_mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - numbers_mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 1614,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n\n    return result\n",
        "test": "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
        "num_ids": 1344,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n                if depth < 0:\n                    return \"Invalid parenthesis sequence\"\n            max_depth = max(max_depth, depth)\n        result.append(max_depth)\n    return result\n",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 1788,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    return [s for s in strings if substring in s]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n\n    :param numbers: List[int]\n    :return: Tuple[int, int]\n    \"\"\"\n    if not numbers:\n        return 0, 1\n\n    total_sum = 0\n    total_product = 1\n\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n\n    return total_sum, total_product\n\n\nif __name__ == \"__main__\":\n    print(sum_product([]))\n    print(sum_product([1, 2, 3, 4]))",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1455,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    max_so_far = numbers[0]\n    result = [max_so_far]\n\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n\n    return result\n",
        "test": "assert rolling_max([1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1]",
        "num_ids": 1633,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if not string:\n        return string\n\n    # Find the longest postfix of supplied string that is a palindrome\n    i = 1\n    while i <= len(string):\n        if is_palindrome(string[-i:]):\n            break\n        i += 1\n\n    # Reverse the string prefix that comes before the palindromic suffix\n    prefix = string[:-i][::-1]\n\n    # Append to the end of the string reverse of the prefix\n    return string + prefix\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1664,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "test": "assert string_xor('0000', '1111') == '1111'",
        "num_ids": 1513,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda s: len(s))\n",
        "test": "assert longest([]) == None",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    return [string[:i] for i in range(1, len(string)+1)]\n",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase and remove all whitespace characters\n    string = string.lower().replace(\" \", \"\")\n    # Create a set to keep track of the distinct characters\n    distinct_chars = set()\n    # Loop through each character in the string\n    for char in string:\n        # If the character is not already in the set, add it\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    # Return the length of the set, which represents the number of distinct characters\n    return len(distinct_chars) ",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 988,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last. \n    \n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n        else:\n            raise ValueError('Invalid note: ' + note)\n    return beats\n",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 3439,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string.\n    Count overlaping cases.\n    \"\"\"\n    count = 0\n    index = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 1085,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # create a list of numberals from smallest to largest\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    # split the input string into individual numberals\n    nums = numbers.split()\n    # sort the list of numberals using the index of the corresponding number in the numberals list\n    sorted_nums = sorted(nums, key=lambda x: numberals.index(x))\n    # return the sorted list as a space-delimited string\n    return ' '.join(sorted_nums)\n",
        "test": "assert sort_numbers('three one five') == 'one three five'",
        "num_ids": 1722,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Sort the list of numbers\n    numbers.sort()\n\n    # Initialize variables to hold the closest pair of numbers\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n\n    # Loop through the list of numbers starting from the second element\n    for i in range(1, len(numbers)-1):\n        # Calculate the absolute difference between the current number and the next number\n        diff = abs(numbers[i] - numbers[i+1])\n\n        # If the difference is smaller than the current minimum difference, update the closest pair and the minimum difference\n        if diff < min_diff:\n            closest_pair = (numbers[i], numbers[i+1])\n            min_diff = diff\n\n    # Return the closest pair of numbers in order (smaller number, larger number)\n    return closest_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 2476,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    smallest = min(numbers)\n    largest = max(numbers)\n    rescaled = [(x - smallest) / (largest - smallest) for x in numbers]\n    return rescaled\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0] ",
        "num_ids": 1925,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n    return filtered_values\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 954,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert factorize(1) == []",
        "num_ids": 1262,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1366,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    \n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1226,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 1306,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True ",
        "test": "assert is_prime(6) == False",
        "num_ids": 1033,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution. \n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # check if number of coefficients is even\n    if len(xs) % 2 == 1:\n        raise ValueError(\"number of coefficients should be even\")\n    \n    # get the largest non zero coefficient\n    max_coeff = max(xs)\n    \n    # find the sign of the polynomial at the origin\n    if poly(xs, 0) < 0:\n        sign = -1\n    elif poly(xs, 0) > 0:\n        sign = 1\n    else:\n        raise ValueError(\"polynomial has a zero at the origin\")\n    \n    # initialize variables\n    x_low = 0\n    x_high = max_coeff / (2 * xs[-1]) # use the triangle inequality\n    \n    # perform binary search for the zero\n    while x_high - x_low > 1e-6:\n        x_mid = (x_low + x_high) / 2\n        if sign == poly(xs, x_mid):\n            x_low = x_mid\n        else:\n            x_high = x_mid\n    \n    # return the zero\n    return x_low\n",
        "test": "assert find_zero([1, 2, 3, 4, 5, 6]) == 0.0",
        "num_ids": 1995,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_third(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    l_sorted = sorted(l[::3])\n    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(l_sorted.pop(0))\n        else:\n            result.append(l[i])\n    return result\n",
        "test": "assert sort_third([]) == []",
        "num_ids": 1669,
        "indeed": true
    },
    {
        "number": 34,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique(l: list):\n    \"\"\"\n    Return sorted unique elements in a list\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    if not l:\n        return None\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 835,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            while i > 0:\n                if i % 10 == 7:\n                    count += 1\n                i //= 10\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    \n    # Create a new list to hold the sorted even indicies\n    l_sorted = []\n    \n    # Iterate over the even indicies of the original list\n    for i in range(0, len(l), 2):\n        # Append the even values to the sorted list\n        l_sorted.append(l[i])\n    \n    # Sort the list of even values\n    l_sorted.sort()\n    \n    # Create a new list to hold the sorted and sorted even values\n    l_sorted_even = []\n    \n    # Iterate over the original list\n    for i in range(len(l)):\n        # If the index is even, append the corresponding sorted value\n        if i % 2 == 0:\n            l_sorted_even.append(l_sorted.pop(0))\n        # Otherwise, append the original value\n        else:\n            l_sorted_even.append(l[i])\n    \n    return l_sorted_even\n",
        "test": "assert sort_even([1, 3, 5, 7]) == [1, 3, 5, 7]",
        "num_ids": 1762,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[0:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"a\")) == \"a\"",
        "num_ids": 1554,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    i = 1\n    while count < n:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n        i += 1\n    return fib\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # create a set of the input list to remove duplicates\n    l_set = set(l)\n    # initialize a counter to keep track of how many triples sum to zero\n    count = 0\n    # loop through the set and check if the sum of any two elements equals the negative of the third\n    for i in l_set:\n        for j in l_set:\n            for k in l_set:\n                if i + j + k == 0:\n                    count += 1\n                    # if we have found three triples, we can stop looping\n                    if count == 3:\n                        return True\n    # if we have looped through all the pairs and haven't found three triples, return False\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 2043,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Initialize the number of collisions to zero\n    collisions = 0\n\n    # Iterate over all possible car positions\n    for i in range(n):\n        # Check if the cars at positions i and n-i-1 collide\n        if i < n // 2:\n            # If so, increment the number of collisions\n            collisions += 1\n\n    return collisions\n",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 1655,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1122,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def pairs_sum_to_zero(l):\n    if len(l) < 2:\n        return False\n    nums = set(l)\n    for num in nums:\n        if -num in nums and num != -num:\n            return True\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1636,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    while x > 0:\n        remainder = x % base\n        digits.append(remainder)\n        x = x // base\n    digits.reverse()\n    return ''.join(str(digit) for digit in digits)\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1296,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "test": "assert fib4(0) == 0",
        "num_ids": 1823,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        middle1 = sorted_list[length//2 - 1]\n        middle2 = sorted_list[length//2]\n        return (middle1 + middle2)/2\n    else:\n        return sorted_list[length//2] ",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 1266,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n//2, p) * modp(n//2, p) % p\n    else:\n        return (modp(n//2, p) * modp(n//2, p) * 2) % p\n",
        "test": "assert modp(0, 101) == 1",
        "num_ids": 1186,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Adds two numbers x and y and returns the sum.\n    \n    :param x: First number\n    :type x: int\n    :param y: Second number\n    :type y: int\n    :return: Sum of the two numbers\n    :rtype: int\n    \"\"\"\n    \n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert the strings to sets of characters\n    set0 = set(s0)\n    set1 = set(s1)\n    # Check if the sets have the same elements\n    return set0 == set1\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(10) == 55",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 880,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    \"\"\"\n    increasing = None\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n            continue\n        if increasing is None:\n            increasing = l[i] < l[i + 1]\n        elif increasing != (l[i] < l[i + 1]):\n            return False\n    return True",
        "test": "assert monotonic([1, 2, 4, 20]) == True, \"Error: monotonic([1, 2, 4, 20]) should return True\"",
        "num_ids": 1322,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1.intersection(set2)\n    return sorted(list(common_set))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 1100,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n    return n * (n + 1) // 2\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if not stack:\n        return True\n    else:\n        return False",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 1248,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24\n",
        "test": "assert fibfib(1) == 0",
        "num_ids": 1369,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def vowels_count(s):\n    \"\"\"\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        elif char.lower() == 'y' and s[-1].lower() == 'y':\n            count += 1\n\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 1191,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits,\n    return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # convert the integer to a string and get the length of the string\n    x_str = str(x)\n    n = len(x_str)\n\n    # if shift is greater than the length of the string, shift will wrap around\n    shift = shift % n\n\n    # circular shift the string by shifting right by shift and return the result\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[shift:] + x_str[:shift]\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # Split the input string into two parts: the number of apples and oranges\n    apples_oranges = s.split(\" and \")\n    apples = int(apples_oranges[0].split()[0])\n    oranges = int(apples_oranges[1].split()[0])\n\n    # Calculate the number of mango fruits in the basket\n    mango_fruits = n - apples - oranges\n\n    return mango_fruits",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 2030,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        1 <= nodes.length <= 10000\n        0 <= node.value\n    \"\"\"\n    \n    # If the array is empty, return an empty list\n    if not arr:\n        return []\n    \n    # Initialize variables for smallest even value and smallest index\n    smallest_even = None\n    smallest_index = None\n    \n    # Loop through the array and find the smallest even value and its index\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            if smallest_even is None or node < smallest_even:\n                smallest_even = node\n                smallest_index = i\n    \n    # If there is no smallest even value, return an empty list\n    if smallest_even is None:\n        return []\n    \n    # Return the smallest even value and its index in a list\n    return [smallest_even, smallest_index]\n",
        "test": "assert pluck([1, 2, 3]) == [2, 1]",
        "num_ids": 2412,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    max_freq = -1\n    max_num = -1\n    \n    for num, count in freq.items():\n        if num > 0 and count >= num and num > max_num:\n            max_num = num\n            max_freq = count\n    \n    if max_num == -1:\n        return -1\n    else:\n        return max_num\n",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 1348,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    for i in range(len(sorted_lst)//2):\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[-i-1])\n    if len(sorted_lst) % 2 != 0:\n        result.append(sorted_lst[len(sorted_lst)//2])\n    return result\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 1754,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.  \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side. \n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Calculate the semi-perimeter of the triangle\n    s = (a + b + c) / 2\n    \n    # Calculate the area of the triangle using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        return round(area, 2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00, \"triangle_area(3, 4, 5) should be 6.00\"",
        "num_ids": 1947,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def will_it_fly(q, w):\n    if not q:\n        return False\n\n    if len(q) == 1:\n        return q[0] <= w\n\n    if q[0] != q[-1]:\n        return False\n\n    return q[0] + sum(q[1:-1]) <= w",
        "test": "assert will_it_fly([1, 2], 5) == False # 1+2 is less than the maximum possible weight, but it's unbalanced.",
        "num_ids": 1281,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"\n\n    # Initialize variables\n    n = len(arr)\n    mid = n // 2\n    change_count = 0\n\n    # Check if the array is already palindromic\n    if arr == arr[::-1]:\n        return change_count\n\n    # Loop through the array and compare the elements at the beginning and end\n    for i in range(mid):\n        if arr[i] != arr[n - 1 - i]:\n            change_count += 1\n\n    # If there are an odd number of elements, we need to change one more\n    if n % 2 == 1:\n        change_count += 1\n\n    return change_count\n",
        "test": "assert smallest_change([1, 2, 3, 2, 1]) == 0",
        "num_ids": 1983,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    total_chars1 = sum(len(x) for x in lst1)\n    total_chars2 = sum(len(x) for x in lst2)\n\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1",
        "test": "assert total_match([], []) == []",
        "num_ids": 1412,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise. Knowing that (a) is less then 100.\n    \"\"\"\n    prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for i in prime:\n        while a % i == 0:\n            count += 1\n            a /= i\n        if count == 3:\n            return True\n        elif a == 1:\n            return False\n    return False\n",
        "test": "assert is_multiply_prime(9) == False",
        "num_ids": 1402,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, False otherwise.\n    \"\"\"\n    if x <= 0:\n        return False\n    power = 0\n    while x > 1:\n        if x % n == 0:\n            power += 1\n            x //= n\n        else:\n            break\n    return x == 1 and power > 0\n",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def iscube(a):\n    if a < 0:\n        a = -a\n    cube_root = int(round(a ** (1. / 3)))\n    return a == cube_root ** 3\n",
        "test": "assert iscube(1) == True",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    count = 0\n    for char in num:\n        if char in \"0123456789ABCDEF\":\n            decimal = int(char, 16)\n            if decimal == 2 or decimal == 3 or decimal == 5 or decimal == 7 or decimal == 11 or decimal == 13 or decimal == 17:\n                count += 1\n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 2266,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts decimal to binary format.\n    \"\"\"\n    binary = bin(decimal)[2:]  # Converts decimal to binary and removes '0b' prefix\n    return 'db' + binary + 'db'\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 1278,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_happy(s):\n    \"\"\"\n    Checks if a given string is happy.\n\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    \"\"\"\n\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True\n",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n                    GPA               |              Letter grade\n                       4.0                    A+\n                    > 3.7                    A \n                    > 3.3                    A- \n                    > 3.0                    B+\n                    > 2.7                    B \n                    > 2.3                    B-\n                    > 2.0                    C+\n                    > 1.7                    C\n                    > 1.3                    C-\n                    > 1.0                    D+ \n                    > 0.7                    D \n                    > 0.0                    D-\n                       0.0                    E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    def letter_grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [letter_grade(gpa) for gpa in grades]",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 3693,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_length(string):\n    \"\"\"Check if the length of a string is prime\"\"\"\n    length = len(string)\n    return is_prime(length)\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**n):\n        if i % 10 == 1 or i // (10**(n-1)) == 1:\n            count += 1\n    return count",
        "test": "assert starts_one_ends(5) == 40",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n        \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    \n    # Initialize sum as 0\n    sum = 0\n    \n    # Iterate through each digit in N and add its binary value to sum\n    while N > 0:\n        # Find the last digit of N\n        digit = N % 10\n        \n        # Add the binary value of the digit to sum\n        sum += bin(digit).count('1')\n        \n        # Remove the last digit of N\n        N = N // 10\n        \n    # Convert sum to binary and return it as a string\n    return bin(sum)[2:]\n",
        "test": "assert solve(0) == \"0\"",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n",
        "test": "assert add([4, 2, 6, 7]) == 2",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 1:\n            # Sort the characters in the word and join them back together\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n        else:\n            # If the word has only one character, just add it to the result\n            result.append(word)\n    # Join the words back together with spaces\n    return ' '.join(result)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 1033,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, which is similar to matrix,\n    however, unlike matrices, each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list, and return list of tuples,\n    [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns),\n    starting with 0. Sort coordinates initially by rows in ascending order. Also, sort\n    coordinates of the row by columns in descending order. \n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row([], 1) == []",
        "num_ids": 1921,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n    \n    # Check if the sum of first and last element is odd or even\n    if (array[0] + array[-1]) % 2 == 1:\n        # If odd, sort in ascending order\n        sorted_array = sorted(array)\n    else:\n        # If even, sort in descending order\n        sorted_array = sorted(array, reverse=True)\n        \n    return sorted_array\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 2277,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Define the alphabet and its length\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    n = len(alphabet)\n    \n    # Initialize an empty string to store the encrypted message\n    encrypted = ''\n    \n    # Loop through each character in the string\n    for char in s:\n        # If the character is in the alphabet, find its index and encrypt it\n        if char in alphabet:\n            index = alphabet.index(char)\n            encrypted += alphabet[(index + 2*n) % n]\n        # If the character is not in the alphabet, add it to the encrypted message as is\n        else:\n            encrypted += char\n    \n    # Return the encrypted message\n    return encrypted\n",
        "test": "assert encrypt('et') == 'ix'",
        "num_ids": 1618,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list.\n    Returns None if there is no such element.\n    \"\"\"\n    # remove duplicates and sort the list\n    lst = sorted(set(lst))\n    # check if there are at least 2 elements\n    if len(lst) < 2:\n        return None\n    # return the 2nd smallest element\n    return lst[1]\n",
        "test": "assert next_smallest([]) == None",
        "num_ids": 1287,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_bored(S):\n    boredom_count = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0].lower() == 'i':\n            boredom_count += 1\n    return boredom_count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1255,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two,\n    and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n    \n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    \n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert any_int(3, 2, 2) == False, \"Test case 2 failed\"",
        "num_ids": 1269,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    \n    for char in message:\n        if char in vowels:\n            index = (vowels.index(char) + 2) % 10\n            encoded_char = vowels[index]\n        else:\n            encoded_char = char\n        \n        if char.islower():\n            encoded_char = encoded_char.lower()\n        elif char.isupper():\n            encoded_char = encoded_char.upper()\n        \n        encoded_message += encoded_char\n        \n    return encoded_message\n",
        "test": "assert encode('') == ''",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    max_prime = 0\n    for num in lst:\n        if num > max_prime and is_prime(num):\n            max_prime = num\n    if max_prime == 0:\n        return None\n    else:\n        return sum(int(digit) for digit in str(max_prime))\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 2626,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    \n    lower_case = True\n    upper_case = True\n    \n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        \n        if lower_case and not key.islower():\n            lower_case = False\n        \n        if upper_case and not key.isupper():\n            upper_case = False\n        \n        if not lower_case and not upper_case:\n            return False\n        \n    return True\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1929,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    result = []\n    for i in range(2, n):\n        if is_prime(i):\n            result.append(i)\n    return result\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 1735,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Takes two integers and returns the product of their unit digits.\n    \"\"\"\n    # Get the last digit of each number\n    a_unit = a % 10\n    b_unit = b % 10\n\n    # Return the product of their unit digits\n    return a_unit * b_unit\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper('aBCdEf') == 1",
        "num_ids": 970,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    value = float(value)\n    if value >= 0:\n        if value - int(value) < 0.5:\n            return int(value)\n        else:\n            return int(value) + 1\n    else:\n        if value - int(value) > -0.5:\n            return int(value)\n        else:\n            return int(value) - 1\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1660,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n            - the next odd number if n is odd.\n            - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    # Initialize a list to store the number of stones in each level\n    pile = []\n\n    # If n is odd, add n to the list and set the next number to be an odd number\n    if n % 2 == 1:\n        pile.append(n)\n        next_num = n + 2\n    # If n is even, add n to the list and set the next number to be an even number\n    else:\n        pile.append(n)\n        next_num = n + 1\n\n    # Loop through each level and add the appropriate number of stones to the pile\n    for i in range(n-1):\n        # If the current number is odd, add the next odd number to the pile and update next_num\n        if next_num % 2 == 1:\n            pile.append(next_num)\n            next_num += 2\n        # If the current number is even, add the next even number to the pile and update next_num\n        else:\n            pile.append(next_num)\n            next_num += 1\n\n    # Return the pile of stones\n    return pile\n",
        "test": "assert make_a_pile(3) == [3, 5, 7]",
        "num_ids": 2004,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # using split() function to split the string into words\n    words = s.split(',')\n    # if there are no commas then use spaces to split the string\n    if len(words) == 1:\n        words = s.split()\n    return words\n",
        "test": "assert words_string(\"Hello\") == [\"Hello\"]",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # Find the smallest even number in the range [x, y]\n    even_x = x if x % 2 == 0 else x + 1\n    even_y = y if y % 2 == 0 else y - 1\n    \n    # If there's no such even number, return -1\n    if even_x > even_y:\n        return -1\n    \n    # Find the biggest even number in the range [x, y]\n    return even_y\n",
        "test": "assert choose_num(1, 1) == -1",
        "num_ids": 1370,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary. \n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    # Check if n is greater than m\n    if n > m:\n        return -1\n\n    # Calculate the average and round it to the nearest integer\n    avg = round((n + m) / 2)\n\n    # Convert the average to binary\n    binary = bin(avg)[2:]\n\n    return \"0b\" + binary\n",
        "test": "assert rounded_avg(1, 5) == \"0b11\"",
        "num_ids": 1099,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    result = []\n    for num in x:\n        if not any(int(d) % 2 == 0 for d in str(num)):\n            result.append(num)\n    return sorted(result)\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1563,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive, \n    reverse the resulting array, and then replace each digit by its corresponding name from \n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    \n                  -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n                  -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n    \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55]  \n                  -> sort arr -> [-1, 1, 55]\n                  -> reverse arr -> [55, 1, -1]\n    return = ['One']\n    \"\"\"\n    # Initialize a dictionary to store the digit-name mapping\n    digit_dict = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    \n    # Filter out the integers between 1 and 9 inclusive and sort them\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    \n    # Reverse the filtered array\n    filtered_arr.reverse()\n    \n    # Replace each digit with its corresponding name in the dictionary\n    result = [digit_dict[num] for num in filtered_arr]\n    \n    return result\n",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
        "num_ids": 2560,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_of_numbers = 0\n            for j in range(1, i+1):\n                sum_of_numbers += j\n            result.append(sum_of_numbers)\n    return result\n",
        "test": "assert f(0) == []",
        "num_ids": 1058,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 1831,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            # Negative numbers have a negative first digit\n            num = -num\n        digits_sum = sum(int(digit) for digit in str(num))\n        if digits_sum > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0, \"Error: count_nums([]) should return 0\"",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def move_one_ball(arr):\n    if not arr:\n        return True\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] != i+1:\n            return False\n    return True\n",
        "test": "assert move_one_ball([]) == True",
        "num_ids": 2228,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def exchange(lst1, lst2):\n    for num in lst1:\n        if num % 2 == 1:\n            for i in range(len(lst2)):\n                if lst2[i] % 2 == 0:\n                    lst1[lst1.index(num)] = lst2[i]\n                    lst2[i] = num\n                    break\n            else:\n                return \"NO\"\n    return \"YES\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
        "num_ids": 2360,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def histogram(test):\n    if not test:\n        return {}\n    \n    words = test.split()\n    counts = {}\n    max_count = 0\n    max_chars = set()\n    \n    for word in words:\n        if word not in counts:\n            counts[word] = 0\n        counts[word] += 1\n        if counts[word] > max_count:\n            max_count = counts[word]\n            max_chars = {word}\n        elif counts[word] == max_count:\n            max_chars.add(word)\n    \n    return {char: counts[char] for char in max_chars}\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 2165,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Removing the characters from s that are in c\n    s = ''.join([x for x in s if x not in c])\n    \n    # Checking if the result string is palindrome\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 1338,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    ['the number of odd elements 4 in the string 4 of the input.']\n    >>> odd_count(['3',\"11111111\"])\n    ['the number of odd elements 1 in the string 1 of the input.',\n     'the number of odd elements 8 in the string 8 of the input.']\n    \"\"\"\n    result = []\n    for i, num in enumerate(lst):\n        odd_count = 0\n        for digit in num:\n            if int(digit) % 2 != 0:\n                odd_count += 1\n        result.append(f\"the number of odd elements {odd_count} in the string {i+1} of the input.\")\n    return result",
        "test": "assert odd_count(['2', '4']) == [\"the number of odd elements 0 in the string 1 of the input.\", \"the number of odd elements 0 in the string 2 of the input.\"]",
        "num_ids": 1954,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n",
        "test": "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1429,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well, \n    and each 1 in a row represents a single unit of water. \n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity. \n    Your task is to use the buckets to empty the wells. \n    Output the number of times you need to lower the buckets. \n\n    Example 1: \n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2: \n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3: \n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints: \n        * all wells have the same length \n        * 1 <= grid.length <= 10^2 \n        * 1 <= grid[:,1].length <= 10^2 \n        * grid[i][j] -> 0 | 1 \n        * 1 <= capacity <= 10 \n    \"\"\"\n    count = 0\n    for row in grid:\n        count += sum(row)\n    return math.ceil(count / capacity)\n",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0, \"Example 3 failed\" ",
        "num_ids": 3456,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "test": "assert sort_array([1, 1, 2, 2, 3, 3]) == [1, 1, 2, 2, 3, 3]",
        "num_ids": 1436,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def select_words(s, n):\n    # Split the string into words\n    words = s.split()\n    # Initialize an empty list to store the selected words\n    selected_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        num_consonants = sum([1 for char in word if char.lower() not in \"aeiou\"])\n        # If the number of consonants is equal to n, add the word to the list\n        if num_consonants == n:\n            selected_words.append(word)\n    return selected_words\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = \"AEIOUaeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return len(stack) == 0\n\n    s = ''.join(lst)\n    return 'Yes' if is_balanced(s) else 'No'\n",
        "test": "assert match_parens(['()', ')']) == 'No'",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    arr = arr[-k:]\n    return arr\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1906,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # Initialize an empty list to store the odd elements in even positions\n    odd_elements_in_even_positions = []\n    \n    # Iterate through the list\n    for i in range(len(lst)):\n        \n        # If the element is odd and in an even position, add it to the list\n        if lst[i] % 2 != 0 and i % 2 == 0:\n            odd_elements_in_even_positions.append(lst[i])\n    \n    # Return the sum of the odd elements in even positions\n    return sum(odd_elements_in_even_positions)\n",
        "test": "assert solution([]) == 0",
        "num_ids": 1386,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # initialize sum variable\n    sum = 0\n\n    # loop through the first k elements of the array\n    for i in range(k):\n        # check if the element has at most two digits\n        if abs(arr[i]) < 100:\n            # add the element to the sum\n            sum += arr[i]\n\n    return sum\n",
        "test": "assert add_elements([123456789], 1) == 0",
        "num_ids": 1556,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def collatz(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return 3 * n + 1\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_list = [n]\n    while n != 1:\n        n = collatz(n)\n        collatz_list.append(n)\n    \n    odd_numbers = [num for num in collatz_list if num % 2 != 0]\n    return sorted(odd_numbers)\n",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 4132,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def valid_date(date):\n    \"\"\"\n    This function validates a given date string and returns True if the date is valid\n    otherwise False. The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n\n    # Check if the date string is empty or not\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    # Check if the number of days is valid for the given month and year\n    if month in [1,3,5,7,8,10,12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4,6,9,11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    return True\n",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 2434,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for letter in txt:\n            if 'a' <= letter <= 'z':\n                order = ord(letter) - ord('a')\n                if order % 2 == 1:\n                    count += 1\n        return count\n",
        "test": "assert split_words(\"abcdef\") == 3 ",
        "num_ids": 1057,
        "indeed": true
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    prev = None\n    seen_duplicate = False\n\n    for num in lst:\n        if prev is not None and num < prev:\n            return False\n        if num == prev:\n            seen_duplicate = True\n        prev = num\n\n    return not seen_duplicate",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 2192,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Returns \"YES\" if the length of the intersection of the given intervals is a prime number, otherwise returns \"NO\".\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Check if the intervals intersect\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    # Calculate the intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length of the intersection is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((-3, -1), (-5, 5)) == \"YES\"",
        "num_ids": 1631,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0. \n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n\n    magnitudes = [abs(num) for num in arr]\n    sign_product = 1\n\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n\n    result = sum(magnitudes) * sign_product\n    return result\n",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 1326,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def neighbors(cell):\n        x, y = cell\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid):\n                yield (nx, ny)\n\n    def dfs(cell, visited, path, k):\n        if len(path) == k:\n            return path\n        x, y = cell\n        for nx, ny in neighbors(cell):\n            if (nx, ny) not in visited and grid[nx][ny] not in path:\n                visited.add((nx, ny))\n                path.append(grid[nx][ny])\n                if dfs((nx, ny), visited, path, k):\n                    return path\n                path.pop()\n                visited.remove((nx, ny))\n        return None\n\n    min_path = None\n    for i in range(len(grid)):\n        for j in range(len(grid)):\n            visited = set([(i, j)])\n            path = [grid[i][j]]\n            min_path_candidate = dfs((i, j), visited, path, k)\n            if min_path_candidate is not None and (min_path is None or min_path_candidate < min_path):\n                min_path = min_path_candidate\n    return min_path",
        "test": "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 1) == [1]",
        "num_ids": 4932,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        trib_seq = [1, 3, 2, 8]\n        for i in range(4, n+1):\n            if i % 2 == 0:\n                trib_seq.append(1 + i/2)\n            else:\n                trib_seq.append(trib_seq[i-1] + trib_seq[i-2] + trib_seq[i+1])\n        return trib_seq\n",
        "test": "assert tri(2) == [1, 3, 2]",
        "num_ids": 1931,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    all_even = True\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            all_even = False\n            product *= digit\n        n //= 10\n    if all_even:\n        return 0\n    else:\n        return product\n",
        "test": "assert digits(1) == 1",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_nested(string):\n    stack = []\n    nested = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n        if len(stack) >= 2:\n            nested = True\n\n    return nested",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum([math.ceil(x)**2 for x in lst])\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 1462,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if not txt: # empty string\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return True\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1\n",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 1039,
        "indeed": true
    },
    {
        "number": 136,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. If there is no negative or positive integers,\n    return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return largest_negative, smallest_positive\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 1845,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Convert the input variables to float if they are numbers represented as strings\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the input variables and return the larger one in its original type\n    if a > b:\n        if isinstance(a, str):\n            return a\n        else:\n            return float(a)\n    elif b > a:\n        if isinstance(b, str):\n            return b\n        else:\n            return float(b)\n    else:\n        return None\n",
        "test": "assert compare_one(\"1\", 1) == None",
        "num_ids": 1514,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 != 0 or n < 8:  # n must be even and greater than or equal to 8\n        return False\n    \n    for i in range(2, int(n/2)+1):\n        if n - 2*i in [2*j for j in range(2, int((n-2*i)/2)+1)]:  # check if n can be written as the sum of 4 positive even numbers\n            return True\n    \n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 1273,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    return text.replace(\"  \", \"-\")\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if the file name contains more than 3 digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Check if the substring before the dot is not empty and starts with a letter\n    prefix, extension = file_name.split('.')\n    if not prefix or not (prefix[0].isalpha() and (prefix[0].isupper() or prefix[0].islower())):\n        return 'No'\n\n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'",
        "test": "assert file_name_check(\"example.txt\") == \"Yes\"",
        "num_ids": 2654,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1675,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format, \n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    \n    # Extract numerator and denominator of x and n\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    \n    # Multiply numerator and denominator of x and n\n    num = int(x_num) * int(n_num)\n    den = int(x_den) * int(n_den)\n    \n    # Simplify the fraction\n    gcd = gcd_euclid(num, den)\n    simplified_num = num // gcd\n    simplified_den = den // gcd\n    \n    # Check if simplified fraction is an integer\n    if simplified_num % simplified_den == 0:\n        return True\n    else:\n        return False\n    \n    \ndef gcd_euclid(a, b):\n    \"\"\"Helper function to calculate the greatest common divisor of two numbers using the Euclid algorithm.\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 2157,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Create a list to store the digits of each number\n    digits_list = []\n\n    # Loop through each number in the input list\n    for num in nums:\n        # Find the sum of digits of the number\n        sum_of_digits = 0\n        for digit in str(abs(num)):\n            sum_of_digits += int(digit)\n        \n        # Append the sum of digits and the original index to the digits_list\n        digits_list.append((sum_of_digits, nums.index(num)))\n    \n    # Sort the digits_list based on the sum of digits\n    digits_list.sort()\n    \n    # Create a list to store the final output\n    result = []\n    \n    # Loop through each item in the digits_list and add the original number at that index to the result list\n    for item in digits_list:\n        result.append(nums[item[1]])\n    \n    return result\n",
        "test": "assert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2404,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 != 0 and num // 10 % 2 != 0:\n            count += 1\n    return count",
        "test": "assert specialFilter([10, 20, 30, 40, 50]) == 0",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_max_triples(n):\n    a = []\n    for i in range(1, n+1):\n        a.append(i*i - i + 1)\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 1381,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def bf(planet1, planet2):\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 < index2:\n        result = planets[index1+1:index2]\n    else:\n        result = planets[index2+1:index1]\n    \n    return tuple(result)\n",
        "test": "assert bf(\"Sun\", \"Mars\") == ()",
        "num_ids": 1346,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. \n    The order of the list should be ascending by length of each word, and you \n    should return the list sorted by that rule. \n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # remove strings with odd length from the list\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1985,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Function to check if a number is prime or not\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Function to return x if n is prime and y otherwise\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 1146,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    \n    sum_of_squares = 0\n    \n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 == 1:\n            sum_of_squares += num**2\n    \n    return sum_of_squares\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 1368,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 2119,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class.\n    The strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # initialize a variable to keep track of the strongest extension and its strength\n    strongest_extension = ''\n    strongest_strength = float('-inf')\n    \n    # iterate over all extensions\n    for extension in extensions:\n        # calculate the strength of the extension\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        \n        # if the strength is greater than the current strongest strength, update the strongest extension\n        if strength > strongest_strength:\n            strongest_extension = class_name + '.' + extension\n            strongest_strength = strength\n    \n    return strongest_extension\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 2532,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    if b in a:\n        return True\n    for i in range(1, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\", \"abd\") == False",
        "num_ids": 1099,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    # Convert negative numbers to positive to handle even/odd count\n    if num < 0:\n        num = abs(num)\n    \n    # Loop through each digit in the number\n    for digit in str(num):\n        # Check if digit is even or odd\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1349,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Dictionary for roman numerals\n    roman_dict = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    # Initialize result string\n    result = ''\n\n    # Iterate through the keys of the dictionary in descending order\n    for key in sorted(roman_dict.keys(), reverse=True):\n        # Calculate the number of times the current key can be subtracted from the number\n        count = number // key\n        # If the count is greater than zero, add the corresponding roman numeral to the result\n        if count > 0:\n            result += roman_dict[key] * count\n            # Subtract the value of the current key from the number\n            number -= key * count\n\n    return result.lower()\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 2342,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # if any two sides are equal, then the third side is also equal\n    if a == b or b == c or c == a:\n        return False\n    \n    # Pythagorean theorem: a^2 + b^2 = c^2\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(1, 2, 3) == False, \"Error: right_angle_triangle(1, 2, 3) should return False\"",
        "num_ids": 1522,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings. \n    The list contains different words. Return the word with maximum number \n    of unique characters. If multiple strings have maximum number of unique \n    characters, return the one which comes first in lexicographical order. \n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n    max_word = \"\"\n    max_count = 0\n\n    for word in words:\n        unique_chars = set(word)\n        count = len(unique_chars)\n        if count > max_count or (count == max_count and word < max_word):\n            max_word = word\n            max_count = count\n\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1086,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots, \n    but now you need to eat more carrots to complete the day's meals. \n    you should return an array of [ total number of eaten carrots after your meals, \n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n",
        "test": "assert eat(2, 11, 5) == [7, 0] ",
        "num_ids": 1798,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Initialize an empty string to store the expression\n    expr = \"\"\n\n    # Loop through the operands and operators\n    for i in range(len(operand)):\n        # Add the operand to the expression\n        expr += str(operand[i])\n        # If this is not the last operand, add the operator\n        if i < len(operand) - 1:\n            expr += operator[i]\n\n    # Evaluate the expression and return the result\n    return eval(expr)",
        "test": "assert do_algebra(['+'], [1, 2]) == 3",
        "num_ids": 2022,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solve(s):\n    has_letter = False\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        result = s[::-1]\n    return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 876,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 3276,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return sorted(even_digits)\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1961,
        "indeed": false
    }
]