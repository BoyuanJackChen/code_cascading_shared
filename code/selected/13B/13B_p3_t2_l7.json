[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses.\n    Your goal is to separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    \n    # Remove any spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize a list to store the separate groups\n    groups = []\n    \n    # Initialize a variable to keep track of the current group being built\n    current_group = \"\"\n    \n    # Initialize a counter to keep track of the current depth level\n    depth = 0\n    \n    # Iterate through each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increase the depth counter and add the character to the current group\n        if char == \"(\":\n            depth += 1\n            current_group += char\n        # If the character is a closing parenthesis, decrease the depth counter and add the character to the current group\n        elif char == \")\":\n            depth -= 1\n            current_group += char\n            # If the depth counter reaches 0, it means we've found the end of a group\n            if depth == 0:\n                # Add the current group to the list of groups\n                groups.append(current_group)\n                # Reset the current group variable to an empty string\n                current_group = \"\"\n        \n    # Return the list of groups\n    return groups\n",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 1460,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5 # test case 1",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute differences between each element and the mean\n    absolute_differences = [abs(x - mean) for x in numbers]\n\n    # Calculate the mean absolute deviation\n    mean_absolute_deviation = sum(absolute_differences) / len(numbers)\n\n    return mean_absolute_deviation\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n    return result ",
        "test": "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses\n    separated by spaces. For each of the group, output the deepest level of nesting of\n    parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n            max_depth = max(max_depth, depth)\n        result.append(max_depth)\n    return result\n",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 822,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [string for string in strings if substring in string]",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:  # empty list\n        return 0, 1\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n        \n    return sum_result, product_result\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far = numbers[0]\n    max_list = [max_so_far]\n    \n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        max_list.append(max_so_far)\n    \n    return max_list\n",
        "test": "assert rolling_max([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n\n    return longest_str\n",
        "test": "assert longest([]) == None",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert all_prefixes('') == []",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    return \" \".join([str(i) for i in range(n+1)])\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # create a set to store distinct characters\n    distinct_chars = set()\n    # loop through each character in the string\n    for char in string:\n        # convert the character to lowercase and add it to the set of distinct characters\n        distinct_chars.add(char.lower())\n    # return the number of distinct characters\n    return len(distinct_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    result = []\n    for note in music_string.split():\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n        else:\n            raise ValueError(\"Invalid note: {}\".format(note))\n    return result",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1966,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    count = 0\n    index = 0\n\n    while index < len(string):\n        if string[index:index+len(substring)] == substring:\n            count += 1\n            index += len(substring)\n        else:\n            index += 1\n\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # split the string into a list of numbers\n    num_list = numbers.split()\n\n    # create a dictionary of number-to-numberal mapping\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    # sort the list of numbers based on their values\n    num_list.sort(key=lambda x: num_dict[x])\n\n    # return the sorted list of numbers as a string\n    return ' '.join(num_list) ",
        "test": "assert sort_numbers(\"one three five zero\") == \"zero one three five\"",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    closest_pair = (0, 0)\n    min_distance = float('inf')\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n    \n    return closest_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list, \n    such that the smallest number will become 0 and the largest will become 1\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    \n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    \n    min_num = min(numbers)\n    max_num = max(numbers)\n    diff = max_num - min_num\n    \n    rescaled_numbers = []\n    \n    for num in numbers:\n        rescaled_numbers.append((num - min_num) / diff)\n        \n    return rescaled_numbers\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 949,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 197,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # n is a prime number and has no divisors larger than 1\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n",
        "test": "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 2, 3, 4]",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    \n    # If the input list is empty, return an empty string\n    if not strings:\n        return ''\n    \n    # Initialize an empty string to store the concatenated result\n    concatenated = ''\n    \n    # Loop through the input list and concatenate each string to the result string\n    for s in strings:\n        concatenated += s\n    \n    # Return the concatenated result\n    return concatenated\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n\n    :param strings: The input list of strings\n    :param prefix: The prefix to filter for\n    :return: A list of strings that start with the given prefix\n    \"\"\"\n\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    # Base cases\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n\n    # Check if n is divisible by any number from 2 to sqrt(n)\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.  \n    \"\"\"\n    # Check if the number of coefficients is even and non-zero\n    if len(xs) % 2 != 0 or len(xs) == 0:\n        raise ValueError(\"xs must have even number of coefficients and non-zero.\")\n    \n    # Find the largest non-zero coefficient\n    non_zero_coeff = max(abs(coeff) for coeff in xs if coeff != 0)\n    \n    # Find the starting point for bisection algorithm\n    start = 0 if xs[0] >= 0 else -1\n    \n    # Bisection algorithm\n    while abs(start - xs[0]) > 1e-10:\n        mid = (start + xs[0]) / 2\n        if poly(xs, mid) == 0:\n            start = mid\n        elif poly(xs, mid) * poly(xs, start) < 0:\n            xs[0] = mid\n        else:\n            start = mid\n    \n    return start\n",
        "test": "assert find_zero([-6, 11, -6, 1]) == round(1.0, 2)",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # create a list to hold the sorted values\n    sorted_values = []\n    # iterate over the values in l that are divisible by three\n    for i in range(0, len(l), 3):\n        # add the value to the sorted values list\n        sorted_values.append(l[i])\n    # sort the sorted values list\n    sorted_values.sort()\n    # create a new list to hold the sorted third values\n    sorted_third = []\n    # iterate over the values in l and add the appropriate values to the sorted third list\n    for i in range(len(l)):\n        if i % 3 == 0:\n            sorted_third.append(sorted_values[i//3])\n        else:\n            sorted_third.append(l[i])\n    # return the sorted third list\n    return sorted_third\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for digit in str(i):\n                if digit == '7':\n                    count += 1\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Make a copy of the list to avoid modifying the original list\n    l = l.copy()\n    # Create a list to store the sorted even values\n    sorted_even = []\n    # Iterate through the even indicies of the list\n    for i in range(0, len(l), 2):\n        # Append the value at the even index to the sorted_even list\n        sorted_even.append(l[i])\n    # Sort the sorted_even list\n    sorted_even.sort()\n    # Iterate through the sorted_even list and insert its values into the original list at the even indicies\n    for i in range(len(sorted_even)):\n        l[i*2] = sorted_even[i]\n    return l\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n        i += 1\n    return fibonacci(i - 1)\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    # If the list has less than 3 elements, return False\n    if len(l) < 3:\n        return False\n    \n    # Create a dictionary to store the count of each element\n    element_count = {}\n    \n    # Loop through the list and count the occurrences of each element\n    for element in l:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Loop through the dictionary and check if there are three elements that sum to zero\n    for i in element_count:\n        for j in element_count:\n            if i != j:\n                if -i-j in element_count:\n                    return True\n    \n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1145,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # initialize collision counter to 0\n    collisions = 0\n\n    # loop through each pair of cars\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue  # skip cars that are the same\n            elif (i < j) and (j < 2*i):\n                continue  # skip cars that are not on opposite sides\n            else:\n                collisions += 1  # add a collision\n\n    return collisions\n",
        "test": "assert car_race_collision(1) == 0",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base > 10:\n        raise ValueError(\"Base numbers must be less than 10.\")\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(5, 3) == 7.5 ",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fib4(n: int):\n    \"\"\"\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n            a = b\n            b = c\n            c = d\n            d = e\n        return d\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        median1 = sorted_list[n//2]\n        median2 = sorted_list[n//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = sorted_list[n//2]\n    return median\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (2 * modp(n-1, p)) % p\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 50,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_vowels(text):\n    vowels = set('aeiouAEIOU')\n    return ''.join([c for c in text if c not in vowels])\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y\n\n    :param x: an integer\n    :param y: an integer\n    :return: the sum of x and y\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    set0 = set(s0)\n    set1 = set(s1)\n    \n    if len(set0) != len(set1):\n        return False\n    \n    for char in set0:\n        if char not in set1:\n            return False\n    \n    return True\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "test": "assert fib(10) == 55",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"<\") == False, \"Incorrect bracketing\"",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    \n    increasing = l[1] > l[0]\n    \n    for i in range(1, len(l)):\n        if increasing and l[i] < l[i-1]:\n            return False\n        elif not increasing and l[i] > l[i-1]:\n            return False\n        \n    return True\n",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common(l1, l2):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Create sets from the lists to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1.intersection(set2)\n    # Convert the set back to a list and sort it\n    common_list = sorted(list(common_set))\n    return common_list\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 322,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_to_n(n: int):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all numbers from 1 to n.\n    \"\"\"\n    # Initialize the sum variable to 0\n    total_sum = 0\n\n    # Loop from 1 to n and add each number to the sum\n    for i in range(1, n+1):\n        total_sum += i\n\n    # Return the final sum\n    return total_sum\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    # Initialize an empty list to store the derivative coefficients\n    deriv = []\n    \n    # Iterate over the coefficients, starting from the highest degree\n    for i in range(1, len(xs)):\n        # Multiply each coefficient by its degree and append it to the derivative list\n        deriv.append(i * xs[i])\n    \n    # Return the derivative list\n    return deriv\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(1) == 0",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouy\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    \n    # Convert the integer to a string to get its digits\n    digits = str(x)\n    \n    # If shift is greater than the number of digits, reverse the digits instead\n    if shift > len(digits):\n        return digits[::-1]\n    \n    # Otherwise, circular shift the digits by shifting them right by shift\n    shifted = digits[-shift:] + digits[:-shift]\n    \n    return shifted\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    \n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Initialize variables to hold the number of apples and oranges\n    apples = 0\n    oranges = 0\n    \n    # Loop through the words list and check if each word is \"apples\" or \"oranges\"\n    for i in range(len(words)):\n        if words[i] == \"apples\":\n            # If the word is \"apples\", convert the previous word to an integer and add it to the apples variable\n            apples += int(words[i-1])\n        elif words[i] == \"oranges\":\n            # If the word is \"oranges\", convert the previous word to an integer and add it to the oranges variable\n            oranges += int(words[i-1])\n    \n    # Calculate the number of mango fruits in the basket\n    mango_fruits = n - apples - oranges\n    \n    return mango_fruits\n",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 1282,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it. \n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                         so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        1 <= nodes.length <= 10000\n        0 <= node.value\n    \"\"\"\n\n    if len(arr) == 0:\n        return []\n    \n    min_even_value = None\n    min_even_index = None\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if min_even_value is None or arr[i] < min_even_value:\n                min_even_value = arr[i]\n                min_even_index = i\n\n    if min_even_index is None:\n        return []\n\n    return [min_even_value, min_even_index]\n",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 1239,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num > 0:\n            freq[num] = freq.get(num, 0) + 1\n    \n    for num in sorted(freq, reverse=True):\n        if num <= freq[num]:\n            return num\n    \n    return -1\n",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def strange_sort_list(lst):\n    if not lst:  # if list is empty, return empty list\n        return []\n    elif len(lst) == 1:  # if list has only one element, return the element\n        return lst\n    else:  # else, do the strange sorting\n        result = []  # initialize empty list to store the result\n        while lst:  # loop until the list is empty\n            result.append(min(lst))  # add minimum value to the result list\n            lst.remove(min(lst))  # remove minimum value from the list\n            if lst:  # if list is not empty, add maximum value to the result list\n                result.append(max(lst))\n                lst.remove(max(lst))  # remove maximum value from the list\n        return result\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3], \"Test 1 failed\"",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.  \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00, \"Test case failed for sides 3, 4, 5\"",
        "num_ids": 826,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    \n    # Check if the list is balanced\n    if q == q[::-1]:\n        # Check if the sum of the elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    count = 0\n    i, j = 0, n-1\n    while i < j:\n        if arr[i] != arr[j]:\n            count += 1\n            if j < n-1 and arr[i] == arr[j+1]:\n                j += 1\n            elif i > 0 and arr[i-1] == arr[j]:\n                i -= 1\n        i += 1\n        j -= 1\n    return count\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4, \"Incorrect output for smallest_change([1,2,3,5,4,7,9,6])\"",
        "num_ids": 1067,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    # Calculate total number of chars in each list\n    total_chars1 = sum(len(word) for word in lst1)\n    total_chars2 = sum(len(word) for word in lst2)\n\n    # Return the first list if the two lists have the same number of chars\n    if total_chars1 == total_chars2:\n        return lst1\n\n    # Return the list with total number of chars less than the other list\n    if total_chars1 < total_chars2:\n        return lst1\n    else:\n        return lst2\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for p in primes:\n        if a % p == 0:\n            a /= p\n            while a % p == 0:\n                a /= p\n            if a == 1:\n                return True\n    return False\n",
        "test": "assert is_multiply_prime(15) == True",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Returns true if x is a simple power of n, false otherwise.\n    A number x is a simple power of n if n**int = x.\n    \"\"\"\n    if x == n:\n        return True\n    if x % n != 0:\n        return False\n    return is_simple_power(x//n, n)",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    \n    # Check if the number is a cube of some integer\n    for i in range(1, a+1):\n        if i**3 == a:\n            return True\n        elif i**3 > a:\n            break\n    \n    # If the number is not a cube of any integer, return False\n    return False\n",
        "test": "assert iscube(1) == True",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Count the number of hex digits that are primes\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            if is_prime(int(digit, 16)):\n                count += 1\n\n    return count",
        "test": "assert hex_key(\"1077E\") == 2",
        "num_ids": 967,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n    \n    There will be an extra couple of characters 'db' at the beginning and at the end of the string. \n    The extra characters are there to help with the format.\n    \n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Convert decimal to binary using built-in function\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the binary string\n    binary = 'db' + binary + 'db'\n    \n    # Return the binary string\n    return binary\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s)-2):\n        if s[i:i+3] in s[i+1:]:\n            return False\n    \n    return True\n",
        "test": "assert is_happy('') == False, \"is_happy('') should be False\"",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading. \n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n        \n           GPA       |    Letter grade\n          4.0            A+\n          > 3.7            A \n          > 3.3            A- \n          > 3.0            B+\n          > 2.7            B \n          > 2.3            B-\n          > 2.0            C+\n          > 1.7            C\n          > 1.3            C-\n          > 1.0            D+ \n          > 0.7            D \n          > 0.0            D-\n          0.0            E\n    \n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    \n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n            \n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 1872,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_length(string):\n    \"\"\"\n    Checks if the length of a string is a prime number.\n    \"\"\"\n    length = len(string)\n    return is_prime(length)\n",
        "test": "assert prime_length('Hello') == True, \"The length of 'Hello' should be prime\"",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(2) == 100",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    binary_sum = 0\n    while N > 0:\n        digit = N % 10\n        binary_sum += digit\n        N = N // 10\n    return bin(binary_sum)[2:]",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n",
        "test": "assert add([4, 2, 6, 7]) == 2 ",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def anti_shuffle(s):\n    # Split the string into words\n    words = s.split()\n\n    # Shuffle the characters in each word and join them into a new string\n    shuffled_words = [''.join(sorted(word)) for word in words]\n\n    # Join the shuffled words back into a string with spaces between them\n    return ' '.join(shuffled_words)",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, which is similar to matrix,\n    however, unlike matrices, each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order. Also,\n    sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
        "num_ids": 1436,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        sorted_array = sorted(array) if sum(array[0], array[-1]) % 2 == 1 else sorted(array, reverse=True)\n        return sorted_array\n",
        "test": "assert sort_array([]) == []",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # create a string of all the letters of the alphabet\n    # shifted down by two multiplied to two places\n    shifted_alphabet = ''.join(['z' if i == 'a' else chr(ord(i) - 2) for i in 'abcdefghijklmnopqrstuvwxyz'])\n    # create a dictionary to map each letter of the alphabet to its shifted version\n    alphabet_dict = {i: shifted_alphabet[index] for index, i in enumerate('abcdefghijklmnopqrstuvwxyz')}\n    # create an empty string to store the encrypted message\n    encrypted_message = ''\n    # iterate over each character in the input string and encrypt it using the dictionary\n    for char in s:\n        if char.isalpha():\n            encrypted_message += alphabet_dict[char.lower()]\n        else:\n            encrypted_message += char\n    # return the encrypted message\n    return encrypted_message\n",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop'",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    \n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            return lst[i]\n    \n    return None\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_bored(S):\n    # Initialize the count of boredoms\n    boredoms = 0\n    \n    # Split the string into sentences\n    sentences = S.split('.')\n    sentences.extend(S.split('!')[:-1])\n    sentences.extend(S.split('?')[:-1])\n    \n    # Loop through the sentences and count boredoms\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredoms += 1\n    \n    return boredoms\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two,\n    and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n    \n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    # check if all numbers are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    # check if one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    # return false if none of the conditions are met\n    return False\n",
        "test": "assert any_int(5, 2, 7) == True, \"Incorrect output for any_int(5, 2, 7)\"",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encode(message):\n    vowels = 'aeiou'\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr(((ord(char.lower()) - ord('a') + 2) % 5) + ord('a'))\n                encoded += new_char.upper() if char.isupper() else new_char.lower()\n            else:\n                encoded += char.upper() if char.isupper() else char.lower()\n        else:\n            encoded += char\n    return encoded\n",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    if max_prime == -1:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(max_prime))\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 1127,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    if not dict:\n        return False\n\n    all_lower_case = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper_case = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n\n    return all_lower_case or all_upper_case",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 924,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_up_to(n):\n    \"\"\"\n    Returns a list of the first n prime numbers that are less than n.\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            if len(primes) == n:\n                break\n    return primes\n",
        "test": "assert count_up_to(5) == [2,3]",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers and returns the product of their unit digits.\n    \"\"\"\n    # Get the last digit of each number\n    last_digit_a = a % 10\n    last_digit_b = b % 10\n    # Check if any of the last digits is 0\n    if last_digit_a == 0 or last_digit_b == 0:\n        return 0\n    else:\n        # Calculate the product of the unit digits\n        product = last_digit_a * last_digit_b\n        # Return the product\n        return product\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "assert count_upper('aBCdEf') == 1",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    try:\n        value = float(value)\n        if value.is_integer():\n            return int(value)\n        else:\n            rounded_value = round(value)\n            if abs(value - rounded_value) == abs(value - rounded_value + 1):\n                return int(rounded_value - 1)\n            else:\n                return int(rounded_value)\n    except ValueError:\n        return \"Invalid input\"\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(n-1):\n        if n % 2 == 0: # n is even\n            n = n + 2\n        else: # n is odd\n            n = n + 1\n        pile.append(n)\n    return pile\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string into words based on commas or spaces\n    words = s.split(\", \")\n    words = s.split()\n    \n    # Return the list of words\n    return words\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    \n    # Find the smallest even number in the range [x, y]\n    smallest_even = None\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            smallest_even = i\n            break\n    \n    if smallest_even is None:\n        return -1\n    \n    # Find the biggest even number in the range [x, y]\n    biggest_even = None\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            biggest_even = i\n            break\n    \n    return biggest_even\n",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    \n    avg = round(sum / (m-n+1))\n    \n    return bin(avg)\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 817,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    result = []\n    for num in x:\n        if not any(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n",
        "test": "assert unique_digits([152, 323, 1422, 10]) == []",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def by_length(arr):\n    # Sort the integers between 1 and 9 inclusive and reverse the array\n    sorted_arr = sorted([x for x in arr if 1 <= x <= 9])[::-1]\n\n    # Replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    result = [names[x-1] for x in sorted_arr]\n\n    return result\n",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
        "num_ids": 1011,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter, \n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise. i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_ = 0\n            for j in range(1, i+1):\n                sum_ += j\n            result.append(sum_)\n    return result\n",
        "test": "assert f(0) == []",
        "num_ids": 754,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = 0\n        negative = False\n        if num < 0:\n            negative = True\n            num = -num\n        for digit in str(num):\n            digit_sum += int(digit)\n        if negative:\n            digit_sum *= -1\n        if digit_sum > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n    \n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n    \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n                 \n    \"\"\"\n\n    # If the array is empty, return True\n    if not arr:\n        return True\n\n    # Sort the array in non-decreasing order\n    sorted_arr = sorted(arr)\n\n    # Check if the sorted array is the same as the given array\n    if arr == sorted_arr:\n        return True\n    else:\n        return False",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False, \"Test case 2 failed\"",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Check if all elements of lst1 are even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    else:\n        # Find the index of the first odd element in lst1\n        for i in range(len(lst1)):\n            if lst1[i] % 2 != 0:\n                break\n        else:\n            # If there is no odd element in lst1, return \"YES\"\n            return \"YES\"\n\n        # Find the index of the first even element in lst2\n        for j in range(len(lst2)):\n            if lst2[j] % 2 == 0:\n                break\n        else:\n            # If there is no even element in lst2, return \"NO\"\n            return \"NO\"\n\n        # Exchange the odd element in lst1 with the even element in lst2\n        lst1[i], lst2[j] = lst2[j], lst1[i]\n\n        # Check if all elements of lst1 are even after the exchange\n        if all(num % 2 == 0 for num in lst1):\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 1616,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    \n    # Create an empty dictionary to store the letter with their count\n    letter_dict = {}\n    \n    # Split the input string with space as delimiter and iterate through each word\n    for word in test.split():\n        # If the word is already present in the dictionary, increment the count by 1\n        if word in letter_dict:\n            letter_dict[word] += 1\n        # If the word is not present in the dictionary, add it with count 1\n        else:\n            letter_dict[word] = 1\n    \n    # Create an empty list to store the letters with the highest count\n    max_count = 0\n    max_letters = []\n    \n    # Iterate through each key-value pair in the dictionary and check if the count is equal to the highest count\n    for letter, count in letter_dict.items():\n        if count > max_count:\n            max_count = count\n            max_letters = [letter]\n        elif count == max_count:\n            max_letters.append(letter)\n    \n    # Return a dictionary with the letters with the highest count and their corresponding count\n    return {letter: max_count for letter in max_letters}\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 1269,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # create a set of characters to delete\n    delete_set = set(c)\n\n    # create a list of characters to keep\n    keep_list = [char for char in s if char not in delete_set]\n\n    # join the characters to form the result string\n    result_string = ''.join(keep_list)\n\n    # check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n\n    return (result_string, is_palindrome)\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 866,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4 in the string 4 of the input.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1 in the string 1 of the input.\",\n     \"the number of odd elements 8 in the string 8 of the input.\"]\n    \"\"\"\n\n    result = []\n    for i, string in enumerate(lst):\n        odd_count = 0\n        for char in string:\n            if int(char) % 2 != 0:\n                odd_count += 1\n        result.append(f\"the number of odd elements in the string {i+1} of the input is {odd_count}.\")\n\n    return result\n",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1 in the string 1 of the input.\",",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums. Return the minimum sum or None if there is no sub-array.\n    \"\"\"\n    if not nums:\n        return None\n    \n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum if min_sum != float('inf') else None\n",
        "test": "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well, \n    and each 1 in a row represents a single unit of water. \n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells. \n    Output the number of times you need to lower the buckets.\n\n    Example 1: \n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2: \n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3: \n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    # Calculate the total number of units of water in the wells\n    water_units = sum([sum(row) for row in grid])\n\n    # Calculate the number of times we need to empty the buckets\n    bucket_fills = math.ceil(water_units / capacity)\n\n    return bucket_fills\n",
        "test": "assert max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_array(arr):\n    def count_ones(n):\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def select_words(s, n):\n    # Helper function to check if a word has n consonants\n    def has_n_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        count = 0\n        for char in word:\n            if char in consonants:\n                count += 1\n        return count == n\n\n    # Split the string into words\n    words = s.split()\n\n    # Filter out words that don't have n consonants\n    result = [word for word in words if has_n_consonants(word)]\n\n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 540,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    vowels = \"AEIOUaeiou\"\n    i = len(word) - 1\n    \n    while i >= 0:\n        if word[i] in vowels:\n            if i < len(word) - 1 and word[i+1] not in vowels:\n                return word[i]\n            elif i == len(word) - 1:\n                return \"\"\n        i -= 1\n    \n    return \"\"\n",
        "test": "assert get_closest_vowel(\"FULL\") == \"U\"",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def match_parens(lst):\n    s = lst[0] + lst[1]\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    if stack:\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert match_parens(['()', '()']) == 'Yes'",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    # initialize a variable to store the sum of odd elements in even positions\n    sum_odd_even_positions = 0\n\n    # loop through the list and check if the element is odd and in an even position\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even_positions += lst[i]\n    \n    # return the sum of odd elements in even positions\n    return sum_odd_even_positions\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n            count += 1\n\n    return sum\n",
        "test": "assert add_elements([10, 20, 30, 40, 50], 5) == 150",
        "num_ids": 883,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    def collatz(x):\n        if x == 1:\n            return [1]\n        elif x % 2 == 0:\n            return [x] + collatz(x // 2)\n        else:\n            return [x] + collatz(3 * x + 1)\n\n    collatz_seq = collatz(n)\n    odd_collatz = sorted([x for x in collatz_seq if x % 2 != 0])\n\n    return odd_collatz",
        "test": "assert get_odd_collatz(5) == [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef valid_date(date):\n    \"\"\"\n    This function takes a date string and checks if it is in the valid format mm-dd-yyyy and is a valid date.\n\n    It first checks if the date string is empty. If it is, it returns False.\n\n    Then it uses regular expressions to extract the month, day, and year from the date string.\n\n    It checks if the month is between 1 and 12. If it is not, it returns False.\n\n    It checks if the day is between 1 and the maximum number of days for that month. If it is not, it returns False.\n\n    If the date passes all of these checks, it returns True.\n    \"\"\"\n    # Check if the date string is empty.\n    if not date:\n        return False\n\n    # Use regular expressions to extract month, day, and year from the date string.\n    pattern = re.compile(r'^(\\d{2})-(\\d{2})-(\\d{4})$')\n    match = pattern.match(date)\n\n    # If the pattern does not match, return False.\n    if not match:\n        return False\n\n    # Extract month, day, and year from the match object.\n    month = int(match.group(1))\n    day = int(match.group(2))\n    year = int(match.group(3))\n\n    # Check if the month is between 1 and 12.\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid for the given month and year.\n    if month == 2:\n        max_days = 29 if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) else 28\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:\n        max_days = 31\n\n    if day < 1 or day > max_days:\n        return False\n\n    # If all checks pass, return True.\n    return True\n",
        "test": "assert valid_date('03-11-2000') == True, \"Valid date should return True\"",
        "num_ids": 1610,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in range(26):\n            if ord('a') + i in txt:\n                count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Determine if the two intervals intersect\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    # Calculate the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Determine if the length of the intersection is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    prod_sign = 1\n    for num in arr:\n        if num == 0:\n            prod_sign *= 0\n        elif num > 0:\n            prod_sign *= 1\n        else:\n            prod_sign *= -1\n            \n    return sum(abs(num) for num in arr) * prod_sign\n",
        "test": "assert prod_signs([0, 1]) == 0",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def minPath(grid, k):\n    def get_neighbors(row, col):\n        neighbors = []\n        if row > 0:\n            neighbors.append((row - 1, col))\n        if col > 0:\n            neighbors.append((row, col - 1))\n        if row < N - 1:\n            neighbors.append((row + 1, col))\n        if col < N - 1:\n            neighbors.append((row, col + 1))\n        return neighbors\n\n    def dfs(row, col, visited, path):\n        if (row, col) in visited:\n            return\n        visited.add((row, col))\n        path.append(grid[row][col])\n\n        if len(path) == k:\n            return path\n\n        for neighbor in get_neighbors(row, col):\n            if neighbor not in visited:\n                result = dfs(neighbor[0], neighbor[1], visited, path)\n                if result:\n                    return result\n\n    N = len(grid)\n    start_cell = (0, 0)\n    return dfs(start_cell[0], start_cell[1], set(), [])",
        "test": "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
        "num_ids": 1925,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tri(n):\n    \"\"\"\n    Returns the first n+1 numbers of the Tribonacci sequence.\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                seq.append(seq[-1] + (i // 2))\n            else:\n                seq.append(seq[-1] + seq[-2] + seq[-3])\n        return seq\n",
        "test": "assert tri(1) == [1]",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digits(n):\n    product = 1\n    all_even = True\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 == 1:\n            product *= digit\n            all_even = False\n    if all_even:\n        return 0\n    else:\n        return product\n",
        "test": "assert digits(1) == 1",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) > 0:\n        return False\n    return True",
        "test": "assert is_nested('[[]]') == True",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    \n    # round each element in the list to the upper int(Ceiling)\n    rounded_lst = [int(math.ceil(num)) for num in lst]\n    \n    # calculate the sum of squared numbers\n    sum_of_squares = sum([num**2 for num in rounded_lst])\n    \n    return sum_of_squares\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 840,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    elif txt[-1].isalpha() and txt[-2] == \" \":\n        return True\n    else:\n        return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    # initialize variables\n    prev = float('-inf')  # initialize previous element as negative infinity\n    max_idx = -1  # initialize maximum index as -1\n\n    # iterate through array\n    for i in range(len(arr)):\n        # if current element is less than previous, update max_idx and prev\n        if arr[i] < prev:\n            max_idx = i\n        prev = arr[i]  # update previous element to current element\n\n    return max_idx\n",
        "test": "assert can_arrange([1, 2, 3]) == -1",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. If there is no negative or positive integers,\n    return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    max_neg = max_pos = None\n\n    for num in lst:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n        elif num > 0:\n            if max_pos is None or num < max_pos:\n                max_pos = num\n\n    return (max_neg, max_pos)\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def compare_one(a, b):\n    try:\n        a_float = float(a)\n        b_float = float(b)\n    except ValueError:\n        return None\n\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return type(a)(a_float)\n    else:\n        return type(b)(b_float)\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    \n    # Check if the given number is even\n    if n % 2 != 0:\n        return False\n    \n    # Initialize the count of even numbers as 0\n    count = 0\n    \n    # Initialize the sum as 0\n    total = 0\n    \n    # Loop through all the even numbers less than the given number n\n    for i in range(2, n, 2):\n        # Increment the count of even numbers\n        count += 1\n        \n        # Add the current even number to the total sum\n        total += i\n        \n        # If the total sum is equal to the given number n and the count of even numbers is 4, return True\n        if total == n and count == 4:\n            return True\n    \n    # If the loop is completed and no suitable combination is found, return False\n    return False\n",
        "test": "assert is_equal_to_sum_even(6) == False, \"Test Case 2 Failed\"",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    # Initialize the result variable to 1\n    result = 1\n\n    # Loop from n down to 1\n    for i in range(n, 0, -1):\n        # Multiply the result by i\n        result *= i\n\n    # Return the final result\n    return result\n",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    # Split the text into words, using underscores as the delimiter\n    words = text.split('_')\n    # Loop through the words, replacing consecutive spaces with -\n    new_words = []\n    prev_word = ''\n    for word in words:\n        if prev_word == '':\n            new_words.append(word)\n        elif len(word) == 0 or word.isspace():\n            new_words[-1] += '-'\n        else:\n            new_words.append(word)\n        prev_word = word\n    # Join the words back together with underscores\n    return '_'.join(new_words)\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # check if there are more than three digits in the file name\n    if len(set(file_name) & set('0123456789')) > 3:\n        return 'No'\n    \n    # check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # check if the substring before the dot is empty or starts with a letter from the latin alphapet\n    substring_before_dot = file_name.split('.')[0]\n    if not substring_before_dot or not (substring_before_dot[0].isalpha()):\n        return 'No'\n    \n    # check if the substring after the dot is one of the allowed extensions\n    substring_after_dot = file_name.split('.')[1]\n    if substring_after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == \"Yes\"",
        "num_ids": 1470,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    # initialize the sum to zero\n    total = 0\n    \n    # iterate over the list\n    for i in range(len(lst)):\n        # check if the index is a multiple of 3\n        if i % 3 == 0:\n            # square the value at this index\n            lst[i] = lst[i] ** 2\n        # check if the index is a multiple of 4 but not a multiple of 3\n        elif i % 4 == 0 and i % 3 != 0:\n            # cube the value at this index\n            lst[i] = lst[i] ** 3\n        # add the value at this index to the total sum\n        total += lst[i]\n    \n    return total\n",
        "test": "assert sum_squares([1, 2, 3]) == 6",
        "num_ids": 957,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence, \n    the sentence contains some words separated by a space, \n    and you have to return a string that contains the words from the original sentence, \n    whose lengths are prime numbers, \n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    result = \" \".join(prime_words)\n    return result\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 1424,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def simplify(x, n):\n    \"\"\"\n    Returns True if x * n evaluates to a whole number, False otherwise.\n    \"\"\"\n    x_num, x_den = [int(i) for i in x.split('/')]\n    n_num, n_den = [int(i) for i in n.split('/')]\n    \n    # Simplify the expression x * n\n    product = x_num * n_den * n_num * x_den\n    \n    # Check if product is a whole number\n    if product % (x_den * n_den) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/5\", \"5/1\") == True, \"Test case 1 failed\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_of_digits(num):\n    \"\"\"\n    Calculates the sum of digits of a given number.\n    \"\"\"\n    return sum(int(digit) for digit in str(num))\n\ndef order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n",
        "test": "assert order_by_points([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 != 0 and num // 10 % 2 != 0:\n            count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count",
        "test": "assert get_max_triples(1) == 0",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    \n    if planet1_index < planet2_index:\n        return tuple(planets[planet1_index+1:planet2_index])\n    else:\n        return tuple(planets[planet2_index+1:planet1_index])\n",
        "test": "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
        "num_ids": 891,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. \n    The order of the list should be ascending by length of each word, and you \n    should return the list sorted by that rule. \n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order. \n    You may assume that all words will have the same length. \n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Delete strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"A function to check if a number is prime or not\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            result += (num - 1) ** 2 if num % 2 == 1 else 0\n            result += num ** 2 if num % 2 == 1 else 0\n    return result\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n    \n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class.\n    The strength of the extension is as follows:\n    Let CAP be the number of the uppercase letters in the extension's name,\n    and let SM be the number of lowercase letters in the extension's name,\n    the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength,\n    you should choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    # initialize the strongest extension as the first extension in the list\n    strongest_extension = extensions[0]\n\n    # initialize the strength of the strongest extension as the strength of the first extension\n    strength = len([c for c in strongest_extension if c.isupper()]) - len([c for c in strongest_extension if c.islower()])\n\n    # iterate through the list of extensions starting from the second one\n    for extension in extensions[1:]:\n        # calculate the strength of the current extension\n        curr_strength = len([c for c in extension if c.isupper()]) - len([c for c in extension if c.islower()])\n\n        # if the current extension is stronger than the strongest extension\n        if curr_strength > strength:\n            # update the strongest extension to the current extension\n            strongest_extension = extension\n\n            # update the strength to the strength of the current extension\n            strength = curr_strength\n\n    # return the strongest extension in the desired format\n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"",
        "num_ids": 1465,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n\n    if len(a) < len(b):\n        return False\n\n    # Convert the second word to a set to reduce the time complexity\n    b_set = set(b)\n\n    # Iterate through the first word and check if any rotation of the second word exists\n    for i in range(len(a) - len(b) + 1):\n        sub_str = a[i:i+len(b)]\n        if set(sub_str) == b_set:\n            return True\n\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\", \"abd\") == False",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 155,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    \n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    \n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    \n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(0) == (0, 0)",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_mapping = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, roman in roman_numeral_mapping.items():\n        while number >= value:\n            result += roman\n            number -= value\n\n    return result\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the sum of the squares of the sides is equal to the square of the hypotenuse\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_chars:\n            max_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_chars:\n            if word < max_word:\n                max_word = word\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    total = number + min(need, remaining)\n    remaining = remaining - (min(need, remaining) - number)\n    return [total, remaining]\n",
        "test": "assert eat(4, 8, 9) == [12, 1]",
        "num_ids": 1285,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )  \n    Subtraction ( - )  \n    Multiplication ( * )  \n    Floor division ( // )  \n    Exponentiation ( ** )  \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    \n    # Create the algebraic expression from the given inputs\n    expression = ''\n    for i in range(len(operator)):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n    \n    # Evaluate the algebraic expression\n    result = eval(expression)\n    \n    return result\n",
        "test": "assert do_algebra(['+'], [1, 2]) == 3",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    \n    # initialize a flag to check if the string contains any letters\n    contains_letter = False\n    \n    # loop through each character in the string\n    result = \"\"\n    for char in s:\n        # if the character is a letter, reverse its case and set the flag to True\n        if char.isalpha():\n            result += char.swapcase()\n            contains_letter = True\n        # otherwise, keep it as it is\n        else:\n            result += char\n    \n    # if the flag is still False, reverse the string\n    if not contains_letter:\n        result = result[::-1]\n    \n    return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    \n    # Find the smaller and larger numbers\n    smaller = min(a, b)\n    larger = max(a, b)\n    \n    # Create a set of even digits between the two numbers\n    even_digits = set()\n    for num in range(smaller, larger+1):\n        digits = str(num)\n        for digit in digits:\n            if int(digit) % 2 == 0:\n                even_digits.add(int(digit))\n    \n    # Return the sorted list of even digits\n    return sorted(list(even_digits))\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 868,
        "indeed": false
    }
]