[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 993,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    \n    result = []\n    stack = []\n    current = ''\n    \n    for char in paren_string:\n        if char == ' ':\n            continue\n        \n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n                current += char\n            else:\n                stack.append(char)\n                current = ''\n        else:\n            continue\n        \n        if not stack and current:\n            result.append(current)\n            current = ''\n            \n    return result\n",
        "test": "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
        "num_ids": 2139,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    # Convert the number to a string and split it into integer and decimal parts\n    number_str = str(number)\n    integer_part, decimal_part = number_str.split('.')\n\n    # Convert the decimal part back to a float and return it\n    return float('0.' + decimal_part)",
        "test": "assert truncate_number(3.5) == 0.5, \"truncate_number(3.5) should return 0.5\"",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0 ",
        "num_ids": 1269,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces. \n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    result = []\n    for group in paren_string.split():\n        count = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                max_depth = max(max_depth, count)\n            elif char == ')':\n                count -= 1\n        result.append(max_depth)\n    return result\n",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 1451,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n\n    total_sum = sum(numbers)\n    total_product = 1\n\n    for num in numbers:\n        total_product *= num\n\n    return (total_sum, total_product)\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 1079,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_element = numbers[0]\n    rolling_max_list = [max_element]\n    for num in numbers[1:]:\n        if num > max_element:\n            max_element = num\n        rolling_max_list.append(max_element)\n    return rolling_max_list\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\n    :param string: Input string to make palindrome\n    :return: Shortest palindrome that begins with the input string\n    \"\"\"\n    # Find the longest palindromic postfix of the string\n    max_palindrome_suffix = ''\n    for i in range(len(string)):\n        current_suffix = string[i:]\n        if current_suffix == current_suffix[::-1] and len(current_suffix) > len(max_palindrome_suffix):\n            max_palindrome_suffix = current_suffix\n\n    # Append the reverse of the prefix to the end of the string to make it a palindrome\n    return string + max_palindrome_suffix[::-1]\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1469,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)\n",
        "test": "assert string_xor('1111', '0000') == '1111'",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n\n    return longest_str\n",
        "test": "assert longest([]) is None",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']  # Test case 1",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ignore case\n    string = string.lower()\n    \n    # Use a set to store distinct characters\n    distinct_chars = set()\n    \n    # Iterate over the characters in the string\n    for char in string:\n        # Add each character to the set\n        distinct_chars.add(char)\n    \n    # Return the size of the set\n    return len(distinct_chars)\n",
        "test": "assert count_distinct_characters('Jerry') == 4",
        "num_ids": 736,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    beat_count = {'o': 4, 'o|': 2, '.|': 1}\n    note_list = []\n\n    for note in music_string.split():\n        note_list.append(beat_count[note])\n\n    return note_list\n",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] ",
        "num_ids": 1603,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases. \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring) - 1\n        i += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    \n    # Convert the input string to a list of strings\n    numbers_list = numbers.split()\n    \n    # Create a dictionary to map each number to its corresponding integer value\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Convert the list of strings to a list of integers using the dictionary\n    int_list = [number_map[num] for num in numbers_list]\n    \n    # Sort the list of integers\n    int_list.sort()\n    \n    # Convert the sorted list of integers back to a list of strings using the reverse dictionary\n    sorted_numbers = [list(number_map.keys())[list(number_map.values()).index(num)] for num in int_list]\n    \n    # Join the sorted list of strings back into a space-delimited string and return it\n    return ' '.join(sorted_numbers)\n",
        "test": "assert sort_numbers('zero') == 'zero'",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers.\")\n    \n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n    \n    return closest_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 1853,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list, \n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    scale = max_val - min_val\n    return [(num - min_val) / scale for num in numbers]\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1558,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest number that divides n evenly, smaller than n.\n    \"\"\"\n    i = n - 1\n    while i > 1:\n        if n % i == 0:\n            return i\n        i -= 1\n    return 1\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    factors = []\n    divisor = 2\n\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 1369,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Use a dictionary to keep track of unique elements and their counts\n    unique_elements = {}\n    for num in numbers:\n        if num in unique_elements:\n            unique_elements[num] += 1\n        else:\n            unique_elements[num] = 1\n    \n    # Create a new list with unique elements only\n    result = []\n    for num in numbers:\n        if unique_elements[num] == 1:\n            result.append(num)\n            # Mark the element as seen to avoid adding it again\n            unique_elements[num] = 0\n    \n    return result\n",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase. \"\"\"\n    flipped_string = ''\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char.lower()\n    return flipped_string\n",
        "test": "assert flip_case(\"Hello\") == \"hELLO\"",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = \"\"\n    for string in strings:\n        result += string\n    return result\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \n    Args:\n        strings: A list of strings.\n        prefix: A string representing the prefix to filter by.\n        \n    Returns:\n        A list of strings containing only the strings from `strings` that start with `prefix`.\n    \"\"\"\n    \n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 1024,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 947,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    n = len(xs) // 2  # finding n, the degree of the polynomial\n    if len(xs) % 2 != 0 or xs[0] == 0:\n        raise ValueError(\"The polynomial should have even number of coefficients and non-zero constant term.\")\n\n    x = 0\n    while poly(xs, x) != 0:\n        x -= poly(xs, x) / (2 * xs[n])\n\n    return round(x, 2)\n",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three,\n    while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    l_sorted = sorted(l[::3])\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l_sorted.pop(0))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1373,
        "indeed": true
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123] ",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    \n    max_num = l[0]  # assuming first element is the maximum\n    \n    for num in l:\n        if num > max_num:\n            max_num = num\n            \n    return max_num\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for digit in str(i):\n                if digit == '7':\n                    count += 1\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # separate even and odd indices\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    odd_indices = [i for i in range(len(l)) if i % 2 != 0]\n\n    # separate even and odd values\n    even_values = [l[i] for i in even_indices]\n    odd_values = [l[i] for i in odd_indices]\n\n    # sort even values\n    even_values_sorted = sorted(even_values)\n\n    # create new list with sorted even values and original odd values\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_values_sorted.pop(0))\n        else:\n            l_prime.append(l[i])\n\n    return l_prime",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1452,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # reverse cycle operation.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 1536,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    is_prime returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> int:\n    \"\"\"\n    fibonacci returns the n-th Fibonacci number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n    return fibonacci(i-1)",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Convert the list to a set to remove duplicates\n    l = set(l)\n\n    # Check if there are three elements in the set that sum to zero\n    for x in l:\n        for y in l:\n            if x != y:\n                if -x - y in l:\n                    return True\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1838,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Initialize an empty list to store the positions of the cars\n    positions: List[int] = []\n\n    # Add the initial positions of the cars\n    for i in range(n):\n        positions.append(i - n)\n        positions.append(i + n)\n\n    # Initialize a counter for collisions\n    collisions: int = 0\n\n    # Loop through the cars and check for collisions\n    for i in range(n * 2):\n        for j in range(i + 1, n * 2):\n            if positions[i] == positions[j]:\n                collisions += 1\n\n    return collisions",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 1403,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [i+1 for i in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    for num in l:\n        if 0 - num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # initialize an empty string to store the result\n    result = ''\n    # loop over the digits of the input number x\n    while x > 0:\n        # get the remainder when x is divided by base\n        remainder = x % base\n        # convert the remainder to its corresponding digit\n        digit = str(remainder) if remainder < 10 else chr(ord('a') + remainder - 10)\n        # append the digit to the result string\n        result = digit + result\n        # update x by integer dividing it by base\n        x //= base\n    return result\n",
        "test": "assert change_base(8, 3) == \"22\"",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
        "test": "assert triangle_area(5, 3) == 7.5, \"The function is not returning the correct area for a triangle with sides 5 and 3.\"",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    \n    for i in range(4, n+1):\n        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    \n    return e\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 1405,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    \n    if length % 2 == 0:\n        median = (sorted_list[length//2 - 1] + sorted_list[length//2]) / 2\n    else:\n        median = sorted_list[length//2]\n    \n    return median\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3, \"Incorrect median\"",
        "num_ids": 1319,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Remove non-alphanumeric characters from the text\n    text = ''.join(c for c in text if c.isalnum())\n    # Convert the text to lowercase\n    text = text.lower()\n    # Compare the text to its reversed version\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if n == 0:\n        return 1\n    elif n < 0:\n        return pow(2, abs(n), p)\n    else:\n        return pow(2, n, p)\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in text:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result)\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 957,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    # convert both strings to sets\n    s0_set = set(s0)\n    s1_set = set(s1)\n\n    # check if both sets have the same characters\n    return s0_set == s1_set\n",
        "test": "assert same_chars('abcd', 'dddddddabc') == True",
        "num_ids": 1271,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "test": "assert fib(10) == 55",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    \n    if len(l) <= 1:\n        return True\n    \n    increasing = l[1] >= l[0]\n    \n    for i in range(2, len(l)):\n        if increasing:\n            if l[i] < l[i-1]:\n                return False\n        else:\n            if l[i] > l[i-1]:\n                return False\n    \n    return True\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 1197,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1271,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n.\n    Assume n > 1 and is not a prime.\n\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return i\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 1010,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fib = [0, 0, 1]\n    for i in range(3, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n    return fib[n]\n",
        "test": "assert fibfib(1) == 0",
        "num_ids": 1127,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        elif char.lower() == 'y' and s.index(char) == len(s)-1:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits,\n    return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    shift = shift % n\n    if shift == 0:\n        return ''.join(map(str, digits))\n    else:\n        return ''.join(map(str, digits[-shift:] + digits[:n-shift]))\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digitSum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # Split the string into apples and oranges count\n    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[3])\n\n    # Calculate the total number of mango fruits in the basket\n    mango_fruits = n - apples - oranges\n\n    return mango_fruits\n",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 1985,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    \n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    min_even = float('inf')\n    min_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:\n            min_even = num\n            min_even_index = i\n    return [min_even, min_even_index] if min_even != float('inf') else []\n",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    max_frequency = 0\n    result = -1\n    \n    for num in lst:\n        if num > 0:\n            frequency = lst.count(num)\n            if frequency >= num and num > result:\n                result = num\n    \n    return result",
        "test": "assert search([4, 1, 2, 2, 3, 1]) == 2",
        "num_ids": 1316,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 1489,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # check if q is a palindromic list\n    if q == q[::-1]:\n        # check if the sum of q's elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    mid = n // 2\n    count = 0\n    if n % 2 != 0:\n        mid += 1\n    for i in range(mid):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count\n",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
        "num_ids": 1577,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Calculate the total number of chars in each list\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    \n    # If the two lists have the same number of chars, return the first list\n    if total1 == total2:\n        return lst1\n    \n    # Return the list with less total number of chars\n    return lst1 if total1 < total2 else lst2\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 987,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a < 6:\n        return False\n    factors = []\n    for i in range(2, a+1):\n        if is_prime(i) and a % i == 0:\n            factors.append(i)\n            if len(factors) == 3:\n                return True\n    return False\n",
        "test": "assert is_multiply_prime(10) == False",
        "num_ids": 1385,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Returns true if x is a simple power of n and false otherwise.\n    \"\"\"\n    if n == 0 or x == 0:\n        return False\n    \n    while x != 1:\n        x //= n\n        \n    return x == 1\n",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number. \n    Note: you may assume the input is always valid. \n    Examples: \n    iscube(1) ==> True \n    iscube(2) ==> False \n    iscube(-1) ==> True \n    iscube(64) ==> True \n    iscube(0) ==> True \n    iscube(180) ==> False \n    '''\n    # Find the cube root of a\n    cube_root = int(round(a ** (1/3)))\n    # Check if cube root * cube root * cube root is equal to a\n    if cube_root ** 3 == a:\n        return True\n    else:\n        return False\n",
        "test": "assert iscube(1) == True",
        "num_ids": 1131,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    count = 0\n    for hex_digit in num:\n        decimal_value = int(hex_digit, 16)\n        if is_prime(decimal_value):\n            count += 1\n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 1855,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts a decimal number to binary format.\n\n    :param decimal: A decimal number (integer).\n    :return: A string representing the binary number.\n    \"\"\"\n    # Initialize the binary string\n    binary = \"\"\n\n    # Loop until the decimal number is zero\n    while decimal > 0:\n        # Get the remainder when the decimal number is divided by 2\n        remainder = decimal % 2\n\n        # Append the remainder to the binary string\n        binary = str(remainder) + binary\n\n        # Divide the decimal number by 2 (integer division)\n        decimal = decimal // 2\n\n    # Add the 'db' characters to the binary string\n    binary = \"db\" + binary + \"db\"\n\n    return binary\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    \n    # Check if length of string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Check if every 3 consecutive letters are distinct\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    \n    return True\n",
        "test": "assert is_happy('abcd') == True",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    def grade_calculator(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa >= 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [grade_calculator(g) for g in grades]",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 2915,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"\n    Main function to check if the length of a string is prime or not.\n    \"\"\"\n    length = len(string)\n    return is_prime(length)\n",
        "test": "assert prime_length('') == False, \"Empty string should return False\"",
        "num_ids": 748,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**(n-1)):\n        if i % 10 == 1 or i // 10 == 1:\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 0",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    binary = bin(N)[2:]\n    total_sum = 0\n    \n    for digit in binary:\n        total_sum += int(digit)\n    \n    return bin(total_sum)[2:]\n",
        "test": "assert solve(150) == \"110\"",
        "num_ids": 1041,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n    # Initialize a variable to store the sum\n    total = 0\n\n    # Loop through the list\n    for i in range(1, len(lst), 2):\n        # Check if the current element is even\n        if lst[i] % 2 == 0:\n            # Add the even element to the total\n            total += lst[i]\n\n    # Return the total sum\n    return total\n",
        "test": "assert add([4, 2, 6, 7]) == 2 # should return 2 for the even element at odd index ",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        chars = sorted(word)\n        result.append(''.join(chars))\n    return ' '.join(result)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 1305,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, \n    which is similar to matrix, however, unlike matrices, \n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list, \n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that \n    each tuple is a coordinate - (row, columns), starting with 0. \n    Sort coordinates initially by rows in ascending order. \n    Also, sort coordinates of the row by columns in descending order. \n    \n    Examples: \n    get_row([ \n      [1,2,3,4,5,6], \n      [1,2,3,4,1,6], \n      [1,2,3,4,5,1] \n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    coordinates = []\n    \n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                coordinates.append((i, j))\n    \n    # Sort coordinates initially by rows in ascending order\n    coordinates.sort(key=lambda x: x[0])\n    \n    # Sort coordinates of the row by columns in descending order\n    for i in range(len(lst)):\n        coordinates_in_row = [coord for coord in coordinates if coord[0] == i]\n        coordinates_in_row.sort(key=lambda x: x[1], reverse=True)\n        coordinates = [coord if coord[0] != i else coordinates_in_row.pop(0) for coord in coordinates]\n    \n    return coordinates\n",
        "test": "assert get_row([], 1) == []",
        "num_ids": 2191,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # If the array is empty, return an empty array\n    if len(array) == 0:\n        return []\n\n    # Calculate the sum of first and last elements\n    sum_first_last = array[0] + array[-1]\n\n    # If the sum is odd, sort the array in ascending order\n    if sum_first_last % 2 == 1:\n        return sorted(array)\n    # If the sum is even, sort the array in descending order\n    else:\n        return sorted(array, reverse=True)\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 1520,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places. \n    For example: \n    encrypt('hi') returns 'lm' \n    encrypt('asdfghjkl') returns 'ewhjklnop' \n    encrypt('gf') returns 'kj' \n    encrypt('et') returns 'ix' \n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_value = ord(char)\n            if char.islower():\n                ascii_value = ascii_value + (2*2)\n                if ascii_value > ord('z'):\n                    ascii_value = ascii_value - 26\n            else:\n                ascii_value = ascii_value + (2*2)\n                if ascii_value > ord('Z'):\n                    ascii_value = ascii_value - 26\n            result += chr(ascii_value)\n        else:\n            result += char\n    return result\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 1672,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    if len(lst) < 2:\n        return None\n    \n    lst = sorted(set(lst)) # Remove duplicates and sort the list\n    \n    if lst[1] == lst[0]:\n        return None # No second smallest element\n    \n    return lst[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    \n    boredom_count = 0\n    sentences = S.split('.')\n    sentences.extend(S.split('!'))\n    sentences.extend(S.split('?'))\n    \n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    \n    return boredom_count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or y + z == x or x + z == y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert any_int(3, 2, 2) == False",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    new_message = ''\n    for char in message:\n        if char in vowels:\n            index = vowels.find(char)\n            new_char = chr(ord(char) + 2)\n            if new_char > 'u':\n                new_char = chr(ord(char) - 10)\n            new_message += new_char.upper()\n        else:\n            if char.isupper():\n                new_message += char.lower()\n            else:\n                new_message += char.upper()\n    return new_message\n",
        "test": "assert encode(\"test\") == \"TGST\"",
        "num_ids": 1054,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"\n    This function takes an integer n and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_of_digits(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of its digits.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n\n\ndef skjkasdkd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of the digits of the largest prime number in the list.\n    \"\"\"\n    primes = []\n    for num in lst:\n        if is_prime(num):\n            primes.append(num)\n    if not primes:\n        return None\n    max_prime = max(primes)\n    return sum_of_digits(max_prime)\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 2048,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False. \n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict: # check if dictionary is empty\n        return False\n    \n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 1689,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n",
        "test": "assert count_up_to(5) == [2, 3]",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def multiply(a, b):\n    # Extract the last digit of a and b\n    a_unit = a % 10\n    b_unit = b % 10\n    # Calculate the product of the two digits\n    product = a_unit * b_unit\n    # Return the product as the answer\n    return product\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper('aBCdEf') == 1",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    # Convert the input value to a float\n    number = float(value)\n    \n    # Check if the number is already an integer\n    if number.is_integer():\n        return int(number)\n    \n    # If the number is not an integer, find the two closest integers\n    lower = int(number)\n    upper = lower + 1\n    \n    # Calculate the distance to the lower and upper integers\n    lower_distance = abs(number - lower)\n    upper_distance = abs(number - upper)\n    \n    # If the two distances are equal, round away from zero\n    if lower_distance == upper_distance:\n        return upper if number > 0 else lower\n    \n    # Otherwise, return the closest integer\n    else:\n        return lower if lower_distance < upper_distance else upper\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1568,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n            - the next odd number if n is odd.\n            - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(n-1):\n        if n % 2 == 0:  # if n is even\n            n = n + 2  # add 2 to make it odd\n        else:  # if n is odd\n            n = n + 1  # add 1 to make it even\n        pile.append(n)\n    return pile\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 1405,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split(\", \")\n    if len(words) == 1:\n        words = s.split(\" \")\n    return words\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 1218,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n\n    even_nums = []\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            even_nums.append(i)\n\n    if not even_nums:\n        return -1\n\n    return max(even_nums)",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 1522,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    Compute the average of integers from n to m (inclusive) and round to the nearest integer.\n    If n > m, return -1.\n    \"\"\"\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    average = round(total / count)\n    return bin(average)\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 1219,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    result.sort()\n    return result\n",
        "test": "assert unique_digits([152, 323, 1422, 10]) == []",
        "num_ids": 1222,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array,\n    and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\",\n    \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]  \n                   -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return = [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n    If the array is empty, return an empty array:\n    arr = []\n    return []\n\n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55]  -> sort arr -> [-1, 1, 55]\n                 -> reverse arr -> [55, 1, -1]\n    return = ['One']\n    \"\"\"\n\n    # sort the array of integers from 1 to 9 inclusive\n    arr_sorted = sorted([x for x in arr if 1 <= x <= 9])\n\n    # reverse the sorted array\n    arr_sorted.reverse()\n\n    # replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\",\n    # \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    arr_names = [str(x) if x <= 9 else \"\" for x in arr_sorted]\n\n    # replace each number with its corresponding name from the mapping table\n    mapping = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n                6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    for i, name in enumerate(arr_names):\n        if name.isdigit() and int(name) in mapping:\n            arr_names[i] = mapping[int(name)]\n\n    return arr_names\n",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
        "num_ids": 2902,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(fact(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef fact(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n",
        "test": "assert f(0) == []",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 1196,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0. If a number is negative,\n    then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing  \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.  \n    \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False. If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n                 \n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False",
        "num_ids": 1825,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    if even_count == len(lst1):\n        return \"YES\"\n    for num in lst2:\n        if num % 2 == 0:\n            lst1.append(num)\n            if len(lst1) - even_count == len(lst2):\n                return \"YES\"\n    return \"NO\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 2171,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    # Create an empty dictionary to store the frequency of letters\n    freq_dict = {}\n    \n    # Split the input string into individual letters\n    letters = test.split()\n    \n    # Loop through each letter and update the frequency dictionary\n    for letter in letters:\n        if letter in freq_dict:\n            freq_dict[letter] += 1\n        else:\n            freq_dict[letter] = 1\n    \n    # Find the maximum frequency count\n    max_count = max(freq_dict.values())\n    \n    # Create a new dictionary to store the letters with the maximum frequency count\n    max_dict = {}\n    \n    # Loop through the frequency dictionary and add the letters with the maximum frequency count to the new dictionary\n    for letter, count in freq_dict.items():\n        if count == max_count:\n            max_dict[letter] = count\n    \n    # Return the dictionary containing the letters with the maximum frequency count\n    return max_dict\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 2031,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def reverse_delete(s,c):\n    # Initialize an empty list to store the characters of s that are not in c\n    new_s = []\n    # Loop through each character in s\n    for char in s:\n        # If the character is not in c, append it to new_s\n        if char not in c:\n            new_s.append(char)\n    # Convert the list to a string\n    new_s = ''.join(new_s)\n    # Check if the result string is palindrome\n    if new_s == new_s[::-1]:\n        return (new_s, True)\n    else:\n        return (new_s, False)\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 1391,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if lst[i][j] in ['1', '3', '5', '7', '9']:\n                count += 1\n        result.append(\"the number of odd elements in the string \" + str(i+1) + \" of the input is \" + str(count))\n    return result\n",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
        "num_ids": 1686,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')  # set initial minimum sum to infinity\n    current_sum = 0  # initialize current sum to zero\n    for num in nums:\n        current_sum += num  # add current number to current sum\n        if current_sum < min_sum:\n            min_sum = current_sum  # update minimum sum if current sum is smaller\n        if current_sum > 0:\n            current_sum = 0  # reset current sum to zero if it becomes negative\n    return min_sum\n",
        "test": "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well, \n    and each 1 in a row represents a single unit of water. \n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells. \n    Output the number of times you need to lower the buckets.\n    \n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n    \n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n    \n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    total_units = sum(grid[i][j] for i in range(num_rows) for j in range(num_cols))\n    max_fill_count = math.ceil(total_units / capacity)\n    \n    return max_fill_count\n",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Example 1: Incorrect output\"",
        "num_ids": 2179,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order. \n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr\n",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 1369,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        count = 0\n        for char in word:\n            if char in consonants:\n                count += 1\n        return count\n\n    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    return result",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 1126,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n    \n    You may assume that the given string contains English letter only.\n    \n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1] # reverse the string to search from the right side\n    vowel_found = False\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] not in vowels and not vowel_found:\n            return word[i]\n        elif word[i] in vowels and word[i+1] in vowels:\n            vowel_found = True\n    return \"\"\n",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 1353,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only. Your job is to check if it is\n    possible to concatenate the two strings in some order, that the resulting\n    string will be good. A string S is considered to be good if and only if all\n    parentheses in S are balanced. For example: the string '(())()' is good,\n    while the string '())' is not. Return 'Yes' if there's a way to make a good\n    string, and return 'No' otherwise.\n    \n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    \n    # Concatenate the two strings\n    s = lst[0] + lst[1]\n    \n    # Use a stack to keep track of open parentheses\n    stack = []\n    \n    # Loop through each character in the concatenated string\n    for char in s:\n        # If the character is an open parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a close parenthesis, check if it matches the top of the stack\n        elif char == ')':\n            if len(stack) == 0 or stack[-1] != '(':\n                return 'No'\n            else:\n                stack.pop()\n    \n    # If there are any open parentheses left in the stack, the string is not good\n    if len(stack) > 0:\n        return 'No'\n    else:\n        return 'Yes'\n",
        "test": "assert match_parens(['(', '())']) == 'Yes'",
        "num_ids": 2004,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    return sorted(arr, reverse=True)[:k]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through the list with an index i\n    for i in range(len(lst)):\n        # Check if the i-th element is odd and the index is even\n        if lst[i] % 2 == 1 and i % 2 == 0:\n            # Add the i-th element to the total sum\n            total += lst[i]\n    \n    # Return the total sum\n    return total\n",
        "test": "assert solution([5, 8, 7, 1]) == 12, \"Error in solution: incorrect output\"",
        "num_ids": 1140,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k,\n    return the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    total_sum = 0\n    count = 0\n\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n            count += 1\n\n    return total_sum\n",
        "test": "assert add_elements([1000, 1000, 1000, 1000, 1000], 5) == 0",
        "num_ids": 1578,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def collatz(n):\n    \"\"\"\n    Given a positive integer n, return the Collatz sequence starting from n.\n    \"\"\"\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3*n + 1\n        sequence.append(n)\n    return sequence\n\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    collatz_list = collatz(n)\n    odd_list = [x for x in collatz_list if x % 2 != 0]\n    return sorted(odd_list)\n",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 1673,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef valid_date(date):\n    \"\"\"\n    Checks whether the given date string is valid or not.\n\n    Args:\n    date (str): Date string in the format 'mm-dd-yyyy'.\n\n    Returns:\n    bool: True if the date string is valid, False otherwise.\n    \"\"\"\n    if not date:\n        return False\n\n    # Check if the date string is in the correct format\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n        return False\n\n    # Extract month, day and year from the date string\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid for the given month and year\n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            # Leap year\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True\n",
        "test": "assert valid_date('15-01-2012') == False",
        "num_ids": 1897,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 1:\n                count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 815,
        "indeed": true
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n\n    # check if list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # check if list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n\n    # check if list has more than 1 duplicate of the same number\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            return False\n\n    # if all conditions are met, return True\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1351,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1809,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0. \n    Note: return None for empty arr.\n    \n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    \n    # check if array is empty\n    if not arr:\n        return None\n    \n    # initialize variables for product of signs and sum of magnitudes\n    product_signs = 1\n    sum_magnitudes = 0\n    \n    # iterate through array and calculate product of signs and sum of magnitudes\n    for num in arr:\n        product_signs *= 1 if num > 0 else -1 if num < 0 else 0\n        sum_magnitudes += abs(num)\n    \n    # return sum of magnitudes multiplied by product of signs\n    return sum_magnitudes * product_signs\n",
        "test": "assert prod_signs([0, 1]) == 0",
        "num_ids": 1255,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from collections import defaultdict\nfrom queue import PriorityQueue\n\ndef minPath(grid, k):\n    n = len(grid)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    visited = {(0, 0)}\n    \n    def neighbors(x, y):\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                yield nx, ny\n    \n    def dfs(x, y, path, path_value):\n        nonlocal k\n        if len(path) == k:\n            return path_value\n        for nx, ny in neighbors(x, y):\n            if (nx, ny) not in visited:\n                visited.add((nx, ny))\n                path.append(grid[nx][ny])\n                return dfs(nx, ny, path, path_value + grid[nx][ny])\n        return None\n    \n    def bfs(start):\n        queue = PriorityQueue()\n        queue.put((0, start, (0, start), [grid[start[0]][start[1]], 1]))\n        while not queue.empty():\n            total_value, (x, y), path, path_value = queue.get()\n            if len(path) == k:\n                return path_value\n            for nx, ny in neighbors(x, y):\n                if (nx, ny) not in visited:\n                    visited.add((nx, ny))\n                    new_path = path.copy()\n                    new_path.append(grid[nx][ny])\n                    queue.put((total_value + grid[nx][ny], (nx, ny), new_path, path_value + grid[nx][ny]))\n        return None\n    \n    start = (0, 0)\n    path = dfs(start[0], start[1], [grid[start[0]][start[1]]], 1)\n    if path is None:\n        path = bfs(start)\n    \n    return path",
        "test": "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
        "num_ids": 2525,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence. \n    Tribonacci sequence is defined by the recurrence: \n    tri(1) = 3 \n    tri(n) = 1 + n / 2, if n is even. \n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd. \n    For example: \n    tri(2) = 1 + (2 / 2) = 2 \n    tri(4) = 3 \n    tri(3) = tri(2) + tri(1) + tri(4) \n               = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence. \n    Examples: \n    tri(3) = [1, 3, 2, 8] \n    \"\"\"\n    trib = [1, 3, 2]\n    if n <= 2:\n        return trib[:n+1]\n    else:\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                trib.append(1 + i / 2)\n            else:\n                trib.append(trib[-1] + trib[-2] + trib[-3])\n        return trib[:n+1]\n",
        "test": "assert tri(1) == [1, 3]",
        "num_ids": 1991,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    all_even = True\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            all_even = False\n        n //= 10\n    return product if not all_even else 0\n",
        "test": "assert digits(1) == 1",
        "num_ids": 883,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) % 2 == 0\n",
        "test": "assert is_nested('[[]]') == True",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \n    \"\"\"\n    \n    # import the ceil function from the math module\n    from math import ceil\n    \n    # round each element in the list to the upper int(Ceiling)\n    lst = [ceil(num) for num in lst]\n    \n    # calculate the sum of squared numbers in the list\n    result = sum([num**2 for num in lst])\n    \n    return result\n",
        "test": "assert sum_squares([1, 2, 3]) == 14",
        "num_ids": 1375,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty\n    if not txt:\n        return False\n    \n    # Split the string into words and get the last word\n    words = txt.split()\n    last_word = words[-1]\n    \n    # Check if the last word is not empty and its last character is an alphabetical character\n    if last_word and last_word[-1].isalpha():\n        # Check if the last word is a single character or not part of a larger word\n        if len(last_word) == 1 or txt.endswith(\" \" + last_word):\n            return True\n    \n    return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def can_arrange(arr):\n    if len(arr) < 2:\n        return -1\n\n    last_valid_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            if i-1 == last_valid_index:\n                return i-1\n            else:\n                return last_valid_index\n        else:\n            last_valid_index = i\n\n    return -1\n",
        "test": "assert can_arrange([1, 2, 3]) == -1",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. \n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    largest_neg = None\n    smallest_pos = None\n\n    for num in lst:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n        elif num > 0:\n            if smallest_pos is None or num < smallest_pos:\n                smallest_pos = num\n\n    return largest_neg, smallest_pos\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 1326,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n        a = float(a)\n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        b = float(b)\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n % 2 == 1 or n < 8:\n        return False\n    for i in range(2, int(n/2)+1, 2):\n        if (n-i) % 2 == 0:\n            return True\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False, \"Test case 1 failed\"",
        "num_ids": 1191,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    space_count = 0\n    for i in range(len(text)):\n        if text[i] == \" \":\n            space_count += 1\n            if space_count >= 3:\n                new_text = new_text[:-1] + \"-\"\n            else:\n                new_text += \"_\"\n        else:\n            new_text += text[i]\n            space_count = 0\n    return new_text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Split the file name into two parts: before and after the dot\n    parts = file_name.split('.')\n    # Check if there are exactly two parts (before and after the dot)\n    if len(parts) != 2:\n        return 'No'\n    # Check if the part before the dot is not empty and starts with a latin alphapet letter\n    before_dot = parts[0]\n    if not before_dot or not (before_dot[0].isalpha() and (before_dot[0].isascii() and ord(before_dot[0]) >= 97 and ord(before_dot[0]) <= 122) or before_dot[0].isupper()):\n        return 'No'\n    # Check if the part after the dot is one of the allowed extensions\n    after_dot = parts[1]\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    # Check if there are more than three digits in the file name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    # If all the conditions are met, return 'Yes'\n    return 'Yes'\n",
        "test": "assert file_name_check(\"1example.dll\") == \"No\"",
        "num_ids": 2474,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total\n",
        "test": "assert sum_squares([1,2,3]) == 6",
        "num_ids": 1212,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 1592,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def simplify(x, n):\n    x_num, x_denom = [int(x) for x in x.split('/')]\n    n_num, n_denom = [int(n) for n in n.split('/')]\n    product = x_num * n_num / (x_denom * n_denom)\n    return product.is_integer()\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 1007,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits. \n    Note: if there are several items with similar sum of their digits, \n    order them based on their index in original list.\n    \n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \n    def sum_of_digits(n):\n        \"\"\"\n        Returns the sum of digits of an integer n.\n        \"\"\"\n        return sum(int(d) for d in str(abs(n)))\n    \n    # Calculate the sum of digits for each number in the list\n    num_points = [(i, sum_of_digits(num)) for i, num in enumerate(nums)]\n    \n    # Sort the list based on the sum of digits and then the index\n    num_points.sort(key=lambda x: (x[1], x[0]))\n    \n    # Extract the sorted list of numbers\n    sorted_nums = [num for _, num in num_points]\n    \n    return sorted_nums\n",
        "test": "assert order_by_points([1, 3, 2, 5, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 1649,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    \n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 1286,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    result = []\n    \n    for i in range(index1 + 1, index2):\n        result.append(planets[i])\n    \n    return tuple(result)",
        "test": "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
        "num_ids": 1400,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sorted_list_sum(lst):\n    # Filter the list to keep only strings with even lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list by length of each word, and then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1420,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"\n    A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    \n    # function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # check if n is prime\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34, \"Incorrect output for x_or_y(7, 34, 12)\"",
        "num_ids": 1033,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    \n    sum_of_squares = 0\n    for num in lst:\n        if type(num) == int and num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    \n    return sum_of_squares\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 1505,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was.\n    If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1592,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = None\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strongest_strength is None or strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"",
        "num_ids": 2099,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    # Find all possible rotations of b\n    b_rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check if any of the rotations are substrings of a\n    for rotation in b_rotations:\n        if rotation in a:\n            return True\n    \n    # If none of the rotations are substrings of a, return False\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 1052,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def int_to_mini_roman(number):\n    roman_mapping = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    result = ''\n    for value, roman_char in roman_mapping:\n        while number >= value:\n            result += roman_char\n            number -= value\n    return result\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 1843,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise. \n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    '''\n    # check if all sides are positive numbers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    # check if all sides satisfy the triangle inequality theorem\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    # check if the triangle satisfies the Pythagorean theorem\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(1, 2, 3) == False",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words.\n    Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    \n    max_word = \"\"\n    max_unique = 0\n    \n    for word in words:\n        unique = len(set(word))\n        if unique > max_unique:\n            max_unique = unique\n            max_word = word\n        elif unique == max_unique:\n            if word < max_word:\n                max_word = word\n                \n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    \n    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 2255,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = \"\"\n    for i in range(len(operator)):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n    return eval(expression)\n",
        "test": "assert do_algebra(['+'], [1, 2]) == 3",
        "num_ids": 1990,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solve(s):\n    has_letter = False\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 1194,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    # check if text is empty\n    if text == '':\n        return None\n\n    # create an md5 hash object\n    md5_hash = hashlib.md5()\n\n    # update the hash object with the text\n    md5_hash.update(text.encode())\n\n    # return the hex digest of the md5 hash\n    return md5_hash.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    evens = []\n    for i in range(a, b+1):\n        for digit in str(i):\n            if digit.isdigit() and int(digit) % 2 == 0:\n                evens.append(int(digit))\n    return sorted(set(evens))\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1133,
        "indeed": false
    }
]