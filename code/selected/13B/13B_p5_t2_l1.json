[
    {
        "number": 0,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False, \"has_close_elements([1.0, 2.0, 3.0], 0.5) should return False\"",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses.\n    Your goal is to separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    \n    result = []\n    current_group = \"\"\n    count = 0\n    \n    for char in paren_string:\n        if char == \"(\":\n            count += 1\n            current_group += char\n        elif char == \")\":\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = \"\"\n        else:\n            # ignore spaces\n            continue\n    \n    return result\n",
        "test": "assert separate_paren_groups('()') == ['()']",
        "num_ids": 1735,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n    # Find the integer part of the number\n    integer_part = int(number)\n\n    # Calculate the decimal part of the number\n    decimal_part = number - integer_part\n\n    return decimal_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 708,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    deviation = sum(deviations) / len(numbers)\n    return deviation ",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
        "num_ids": 1030,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
        "num_ids": 1587,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [string for string in strings if substring in string]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    total_sum = 0\n    total_product = 1\n\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n\n    return total_sum, total_product\n",
        "test": "assert sum_product([1, 2, 3, 4]) == (10, 24)",
        "num_ids": 986,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_val = numbers[0]\n    result = [max_val]\n    \n    for num in numbers[1:]:\n        if num > max_val:\n            max_val = num\n        result.append(max_val)\n    \n    return result\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 1207,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    \n    def is_palindrome(string: str) -> bool:\n        \"\"\" Test if given string is a palindrome \"\"\"\n        return string == string[::-1]\n    \n    # Check if the string is already a palindrome\n    if is_palindrome(string):\n        return string\n    \n    # Find the longest postfix of the string that is a palindrome\n    longest_palindrome_suffix = string\n    while not is_palindrome(longest_palindrome_suffix):\n        longest_palindrome_suffix = longest_palindrome_suffix[:-1]\n    \n    # Find the prefix that comes before the palindromic suffix\n    prefix = string[:len(string) - len(longest_palindrome_suffix)]\n    \n    # Build the shortest palindrome\n    return prefix + longest_palindrome_suffix + prefix[::-1]\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    max_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(max_str):\n            max_str = string\n    return max_str\n",
        "test": "assert longest([]) == None",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 835,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "test": "assert all_prefixes('') == []",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\"Given a string, find out how many distinct characters (regardless of case) does it consist of\"\"\"\n    return len(set(string.lower()))\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    beats = []\n    for note in music_string.split():\n        beats.append(notes[note])\n    return beats\n",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] ",
        "num_ids": 1421,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 872,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n        Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n        Return the string with numbers sorted from smallest to largest\n        >>> sort_numbers('three one five')\n        'one three five'\n    \"\"\"\n    # Convert the input string to a list of numberals\n    numberals = numbers.split()\n    \n    # Define a function to convert a numberal to an integer\n    def to_int(numberal: str) -> int:\n        if numberal == 'zero':\n            return 0\n        elif numberal == 'one':\n            return 1\n        elif numberal == 'two':\n            return 2\n        elif numberal == 'three':\n            return 3\n        elif numberal == 'four':\n            return 4\n        elif numberal == 'five':\n            return 5\n        elif numberal == 'six':\n            return 6\n        elif numberal == 'seven':\n            return 7\n        elif numberal == 'eight':\n            return 8\n        elif numberal == 'nine':\n            return 9\n        else:\n            raise ValueError(f\"Invalid numberal: {numberal}\")\n    \n    # Sort the list of numberals based on their integer values\n    sorted_numberals = sorted(numberals, key=lambda x: to_int(x))\n    \n    # Convert the sorted list of numberals back to a space-delimited string\n    return ' '.join(sorted_numberals)\n",
        "test": "assert sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'",
        "num_ids": 1558,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    min_diff = float('inf')\n    smallest = float('inf')\n    largest = float('-inf')\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                smallest = min(numbers[i], numbers[j])\n                largest = max(numbers[i], numbers[j])\n\n    return (smallest, largest)\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 2024,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \n    Example usage:\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n\n    rescaled_numbers = [(num - min_num) / range_num for num in numbers]\n\n    return rescaled_numbers\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1482,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n",
        "test": "assert largest_divisor(15) == 5 ",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 25,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 1270,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(dict.fromkeys(numbers))\n",
        "test": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = ''\n    for s in strings:\n        result += s\n    return result\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n    return [string for string in strings if string.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 967,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 954,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "The example usage provided in the comments demonstrates the use of these functions. The `find_zero` function returns the value of `x` at which the polynomial evaluated at `x` equals zero for the given coefficients. The `poly` function is used to evaluate the polynomial at a given value of `x`. ",
        "test": "assert find_zero([-6, 11, -6, 1]) == round(1.0, 2)",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    \n    l_copy = l.copy()\n    l_copy = [x for i, x in enumerate(l_copy) if i % 3 != 0]\n    \n    l_copy.extend([x for i, x in enumerate(l) if i % 3 == 0])\n    \n    l_copy.sort(key=lambda x: l.index(x))\n    \n    return l_copy\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1581,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 738,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            num_str = str(i)\n            count += num_str.count('7')\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 783,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    l_copy = l.copy()\n    even_values = [l_copy[i] for i in range(0, len(l_copy), 2)]\n    even_values.sort()\n    for i in range(0, len(l_copy), 2):\n        l_copy[i] = even_values.pop(0)\n    return l_copy\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1258,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # reverse cycle of each group.\n    groups = [group[2] + group[1] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"hello world\")) == \"hello world\"",
        "num_ids": 1459,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    def is_prime(num: int) -> bool:\n        \"\"\"\n        is_prime checks if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n: int) -> int:\n        \"\"\"\n        fibonacci generates the n-th Fibonacci number.\n        \"\"\"\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i-1)\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Remove duplicates from the list\n    l = list(set(l))\n\n    # Check if there are at least three elements in the list\n    if len(l) < 3:\n        return False\n\n    # Create a dictionary to store the counts of the elements in the list\n    element_count = {}\n    for element in l:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n\n    # Check if there are three elements that sum to zero\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if -(l[i] + l[j]) in element_count:\n                return True\n\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1982,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    count = 0\n    cars_left = set(range(n))\n    cars_right = set(range(n))\n    while cars_left and cars_right:\n        left_car = min(cars_left)\n        right_car = max(cars_right)\n        if left_car == right_car:\n            count += 1\n        else:\n            cars_left.remove(left_car)\n            cars_right.remove(right_car)\n    return count\n",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 1148,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1017,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1195,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    while x > 0:\n        remainder = x % base\n        if remainder < 10:\n            result = str(remainder) + result\n        else:\n            result = chr(ord('A') + remainder - 10) + result\n        x //= base\n    return result\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "test": "assert triangle_area(5, 3) == 7.5 # Should return 7.5",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    # initialize the first 4 elements of the sequence\n    fib4_seq = [0, 0, 2, 0]\n\n    # compute the remaining elements of the sequence\n    for i in range(4, n+1):\n        fib4_seq.append(fib4_seq[i-1] + fib4_seq[i-2] + fib4_seq[i-3] + fib4_seq[i-4])\n\n    return fib4_seq[n]\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 942,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    10.0\n    \"\"\"\n\n    sorted_l = sorted(l)\n    mid = len(sorted_l) // 2\n\n    if len(sorted_l) % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # Convert the string to lowercase and remove non-alphanumeric characters\n    text = ''.join(c for c in text.lower() if c.isalnum())\n    # Check if the first half of the string is equal to the second half in reverse order\n    return text[:len(text)//2] == text[-(len(text)//2):][::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n // 2, p) * modp(n // 2, p) % p\n    else:\n        return (modp((n - 1) // 2, p) * modp((n - 1) // 2, p) * 2) % p\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 809,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"\n    Return True if all numbers in the list l are below threshold t.\n\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    # Convert the strings to sets to remove duplicates and sort them\n    set0 = sorted(set(s0))\n    set1 = sorted(set(s1))\n\n    # Check if the two sets are the same\n    return set0 == set1\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 1344,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_n_minus_1 = fib(n-1)\n        fib_n_minus_2 = fib(n-2)\n        return fib_n_minus_1 + fib_n_minus_2",
        "test": "assert fib(10) == 55, \"fib(10) should be 55\"",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n        return True\n    elif all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    else:\n        return False\n",
        "test": "assert monotonic([1, 20, 4, 10]) == False",
        "num_ids": 1264,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    return sorted(list(common_elements))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1183,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n.\n    Assume n > 1 and is not a prime.\n\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 1248,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_to_n(n: int):\n    \"\"\"\n    This function sums numbers from 1 to n.\n    \"\"\"\n    return (n * (n + 1)) // 2\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Initialize an empty list to store the coefficients of the derivative\n    result = []\n    \n    # Loop through the coefficients of the polynomial, starting from the second one\n    for i in range(1, len(xs)):\n        # Multiply each coefficient by the corresponding power of x and add it to the result list\n        result.append(xs[i] * i)\n    \n    # Return the result list\n    return result\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(0) == 0",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        elif char.lower() == 'y' and s.lower()[-1] == 'y':\n            count += 1\n    return count",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits,\n    return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    \n    # Convert the integer to a string and convert each character to an integer\n    x_str = str(x)\n    x_int = [int(char) for char in x_str]\n    \n    # Calculate the number of digits in the integer\n    num_digits = len(x_int)\n    \n    # If the shift is greater than the number of digits, reverse the digits and return the result\n    if shift > num_digits:\n        x_int.reverse()\n        return ''.join([str(digit) for digit in x_int])\n    \n    # Otherwise, circular shift the digits right by the specified amount\n    shifted_digits = x_int[-shift:] + x_int[:-shift]\n    return ''.join([str(digit) for digit in shifted_digits])\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 1236,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    \n    # initialize a variable to store the sum of ASCII codes\n    sum = 0\n    \n    # loop through each character in the string\n    for char in s:\n        # check if the character is an uppercase letter\n        if char.isupper():\n            # convert the uppercase letter to its ASCII code\n            ascii_code = ord(char)\n            # add the ASCII code to the sum\n            sum += ascii_code\n    \n    # return the sum of ASCII codes\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    count = 0\n    for word in s.split():\n        if word.isdigit():\n            count += int(word)\n    return n - count\n",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8, \"Incorrect output for fruit_distribution('5 apples and 6 oranges', 19)\"",
        "num_ids": 1883,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    if not arr:\n        return []\n\n    even_values = [x for x in arr if x % 2 == 0]\n\n    if not even_values:\n        return []\n\n    min_value = min(even_values)\n    min_index = arr.index(min_value)\n\n    return [min_value, min_index]",
        "test": "assert pluck([1,2,3]) == [2, 1]",
        "num_ids": 1914,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list. \n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n    # create a dictionary to store the frequency of each integer\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # iterate through the dictionary to find the required integer\n    max_num = -1\n    for num in freq:\n        if num > 0 and freq[num] >= num:\n            if num > max_num:\n                max_num = num\n\n    return max_num\n",
        "test": "assert search([4, 1, 2, 2, 3, 1]) == 2",
        "num_ids": 1431,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def strange_sort_list(lst):\n    if len(lst) == 0:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    i = 0\n    while len(sorted_lst) > 0:\n        if i % 2 == 0:\n            result.append(sorted_lst.pop(0))\n        else:\n            result.append(sorted_lst.pop())\n        i += 1\n    return result\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 1258,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.  \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    # check if the three sides form a valid triangle\n    if a + b > c and b + c > a and c + a > b:\n        return round(area, 2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00, \"Incorrect area\"",
        "num_ids": 1342,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_palindrome(lst):\n    return lst == lst[::-1]\n\ndef will_it_fly(q,w):\n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def smallest_change(arr):\n    n = len(arr)\n    i, j = 0, n-1\n    count = 0\n    while i < j:\n        if arr[i] != arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    return count\n",
        "test": "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1, \"Test case 2 failed\"",
        "num_ids": 1440,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 1557,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Returns True if the given number is the multiplication of 3 prime numbers and False otherwise.\n\n    :param a: An integer less than 100.\n    :return: True or False.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for prime in primes:\n        if a % prime == 0:\n            a /= prime\n            if a == 1:\n                return True\n    return False\n",
        "test": "assert is_multiply_prime(12) == False, \"12 should be False\"",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    This function takes in two integers x and n as input and returns True if x is a simple power of n and False otherwise.\n    A simple power of n is a power of n where the exponent is an integer, e.g. 8 = 2^3, 16 = 2^4, etc.\n    \"\"\"\n    if n == 1:\n        return x == 1\n    if x == 1:\n        return True\n    if x == 0:\n        return False\n    return (x % n == 0) and (is_simple_power(x/n, n))\n",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number. \n    Note: you may assume the input is always valid. \n    Examples: \n    iscube(1) ==> True \n    iscube(2) ==> False \n    iscube(-1) ==> True \n    iscube(64) ==> True \n    iscube(0) ==> True \n    iscube(180) ==> False \n    '''\n    import math\n    return a == int(round(math.pow(round(math.pow(a, 1/3)), 3)))\n",
        "test": "assert iscube(1) == True",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    primes = [2, 3, 5, 7, 11, 13]\n    hex_to_decimal = {\n        '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15\n    }\n\n    count = 0\n    for digit in num:\n        dec_value = hex_to_decimal.get(digit.upper(), None)\n        if dec_value is not None and dec_value in primes:\n            count += 1\n\n    return count\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 3148,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string. \n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_happy(s):\n    \"\"\"\n    Checks if a given string is happy.\n\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n\n    :param s: A string to be checked.\n    :return: True if the string is happy, False otherwise.\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i:i+3] in s[i+3:]:\n            return False\n    \n    return True\n",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n            GPA    |   Letter grade\n            4.0         A+\n            > 3.7         A \n            > 3.3         A- \n            > 3.0         B+\n            > 2.7         B \n            > 2.3         B-\n            > 2.0         C+\n            > 1.7         C\n            > 1.3         C-\n            > 1.0         D+ \n            > 0.7         D \n            > 0.0         D-\n            0.0         E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    def convert_to_letter_grade(gpa):\n        if gpa >= 4.0:\n            return \"A+\"\n        elif gpa > 3.7:\n            return \"A\"\n        elif gpa > 3.3:\n            return \"A-\"\n        elif gpa > 3.0:\n            return \"B+\"\n        elif gpa > 2.7:\n            return \"B\"\n        elif gpa > 2.3:\n            return \"B-\"\n        elif gpa > 2.0:\n            return \"C+\"\n        elif gpa > 1.7:\n            return \"C\"\n        elif gpa > 1.3:\n            return \"C-\"\n        elif gpa > 1.0:\n            return \"D+\"\n        elif gpa > 0.7:\n            return \"D\"\n        elif gpa > 0.0:\n            return \"D-\"\n        else:\n            return \"E\"\n    \n    return [convert_to_letter_grade(g) for g in grades]\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 3543,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_length(string):\n    \"\"\"Check if the length of a string is a prime number\"\"\"\n    length = len(string)\n    return is_prime(length)\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**n):\n        if i % 10 == 1 or i // 10**(n-1) == 1:\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    \n    # Convert the integer to a string\n    N_str = str(N)\n    \n    # Initialize the binary sum to 0\n    binary_sum = 0\n    \n    # Iterate through the digits of the string representation of N\n    for digit in N_str:\n        # Convert the digit to an integer and add it to the binary sum\n        binary_sum += int(digit)\n    \n    # Convert the binary sum to a binary string\n    binary_sum_str = bin(binary_sum)[2:]\n    \n    return binary_sum_str",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n",
        "test": "assert add([4, 2, 6, 7]) == 2 ",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n\n    return ' '.join(ordered_words)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, \n    which is similar to matrix, however, unlike matrices, \n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list, \n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that \n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order. \n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row([], 1) == []",
        "num_ids": 2028,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sorted_array = array[:]  # make a copy of the array\n    n = len(sorted_array)\n    if n == 0 or n == 1:\n        return sorted_array\n    else:\n        if sum(sorted_array[0], sorted_array[-1]) % 2 == 0:  # even sum\n            sorted_array.sort(reverse=True)  # sort in descending order\n        else:\n            sorted_array.sort()  # sort in ascending order\n        return sorted_array\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 1793,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n    # Define the rotated alphabet\n    rotated_alphabet = alphabet[2*2:] + alphabet[:2*2]\n\n    # Create a translation table to map each letter to its rotated version\n    translation_table = str.maketrans(alphabet, rotated_alphabet)\n\n    # Encrypt the string using the translation table\n    encrypted_string = s.translate(translation_table)\n\n    return encrypted_string\n",
        "test": "assert encrypt('hi') == 'lm'",
        "num_ids": 1489,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1199,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_bored(S):\n    boredoms = 0\n    sentences = S.split('.')\n    sentences.append('')  # add an empty sentence to process the last one\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0] == 'I':\n            boredoms += 1\n    return boredoms\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def any_int(x, y, z):\n    # Check if all three numbers are integers\n    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        # Check if one of the numbers is equal to the sum of the other two\n        if (x == y + z or y == x + z or z == x + y):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += chr((ord(letter)+2-97)%26+97)\n        else:\n            if letter.isupper():\n                new_message += letter.lower()\n            elif letter.islower():\n                new_message += letter.upper()\n            else:\n                new_message += letter\n    return new_message\n",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of n.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    if largest_prime is None:\n        return 0\n    return sum_of_digits(largest_prime)",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 1516,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False. \n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    # check if dictionary is empty\n    if not dict:\n        return False\n\n    # initialize variables to keep track of whether keys are in lower or upper case\n    is_lower = True\n    is_upper = True\n\n    # loop through keys in the dictionary\n    for key in dict.keys():\n        # check if key is a string\n        if not isinstance(key, str):\n            return False\n        # check if key is in lower case\n        if key.islower() and is_lower:\n            is_lower = True\n            is_upper = False\n        # check if key is in upper case\n        elif key.isupper() and is_upper:\n            is_lower = False\n            is_upper = True\n        # if key is not in lower or upper case, return False\n        else:\n            return False\n\n    # if all keys are in either lower or upper case, return True\n    return True\n",
        "test": "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False",
        "num_ids": 1604,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n. \n    \"\"\"\n    # define a helper function to check if a number is prime\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    # initialize an empty list to store the prime numbers\n    primes = []\n    \n    # loop through the numbers from 2 to n-1\n    for i in range(2, n):\n        # check if the number is prime\n        if is_prime(i):\n            # if it is prime, append it to the list of primes\n            primes.append(i)\n    \n    # return the list of primes\n    return primes\n",
        "test": "assert count_up_to(5) == [2,3]",
        "num_ids": 1368,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def multiply(a, b):\n    \"\"\"\n    Returns the product of the unit digits of a and b.\n    \"\"\"\n    # Get the last digit of a and b\n    a_last_digit = a % 10\n    b_last_digit = b % 10\n\n    # Multiply the last digits\n    product = a_last_digit * b_last_digit\n\n    # If either a or b is negative, make sure the product is negative too\n    if a < 0 or b < 0:\n        product = -product\n\n    return product\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper('aBCdEf') == 1",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def closest_integer(value):\n    num = float(value)\n    int_part = int(num)\n    decimal_part = num - int_part\n    \n    if decimal_part >= 0.5:\n        return int_part + 1\n    elif decimal_part <= -0.5:\n        return int_part - 1\n    else:\n        return int_part\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1319,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    pile = []\n    pile.append(n)\n\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        pile.append(n)\n    \n    return pile\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string into words based on commas or spaces\n    words = s.split(',')\n    words = [word.strip() for word in words]\n    words = ' '.join(words).split()\n    \n    # Return the array of words\n    return words\n",
        "test": "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
        "num_ids": 993,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Check if x is greater than y\n    if x > y:\n        return -1\n    \n    # Initialize the even number variable\n    even_num = -1\n    \n    # Loop through all even numbers in the range [x, y] inclusive\n    for i in range(x, y+1, 2):\n        # Update the even number variable\n        if i > even_num:\n            even_num = i\n    \n    # Return the even number variable\n    return even_num\n",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n\n    avg = round(total / count)\n    binary_avg = bin(avg)\n\n    return binary_avg",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if not any(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    result.sort()\n    return result\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 1299,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    \n             -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]  \n             -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n    \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n             -> sort arr -> [-1, 1, 55]\n             -> reverse arr -> [55, 1, -1]\n    return = ['One']\n    \"\"\"\n    \n    if not arr:\n        return []\n    \n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    arr = sorted([x for x in arr if 1 <= x <= 9])\n    arr.reverse()\n    \n    result = []\n    for x in arr:\n        result.append(names[x-1])\n    \n    return result\n",
        "test": "assert by_length([]) == []",
        "num_ids": 2503,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result\n",
        "test": "assert f(0) == []",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_palindrome = 0\n    odd_palindrome = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_palindrome += 1\n            else:\n                odd_palindrome += 1\n\n    return (even_palindrome, odd_palindrome)\n",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 1465,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0. If a number is negative,\n    then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            digits_sum = sum(int(digit) for digit in str(num))\n            if digits_sum > 0:\n                count += 1\n        elif num < 0:\n            digits_sum = sum(int(digit) for digit in str(num)) - 1\n            if digits_sum > 0:\n                count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0, \"Empty array case\"",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                    array by performing any number of right shift operations.\n                    \n    \"\"\"\n\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n\n    for i in range(len(arr)):\n        if arr[i] != sorted_arr[i]:\n            return False\n\n    return True",
        "test": "assert move_one_ball([]) == True",
        "num_ids": 1865,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"\n    Checks if it's possible to exchange elements between lst1 and lst2 to make all the elements of lst1 even.\n\n    :param lst1: A list of numbers.\n    :param lst2: Another list of numbers.\n    :return: \"YES\" if it's possible to exchange elements to make all the elements of lst1 even, \"NO\" otherwise.\n    \"\"\"\n    even_lst1 = []\n    odd_lst1 = []\n\n    for num in lst1:\n        if num % 2 == 0:\n            even_lst1.append(num)\n        else:\n            odd_lst1.append(num)\n\n    if len(even_lst1) == len(lst1):\n        return \"YES\"\n\n    for num in lst2:\n        if num % 2 == 0 and odd_lst1:\n            odd_lst1.remove(odd_lst1[0])\n        elif num % 2 != 0 and not odd_lst1:\n            return \"NO\"\n\n    if not odd_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count. \n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    if not test:\n        return {}\n    \n    words = test.split()\n    freq = {}\n    max_freq = 0\n    \n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n            \n        if freq[word] > max_freq:\n            max_freq = freq[word]\n    \n    result = {}\n    \n    for word in freq:\n        if freq[word] == max_freq:\n            result[word] = freq[word]\n            \n    return result\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 2141,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def reverse_delete(s, c):\n    # create a set of characters to be removed from the string\n    remove_chars = set(c)\n\n    # create a new string by removing the characters in the remove_chars set\n    new_s = ''.join(filter(lambda x: x not in remove_chars, s))\n\n    # check if the new_s is palindrome\n    is_palindrome = True if new_s == new_s[::-1] else False\n\n    # return a tuple containing the new_s and is_palindrome\n    return (new_s, is_palindrome)\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 1032,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for char in lst[i]:\n            if char in ['1', '3', '5', '7', '9']:\n                count += 1\n        result.append(f\"the number of odd elements in the string {i} of the input is {count}.\")\n    return result\n",
        "test": "assert odd_count(['3',\"11111111\"]) == ['the number of odd elements 1n the str1ng 1 of the 1nput.',",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n",
        "test": "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well, \n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n    \n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n        \n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n        \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n        \n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    n = len(grid)\n    m = len(grid[0])\n\n    def dfs(i, j, count):\n        if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == 0:\n            return count\n        grid[i][j] = 0\n        count += 1\n        count = dfs(i+1, j, count)\n        count = dfs(i-1, j, count)\n        count = dfs(i, j+1, count)\n        count = dfs(i, j-1, count)\n        count = dfs(i+1, j+1, count)\n        count = dfs(i-1, j-1, count)\n        count = dfs(i+1, j-1, count)\n        count = dfs(i-1, j+1, count)\n        return count\n\n    max_count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                count = dfs(i, j, 0)\n                max_count = max(max_count, count)\n\n    return math.ceil(max_count / capacity)\n",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
        "num_ids": 2561,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Convert each integer to its binary representation\n    binary_arr = [bin(num)[2:] for num in arr]\n    \n    # Count the number of ones in each binary representation\n    count_ones = [bin(num).count('1') for num in arr]\n    \n    # Sort the array based on number of ones in ascending order\n    sorted_arr = [x for _, x in sorted(zip(count_ones, arr))]\n    \n    # Sort the array based on decimal value for elements with same number of ones\n    sorted_arr.sort()\n    \n    return sorted_arr\n",
        "test": "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 1732,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        num_consonants = 0\n        for letter in word:\n            if letter.lower() not in 'aeiou':\n                num_consonants += 1\n        if num_consonants == n:\n            result.append(word)\n    return result",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 1477,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    # Iterate through the word from right to left\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            # Check if there's a consonant to the right of the vowel\n            if i != len(word)-1 and word[i+1] not in vowels:\n                return word[i]\n    # If no vowel met the condition, return empty string\n    return \"\"\n",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def match_parens(lst):\n    # Create two stacks to keep track of open parentheses\n    stack1 = []\n    stack2 = []\n    \n    # Iterate over the list of strings\n    for s in lst:\n        # For each character in the string, add it to the appropriate stack\n        for c in s:\n            if c == '(':\n                stack1.append(c)\n            else:\n                stack2.append(c)\n    \n    # Check if the stacks are of equal length\n    if len(stack1) != len(stack2):\n        return 'No'\n    \n    # If the stacks are of equal length, check if the strings can be concatenated\n    # to form a good string by balancing parentheses\n    good_str = ''\n    while stack1:\n        c1 = stack1.pop()\n        c2 = stack2.pop()\n        if c1 == '(' and c2 == ')':\n            good_str += '()'\n        else:\n            return 'No'\n    \n    # If the good_str is of length equal to the concatenation of the input strings,\n    # then the result is good, otherwise it's not good\n    return 'Yes' if len(good_str) == len(lst[0]) + len(lst[1]) else 'No'\n",
        "test": "assert match_parens(['', ')']) == 'No'",
        "num_ids": 1897,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Return the last k elements of the sorted array\n    return arr[-k:]\n",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 1596,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the list and add the odd elements at even positions to the sum variable\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum += lst[i]\n    \n    # Return the sum of odd elements at even positions\n    return sum\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    sum = 0\n    for i in range(k):\n        if arr[i] < 100 and arr[i] > -100:\n            sum += arr[i]\n\n    return sum",
        "test": "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24 ",
        "num_ids": 1525,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def collatz(n):\n    \"\"\"\n    Given a positive integer n, return the Collatz sequence as a list.\n    \"\"\"\n    sequence = []\n    while n != 1:\n        sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sequence\n\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    collatz_sequence = collatz(n)\n    odd_collatz = sorted([num for num in collatz_sequence if num % 2 == 1])\n    return odd_collatz\n",
        "test": "assert get_odd_collatz(2) == [1]",
        "num_ids": 1658,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Check if the date string has the correct format: mm-dd-yyyy\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    # Check if the number of days is valid for the given month and year\n    days_in_month = [0, 31, 29 if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if not 1 <= month <= 12 or not 1 <= day <= days_in_month[month]:\n        return False\n\n    return True\n",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 2509,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 != 0:\n                count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sorted(lst):\n    prev = None\n    for num in lst:\n        if prev is not None and num < prev:\n            return False\n        if lst.count(num) > 1:\n            return False\n        prev = num\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Check if the two intervals intersect\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length of the intersection is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if len(arr) == 0:\n        return None\n\n    product = 1\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n\n    return sum(abs(num) for num in arr) * product\n",
        "test": "assert prod_signs([0, 1]) == 0",
        "num_ids": 1236,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    from queue import Queue\n\n    def is_valid(x, y):\n        return 0 <= x < len(grid) and 0 <= y < len(grid)\n\n    def bfs(grid, k):\n        visited = set()\n        queue = Queue()\n        queue.put((0, 0))\n        visited.add((0, 0))\n        step = 0\n\n        while not queue.empty():\n            for _ in range(queue.qsize()):\n                x, y = queue.get()\n\n                if step == k:\n                    return visited\n\n                for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    nx, ny = x + dx, y + dy\n                    if is_valid(nx, ny) and (nx, ny) not in visited:\n                        visited.add((nx, ny))\n                        queue.put((nx, ny))\n            step += 1\n\n    def get_path_values(grid, path):\n        path_values = []\n        for x, y in path:\n            path_values.append(grid[x][y])\n        return path_values\n\n    def min_path(grid, k):\n        min_path_values = []\n        min_path_cells = set()\n\n        for i in range(len(grid) * len(grid)):\n            cell = divmod(i, len(grid))\n            if i < k:\n                min_path_cells.add(cell)\n            else:\n                break\n\n        for i in range(k - 1, -1, -1):\n            min_path_cells = bfs(grid, i)\n            if min_path_cells:\n                min_path_values = get_path_values(grid, min_path_cells)\n                break\n\n        return min_path_values\n\n    return min_path(grid, k)",
        "test": "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
        "num_ids": 3622,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tri(n):\n    \"\"\"\n    Returns a list of the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        tribonacci = [3, 2, 8]  # initialize the sequence with the first 3 numbers\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i / 2)\n            else:\n                tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        return tribonacci\n",
        "test": "assert tri(0) == []",
        "num_ids": 2415,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n",
        "test": "assert digits(4) == 0",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    \n    # Round each element in the list to the upper int(Ceiling) first\n    lst = [int(math.ceil(x)) for x in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    return sum([x**2 for x in lst])\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 1251,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    # check if the string is empty\n    if len(txt) == 0:\n        return False\n    \n    # get the last character of the string\n    last_char = txt[-1]\n    \n    # check if the last character is an alphabetical character\n    if last_char.isalpha():\n        # check if the last character is not a part of a word\n        if txt[-2] == \" \":\n            return True\n        \n    return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    n = len(arr)\n    max_index = -1\n    \n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_index = i\n            \n    return max_index\n",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 136,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. If there is no negative or\n    positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # initialize variables to None\n    largest_negative = None\n    smallest_positive = None\n\n    # loop through the list\n    for num in lst:\n        # if number is negative, check if it's larger than the current largest negative\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        # if number is positive, check if it's smaller than the current smallest positive\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    # return the results as a tuple\n    return (largest_negative, smallest_positive)\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 1736,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # convert strings to float if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # compare values\n    if a > b:\n        return a if isinstance(a, str) else type(a)(a)\n    elif b > a:\n        return b if isinstance(b, str) else type(b)(b)\n    else:\n        return None\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 8 or n % 2 != 0: # even numbers must be positive and >= 2\n        return False\n    \n    for i in range(2, n//2+1, 2): # only check even numbers\n        for j in range(2, n//2+1, 2):\n            for k in range(2, n//2+1, 2):\n                for l in range(2, n//2+1, 2):\n                    if i+j+k+l == n:\n                        return True\n    \n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 1249,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # Initialize the result variable with 1\n    result = 1\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the factorial of each number\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        # Multiply the result by the factorial of each number\n        result *= factorial\n    # Return the final result\n    return result\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def fix_spaces(text):\n    fixed_text = ''\n    prev_char = ''\n    prev_prev_char = ''\n    for char in text:\n        if char == ' ':\n            if prev_char == ' ':\n                if prev_prev_char == ' ':\n                    fixed_text += '-'\n                else:\n                    fixed_text += '_'\n            else:\n                fixed_text += '_'\n        else:\n            fixed_text += char\n        prev_prev_char = prev_char\n        prev_char = char\n    return fixed_text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if the name has more than three digits\n    if sum(char.isdigit() for char in file_name) > 3:\n        return 'No'\n\n    # Check if the name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the name by dot\n    name_parts = file_name.split('.')\n\n    # Check if the first part is empty or starts with a letter\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n\n    # Check if the second part is one of the allowed file extensions\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
        "test": "assert file_name_check(\"1example.txt\") == 'No'",
        "num_ids": 2181,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n",
        "test": "assert sum_squares([]) == 0",
        "num_ids": 1549,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence, the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 1057,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n    def fraction_to_float(fraction):\n        numerator, denominator = fraction.split('/')\n        return int(numerator) / int(denominator)\n\n    x_float = fraction_to_float(x)\n    n_float = fraction_to_float(n)\n\n    return x_float * n_float == int(x_float * n_float)\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 1430,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Create a list of tuples, where each tuple contains the original number and its sum of digits\n    num_points = [(num, sum(divmod(abs(num), 10))) for num in nums]\n    \n    # Sort the list by the second element (the sum of digits) and the index in original list\n    num_points.sort(key=lambda x: (x[1], nums.index(x[0])))\n    \n    # Extract the sorted list of numbers\n    sorted_nums = [num for num, points in num_points]\n    \n    return sorted_nums\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 1342,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 != 0 and num // 10 % 2 != 0:\n            count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    a = [i*i-i+1 for i in range(1, n+1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 1449,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    \n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    \n    return tuple(planets[planet1_index+1:planet2_index])\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 1925,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule. If two words have the same length,\n    sort the list alphabetically. The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length. For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Filter the list to only include strings with even length\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list by length of each word and alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1546,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return x if n is a prime number, y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n\n    result = 0\n\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            if num % 2 != 0:\n                result += num ** 2\n\n    return result",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 1438,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def compare(game, guess):\n    \"\"\"\n    Determines if a person correctly guessed the results of a number of matches.\n    \n    Args:\n    game: An array of scores for a number of matches.\n    guess: An array of guesses for the same number of matches.\n    \n    Returns:\n    An array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    \n    if len(game) != len(guess):\n        raise ValueError(\"Arrays must have the same length\")\n    \n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    \n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 1585,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -float('inf')\n\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 2145,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def cycpattern_check(a, b):\n    if b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            b = b[1:] + b[0]\n            if b in a:\n                return True\n        return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 1030,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Define the mapping of numbers to roman numeral symbols\n    roman_symbols = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    # Convert the integer to a string of roman numeral symbols\n    roman_numeral = ''\n    for value, symbol in roman_symbols.items():\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n\n    # Return the roman numeral in lowercase\n    return roman_numeral.lower()\n",
        "test": "assert int_to_mini_roman(19) == 'xix'",
        "num_ids": 2022,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # sort the sides to ensure a, b, c are in ascending order\n    sides = sorted([a, b, c])\n    # check if the sides form a right-angled triangle\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True, \"Test case 1 failed\"",
        "num_ids": 1323,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            if word < max_word:\n                max_word = word\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    \n    total = number + min(need, remaining)\n    leftover = max(0, remaining - need)\n    return [total, leftover]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 2136,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n",
        "test": "assert do_algebra(['+'], [1, 2]) == 3",
        "num_ids": 1640,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is. If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 1057,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5 = hashlib.md5(text.encode())\n    return md5.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 1008,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # check if a is greater than b\n    if a > b:\n        # swap a and b\n        a, b = b, a\n\n    # initialize an empty list to store the even digits\n    even_digits = []\n\n    # loop through the range between a and b\n    for num in range(a, b+1):\n        # check if the number is even\n        if num % 2 == 0:\n            # convert the number to a string\n            num_str = str(num)\n            # loop through the digits of the number\n            for digit in num_str:\n                # check if the digit is even\n                if int(digit) % 2 == 0:\n                    # add the digit to the list of even digits\n                    even_digits.append(int(digit))\n\n    # sort the list of even digits in ascending order\n    even_digits = sorted(even_digits)\n\n    return even_digits\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1809,
        "indeed": false
    }
]