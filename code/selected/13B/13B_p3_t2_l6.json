[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    :param numbers: list of numbers\n    :param threshold: minimum distance between two numbers to be considered close\n    :return: True if there are two close numbers, False otherwise\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # remove all spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # initialize variables to store the current group and the list of groups\n    current_group = \"\"\n    group_list = []\n    \n    # iterate through each character in the input string\n    for char in paren_string:\n        if char == \"(\":\n            # add an opening parenthesis to the current group\n            current_group += char\n        elif char == \")\":\n            # add a closing parenthesis to the current group\n            current_group += char\n            # if the current group is balanced, add it to the list of groups\n            if is_balanced(current_group):\n                group_list.append(current_group)\n                # reset the current group to an empty string\n                current_group = \"\"\n    \n    return group_list\n    \n\ndef is_balanced(group: str) -> bool:\n    \"\"\" Helper function to check if a group of parentheses is balanced. Returns True if balanced, False otherwise.\"\"\"\n    count = 0\n    for char in group:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 1392,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset. \n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n\n    return result\n",
        "test": "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    results = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        for paren in group:\n            if paren == '(':\n                stack.append(paren)\n                max_depth = max(max_depth, len(stack))\n            elif paren == ')':\n                stack.pop()\n        results.append(max_depth)\n    return results\n",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]  # Test case 1",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    \n    if not numbers:\n        return 0, 1\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    \n    for num in numbers:\n        total_product *= num\n    \n    return total_sum, total_product\n",
        "test": "assert sum_product([]) == (0, 1)",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n        in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    \n    # if the string is already a palindrome, return the string\n    if is_palindrome(string):\n        return string\n    \n    # if the string is empty, return an empty string\n    if not string:\n        return ''\n    \n    # find the longest postfix that is a palindrome\n    longest_palindrome_suffix = ''\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            longest_palindrome_suffix = string[i:]\n            break\n    \n    # append the reverse of the prefix before the palindrome suffix to the end of the string\n    return string + longest_palindrome_suffix[::-1]\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)\n",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one.\n    Return the first one in case of multiple strings of the same length.\n    Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    max_len = 0\n    longest_str = \"\"\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_str = s\n    return longest_str\n",
        "test": "assert longest([]) == None, \"Empty list should return None\"",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "test": "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n+1)))\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    # Convert the string to lowercase to ignore case\n    string = string.lower()\n    \n    # Use a set to keep track of the distinct characters\n    distinct_chars = set()\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is not already in the set, add it\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    \n    # Return the number of distinct characters\n    return len(distinct_chars)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last. \n    \n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    for note in music_string.split():\n        result.append(beats[note])\n    return result\n",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Split the input string into a list of individual numberals\n    num_list = numbers.split()\n    \n    # Create a dictionary to map each numberal to its corresponding integer value\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Convert each numberal in the list to its corresponding integer value\n    num_list = [num_map[num] for num in num_list]\n    \n    # Sort the list of integers\n    num_list.sort()\n    \n    # Convert the sorted list of integers back to a list of numberals\n    num_list = [str(num) for num in num_list]\n    \n    # Join the list of numberals back into a single string and return it\n    return ' '.join(num_list)\n",
        "test": "assert sort_numbers('one') == 'one'",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    \n    # Sort the list of numbers in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to store the closest pair of elements\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_diff = abs(sorted_numbers[0] - sorted_numbers[1])\n    \n    # Iterate over all possible pairs of elements in the sorted list\n    for i in range(len(sorted_numbers) - 1):\n        for j in range(i + 1, len(sorted_numbers)):\n            diff = abs(sorted_numbers[i] - sorted_numbers[j])\n            \n            # If the difference between the current pair is smaller than the current minimum difference,\n            # update the closest pair and the minimum difference\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (sorted_numbers[i], sorted_numbers[j])\n    \n    return closest_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 1078,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the linear scaling factor and apply it to each number\n    scaling_factor = 1 / (max_val - min_val)\n    rescaled_numbers = [(num - min_val) * scaling_factor for num in numbers]\n    \n    return rescaled_numbers\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 1024,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    \n    return [value for value in values if isinstance(value, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 229,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "test": "assert largest_divisor(15) == 5",
        "num_ids": 352,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 878,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n\n    unique_numbers = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "test": "assert remove_duplicates([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    pos_nums = []\n    for num in l:\n        if num > 0:\n            pos_nums.append(num)\n    return pos_nums\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    # 1 is not a prime number\n    if n <= 1:\n        return False\n\n    # check if n is divisible by any number from 2 to n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n\n    # Check if the number of coefficients is even\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Polynomial must have even number of coefficients.\")\n\n    # Find the largest non-zero coefficient\n    max_coeff = max(abs(coeff) for coeff in xs)\n\n    # If the largest coefficient is zero, the polynomial is identically zero\n    if max_coeff == 0:\n        return 0\n\n    # Calculate the interval where the zero point must be\n    a = -max_coeff\n    b = max_coeff\n\n    # Calculate the initial guess\n    x = (a + b) / 2\n\n    # Set the tolerance and maximum number of iterations\n    tol = 1e-6\n    max_iter = 100\n\n    # Solve the polynomial using Newton's method\n    for i in range(max_iter):\n        # Calculate the value of the polynomial and its derivative\n        fx = poly(xs, x)\n        dfx = sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n\n        # Update the guess\n        x -= fx / dfx\n\n        # Check if the zero point has been found\n        if abs(fx) < tol:\n            return x\n\n    # If the maximum number of iterations is reached, raise an error\n    raise ValueError(\"Failed to find a solution after {} iterations.\".format(max_iter))\n",
        "test": "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three,\n    while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    l_sorted = sorted(l)\n    l_prime = []\n    i = 0\n    for x in l:\n        if i % 3 == 0:\n            l_prime.append(l_sorted[i // 3])\n        else:\n            l_prime.append(x)\n        i += 1\n    return l_prime\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    # Create a set with the unique elements in the list\n    unique_set = set(l)\n    # Convert the set back to a list and sort it\n    unique_list = sorted(list(unique_set))\n    return unique_list\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    \n    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    \n    return max_element\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            while i > 0:\n                digit = i % 10\n                if digit == 7:\n                    count += 1\n                i //= 10\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    l_even.sort()\n    l_sorted = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_sorted.append(l_even.pop(0))\n        else:\n            l_sorted.append(l[i])\n    return l_sorted\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    is_prime checks if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\"\n    fibonacci returns the n-th Fibonacci number.\n    \"\"\"\n    if n <= 1:\n        return n\n    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n]\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 1\n    fib = 2\n    while count < n:\n        fib = fibonacci(count+1)\n        if is_prime(fib):\n            count += 1\n    return fib\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 916,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n\n    l = sorted(l)\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 967,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Initialize collision counter\n    collisions = 0\n\n    # Loop through all possible car positions\n    for i in range(n):\n        # Check for collisions between cars at the same position\n        if i == 0 or i == n-1:\n            collisions += 1\n        # Check for collisions between cars moving left to right and right to left\n        elif i < n-i-1:\n            collisions += 1\n\n    return collisions\n",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 494,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 2, 3, 7]) == False, \"Expected False\"",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Invalid base. Base should be between 2 and 10.\")\n\n    digits = []\n\n    while x > 0:\n        digit = x % base\n        digits.append(str(digit))\n        x //= base\n\n    digits.reverse()\n\n    return ''.join(digits)\n",
        "test": "assert change_base(8, 3) == \"22\"",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n    area = 0.5 * a * h\n\n    return area\n",
        "test": "assert triangle_area(5, 3) == 7.5",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib1 = 0\n        fib2 = 0\n        fib3 = 2\n        fib4 = 0\n\n        for i in range(4, n+1):\n            fib = fib1 + fib2 + fib3 + fib4\n            fib1 = fib2\n            fib2 = fib3\n            fib3 = fib4\n            fib4 = fib\n\n        return fib4\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 1080,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3, \"Median of [3, 1, 2, 4, 5] should be 3\"",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]",
        "test": "assert is_palindrome('') == True",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return modp(n - 1, p) * 2 % p\n    else:\n        return modp(n // 2, p) * modp(n // 2, p) % p\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    \n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y",
        "test": "assert add(2, 3) == 5",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert the strings to sets to remove duplicates and ensure sorted order\n    set0 = set(s0)\n    set1 = set(s1)\n\n    # Check if the sets have the same elements\n    return set0 == set1\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(10) == 55",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    increasing = l[0] <= l[1]\n    for i in range(1, len(l)):\n        if increasing:\n            if l[i] < l[i-1]:\n                return False\n        else:\n            if l[i] > l[i-1]:\n                return False\n    return True\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1.intersection(set2)\n    return sorted(common_set)",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n.\n    Assumes n > 1 and is not a prime.\n    \"\"\"\n    # Initialize the largest prime factor to None\n    largest_prime = None\n    \n    # Divide n by the smallest prime factor (2) repeatedly\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Check odd factors up to sqrt(n)\n    i = 3\n    while i <= int(n**0.5) + 1:\n        if n % i == 0:\n            largest_prime = i\n            n //= i\n        else:\n            i += 2\n    \n    # If n is still greater than 2, it is a prime factor\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 763,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return (n*(n+1)) // 2\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    result = []\n    for i in range(1, n):\n        result.append(i * xs[i])\n    return result",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "test": "assert fibfib(1) == 0",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def vowels_count(s):\n    vowels = 'aeiouy'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # convert integer to string\n    x_str = str(x)\n    # convert string to list of characters\n    x_list = list(x_str)\n    # get length of list\n    n = len(x_list)\n    # handle case where shift is greater than number of digits\n    if shift > n:\n        shift %= n\n    # circular shift by reversing list and slicing\n    x_list = x_list[-shift:] + x_list[:-shift]\n    # convert list back to string and return\n    return ''.join(x_list)\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    \n    # Initialize sum to 0\n    total = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert the character to its ASCII code and add it to the sum\n            total += ord(char)\n    \n    return total\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    \n    # get the count of apples and oranges from the input string\n    apples, oranges = [int(x) for x in s.split() if x.isdigit()]\n    \n    # calculate the total number of fruits in the basket\n    total_fruits = n - apples - oranges\n    \n    return total_fruits\n",
        "test": "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
        "num_ids": 1150,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pluck(arr):\n    # If the array is empty, return an empty list\n    if not arr:\n        return []\n    \n    # Initialize the smallest even value and index to infinity\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    \n    # Iterate through the array and find the smallest even value and its index\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even:\n            smallest_even = node\n            smallest_index = i\n    \n    # If smallest_even is still infinity, return an empty list\n    if smallest_even == float('inf'):\n        return []\n    \n    # Return the smallest even value and its index in a list\n    return [smallest_even, smallest_index]\n",
        "test": "assert pluck([4,2,3]) == [2, 1]",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def search(lst):\n    freq = {}\n    max_freq = 0\n    result = -1\n    \n    for num in lst:\n        if num > 0:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n            \n            if freq[num] >= num:\n                if num > max_freq:\n                    max_freq = num\n                    result = num\n                    \n    return result\n",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        new_lst = []\n        new_lst.append(min(lst))\n        new_lst.append(max(lst))\n        lst.remove(min(lst))\n        lst.remove(max(lst))\n        while len(lst) != 0:\n            new_lst.append(min(lst))\n            lst.remove(min(lst))\n            new_lst.append(max(lst))\n            lst.remove(max(lst))\n        return new_lst\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_palindrome(lst):\n    return lst == lst[::-1]\n\ndef will_it_fly(q, w):\n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    return False",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic.\n    \"\"\"\n    n = len(arr)\n    # Check if the array is already palindromic\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            break\n    else:\n        return 0\n    # Count the number of elements to change\n    changes = 0\n    i, j = 0, n - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n            if changes > n // 2:\n                return -1  # Impossible to make palindromic\n        i += 1\n        j -= 1\n    return changes\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    \n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1\n",
        "test": "assert total_match([], []) == []",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for prime in primes:\n        if a % prime == 0:\n            count += 1\n            a /= prime\n        if count == 3:\n            return True\n    return False\n",
        "test": "assert is_multiply_prime(3) == False",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Checks if x is a simple power of n.\n    :param x: the number to check\n    :param n: the base of the power\n    :return: True if x is a simple power of n, False otherwise\n    \"\"\"\n    if n == 1:  # 1 to any power is 1, so only 1^1 is a simple power\n        return x == 1\n    elif x == 1:  # 1 is always a simple power, even for bases other than 1\n        return True\n    else:\n        power = 1\n        while power <= x:\n            if power == x:\n                return True\n            power *= n\n        return False\n",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def iscube(a):\n    for i in range(1, abs(a) + 1):\n        if i ** 3 == abs(a):\n            return True\n    return False ",
        "test": "assert iscube(1) == True",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    count = 0\n    hex_digits = \"0123456789ABCDEF\"\n    prime_digits = [2, 3, 5, 7, 11, 13]\n    for digit in num:\n        if digit in hex_digits and int(digit, 16) in prime_digits:\n            count += 1\n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 1138,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to binary format as a string.\n\n    Args:\n        decimal (int): The decimal number to convert.\n\n    Returns:\n        str: The binary representation of the decimal number, including the\n            \"db\" prefix and suffix.\n    \"\"\"\n    binary = bin(decimal)[2:]  # convert to binary and remove the \"0b\" prefix\n    binary = \"db\" + binary + \"db\"\n    return binary\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s)-2):\n        if s[i:i+3] in s[i+3:]:\n            return False\n    \n    return True\n",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n            GPA       |    Letter grade\n           4.0                A+\n           > 3.7                A \n           > 3.3                A- \n           > 3.0                B+\n           > 2.7                B \n           > 2.3                B-\n           > 2.0                C+\n           > 1.7                C\n           > 1.3                C-\n           > 1.0                D+ \n           > 0.7                D \n           > 0.0                D-\n           0.0                E\n    \n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 2292,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Checks if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Checks if the length of a string is prime\"\"\"\n    length = len(string)\n    return is_prime(length)\n",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10**(n-1)):\n        if (i % 10 == 1) or (i // (10**(n-2)) % 10 == 1):\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 0",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n\ndef sum_of_digits(binary_number):\n    return sum(int(digit) for digit in binary_number)\n\ndef solve(N):\n    binary_number = decimal_to_binary(N)\n    sum_of_binary_digits = sum_of_digits(binary_number)\n    return decimal_to_binary(sum_of_binary_digits)",
        "test": "assert solve(150) == \"110\"",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    s = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n    return s\n",
        "test": "assert add([4, 2, 6, 7]) == 2 ",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n\n    return ' '.join(ordered_words)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists, \n    which is similar to matrix, however, unlike matrices, \n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list, \n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that \n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for column_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, column_index))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row([",
        "num_ids": 841,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # create a copy of the given array\n    sorted_array = array.copy()\n\n    # calculate the sum of the first and last index values\n    total_sum = sorted_array[0] + sorted_array[-1]\n\n    # sort the array based on the sum\n    if total_sum % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n\n    return sorted_array\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 1058,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encrypt(s):\n    # Create a dictionary to map each letter to its rotated position\n    shift = 2 * 26\n    mapping = {chr((ord(c) - ord('a') + shift) % 26 + ord('a')): chr((ord(c) - ord('a') - shift) % 26 + ord('a')) for c in 'abcdefghijklmnopqrstuvwxyz'}\n\n    # Apply the mapping to each character in the string\n    result = ''\n    for c in s:\n        if c.lower() in mapping:\n            result += mapping[c.lower()]\n        else:\n            result += c\n\n    return result",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop'",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    # Initialize count of boredoms to 0\n    count = 0\n\n    # Split the string into sentences using the delimiters\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n\n    # Iterate through each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\"\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n\n    return count\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def any_int(x, y, z):\n    # check if all inputs are integers\n    if all(isinstance(i, int) for i in (x, y, z)):\n        # check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True, \"Error in any_int(5, 2, 7)\"",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def encode(message):\n    vowels = 'AEIOUaeiou'\n    new_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.upper() in vowels:\n                index = (ord(char.upper()) - 65 + 2) % 26\n                new_char = chr(65 + index)\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        new_message += new_char\n    return new_message\n",
        "test": "assert encode('test') == 'TGST'",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return None\n    max_prime = max(primes)\n    return sum_of_digits(max_prime)",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n\n    first_key_case = None\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n\n        if first_key_case is None:\n            first_key_case = key.islower()\n        elif first_key_case != key.islower():\n            return False\n\n    return True",
        "test": "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n. For example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    i = 2\n    while i < n:\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n    return primes\n",
        "test": "assert count_up_to(5) == [2, 3]",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiply(a, b):\n    # Extract the unit digit of a\n    a_unit = a % 10\n    \n    # Extract the unit digit of b\n    b_unit = b % 10\n    \n    # Multiply the two unit digits and return the result\n    return a_unit * b_unit\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOUaeiou':\n            count += 1\n    return count\n",
        "test": "assert count_upper('aBCdEf') == 1",
        "num_ids": 279,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def closest_integer(value):\n    # convert the value to a float\n    num = float(value)\n    \n    # find the two integers closest to the number\n    int1 = int(num)\n    int2 = int(num + 1)\n    \n    # calculate the distances to those integers\n    dist1 = abs(num - int1)\n    dist2 = abs(num - int2)\n    \n    # return the integer that is closest, or round away from zero\n    if dist1 < dist2:\n        return int1\n    elif dist2 < dist1:\n        return int2\n    else:\n        if num >= 0:\n            return int2\n        else:\n            return int1\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def make_a_pile(n):\n    result = [n]\n    while n > 1:\n        n = n - 2 if n % 2 == 1 else n - 1\n        result.append(n)\n    return result\n",
        "test": "assert make_a_pile(4) == [4, 6, 8, 10]",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # split the string into words based on commas or spaces\n    words = s.split(\",\")\n    if len(words) == 1:\n        words = s.split(\" \")\n    return words\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    \n    even_numbers = []\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            even_numbers.append(num)\n    \n    if not even_numbers:\n        return -1\n    \n    return max(even_numbers)\n",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m+1):\n            sum += i\n        avg = round(sum/(m-n+1))\n        return bin(avg)\n",
        "test": "assert rounded_avg(1, 5) == \"0b11\"",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if not any(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n",
        "test": "assert unique_digits([152, 323, 1422, 10]) == []",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]    \n                  -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]  \n                  -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n    \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55]  \n                  -> sort arr -> [-1, 1, 55]\n                  -> reverse arr -> [55, 1, -1]\n    return = ['One']\n    \"\"\"\n    numbers = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    if not arr:\n        return []\n    else:\n        sorted_arr = sorted([num for num in arr if 1 <= num <= 9])\n        reversed_arr = sorted_arr[::-1]\n        result = [numbers[num - 1] for num in reversed_arr]\n        return result\n",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
        "num_ids": 1676,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result\n",
        "test": "assert f(0) == []",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(3) == (1, 2)",
        "num_ids": 937,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        digit_sum = 0\n        if num < 0:\n            digit_sum += 1  # First digit is negative\n            num = -num\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        if digit_sum > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n    \n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False. If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                    array by performing any number of right shift operations.\n                    \n    \"\"\"\n    \n    if len(arr) == 0:\n        return True\n    \n    sorted_arr = sorted(arr)\n    \n    for i in range(len(arr)):\n        if arr[i] != sorted_arr[i]:\n            return False\n        \n    return True\n",
        "test": "assert move_one_ball([]) == True",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    even_list = [num for num in lst1 if num % 2 == 0]\n    \n    if len(even_list) == len(lst1):\n        return \"YES\"\n    \n    else:\n        odd_nums = [num for num in lst1 if num % 2 != 0]\n        \n        for num in odd_nums:\n            if num in lst2:\n                lst2.remove(num)\n                even_list.append(num)\n                \n                if len(even_list) == len(lst1):\n                    return \"YES\"\n        \n        return \"NO\"\n",
        "test": "assert exchange([2, 4], [1, 2, 3, 4]) == \"YES\"",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence,\n    return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    # Initialize an empty dictionary to store the letter counts\n    letter_counts = {}\n    \n    # Split the input string into a list of letters\n    letters = test.split()\n    \n    # Loop through each letter in the list and update the letter count in the dictionary\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    \n    # Find the letter(s) with the highest count\n    max_count = max(letter_counts.values())\n    max_letters = [letter for letter, count in letter_counts.items() if count == max_count]\n    \n    # Return a dictionary with the letter(s) as keys and their count(s) as values\n    return {letter: letter_counts[letter] for letter in max_letters}\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_delete(s,c):\n    # remove characters from s that are present in c\n    result = ''.join([i for i in s if i not in c])\n    \n    # check if the result is palindrome\n    is_palindrome = result == result[::-1]\n    \n    # return the result and the palindrome check\n    return result, is_palindrome\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_count(lst):\n    result = []\n    for i in range(len(lst)):\n        num_odd = 0\n        for j in range(len(lst[i])):\n            if int(lst[i][j]) % 2 != 0:\n                num_odd += 1\n        result.append(\"the number of odd elements in the string {} of the input.\".format(i+1))\n    return result\n",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums. Return the minimum sum.\n    \"\"\"\n    \n    # Initialize minimum sum and starting index to 0\n    min_sum = float('inf')\n    start_index = 0\n    \n    # Initialize current sum and ending index to 0\n    current_sum = 0\n    end_index = 0\n    \n    # Iterate through the array\n    while end_index < len(nums):\n        # Add current element to current sum\n        current_sum += nums[end_index]\n        \n        # If current sum is less than or equal to minimum sum, update minimum sum and starting index\n        if current_sum <= min_sum:\n            min_sum = current_sum\n            start_index = end_index\n        \n        # If current sum exceeds minimum sum, reset current sum to 0 and move ending index to next element\n        while current_sum > min_sum:\n            current_sum -= nums[start_index]\n            start_index += 1\n        \n        end_index += 1\n    \n    return min_sum\n",
        "test": "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    rows = len(grid)\n    cols = len(grid[0])\n    well_units = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                well_units += 1\n\n    if well_units == 0:\n        return 0\n\n    if well_units % capacity == 0:\n        return well_units // capacity\n    else:\n        return well_units // capacity + 1",
        "test": "assert max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6",
        "num_ids": 1971,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_array(arr):\n    # First, create a list of tuples (binary_ones, decimal_value)\n    # for each element in the array, where binary_ones is the number of ones in\n    # the element's binary representation, and decimal_value is the decimal value of the element\n    binary_tuples = [(bin(x).count('1'), x) for x in arr]\n    \n    # Sort the list of tuples based on binary_ones (ascending) and then decimal_value (ascending)\n    sorted_tuples = sorted(binary_tuples, key=lambda x: (x[0], x[1]))\n    \n    # Extract the decimal values from the sorted list of tuples and return them as a new list\n    return [x[1] for x in sorted_tuples]\n",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for c in word if c.lower() not in 'aeiou') == n:\n            result.append(word)\n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 546,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"\n",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def match_parens(lst):\n    # create a string by concatenating the two input strings\n    s = lst[0] + lst[1]\n    # initialize a stack to keep track of open parentheses\n    stack = []\n    # loop through each character in the string\n    for char in s:\n        # if the character is an open parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # if the character is a close parenthesis, check if the stack is empty\n        # if it is, then the parentheses are unbalanced and we can't make a good string\n        elif char == ')':\n            if not stack:\n                return 'No'\n            # otherwise, pop the last open parenthesis from the stack and continue looping\n            else:\n                stack.pop()\n    # if we made it through the entire string without returning, then the parentheses are balanced\n    # and we can make a good string\n    return 'Yes'\n",
        "test": "assert match_parens(['()', '()']) == 'Yes'",
        "num_ids": 1127,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    return sorted(arr, reverse=True)[:k]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k,\n    return the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # initialize the sum to zero\n    total_sum = 0\n    \n    # loop over the first k elements of the array\n    for i in range(k):\n        # check if the current element has at most two digits\n        if arr[i] < 100:\n            # add the element to the total sum\n            total_sum += arr[i]\n            \n    # return the total sum\n    return total_sum\n",
        "test": "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    return collatz_sequence\n\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_collatz = []\n    collatz_sequence = collatz(n)\n    for num in collatz_sequence:\n        if num % 2 != 0:\n            odd_collatz.append(num)\n    return sorted(odd_collatz)\n",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef valid_date(date):\n    \"\"\"\n    Check if a given date string is valid or not.\n    \"\"\"\n    # check if the date string is not empty\n    if not date:\n        return False\n    \n    # check if the date string is in the correct format\n    pattern = re.compile(r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$')\n    if not pattern.match(date):\n        return False\n    \n    # check if the date is valid according to the given rules\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if (month in [4, 6, 9, 11] and day > 30) or (month == 2 and day > 29):\n        return False\n    if (month in [1, 3, 5, 7, 8, 10, 12] and day > 31):\n        return False\n    \n    # the date is valid\n    return True\n",
        "test": "assert valid_date('15-01-2012') == False",
        "num_ids": 1410,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 != 0:\n                count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sorted(lst):\n    prev = None\n    for num in lst:\n        if prev is not None and num < prev:\n            return False\n        elif num == prev:\n            return False\n        prev = num\n    return True ",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0. \n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n\n    prod = 1\n    for num in arr:\n        if num == 0:\n            prod *= 0\n        elif num > 0:\n            prod *= 1\n        else:\n            prod *= -1\n\n    mag_sum = sum(abs(num) for num in arr)\n\n    return mag_sum * prod\n",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 674,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def dfs(curr_pos, visited):\n        if visited == k:\n            return True\n        visited += 1\n        for i, j in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_i, new_j = curr_pos[0] + i, curr_pos[1] + j\n            if 0 <= new_i < len(grid) and 0 <= new_j < len(grid):\n                if (new_i, new_j) not in visited_cells:\n                    visited_cells.add((new_i, new_j))\n                    if dfs((new_i, new_j), visited):\n                        return True\n                    visited_cells.remove((new_i, new_j))\n        visited -= 1\n        return False\n\n    visited_cells = set()\n    visited_cells.add((0, 0))\n    if dfs((0, 0), 0):\n        path = sorted([grid[i][j] for i, j in visited_cells])\n        return path\n    else:\n        return None",
        "test": "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 1) == [1]",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tri(n):\n    \"\"\"\n    Returns the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        trib = [1, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                trib.append(1 + i // 2)\n            else:\n                trib.append(trib[-1] + trib[-2] + trib[-3])\n        return trib\n",
        "test": "assert tri(1) == [1]",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd_digit = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n    \n    return product if has_odd_digit else 0\n",
        "test": "assert digits(1) == 1",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_nested(string):\n    # Initialize a stack and a flag\n    stack = []\n    nested = False\n\n    # Iterate over the characters in the string\n    for char in string:\n        # If we encounter an opening bracket, push it onto the stack\n        if char == '[':\n            stack.append(char)\n        # If we encounter a closing bracket, check if it matches the top of the stack\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                nested = True\n            else:\n                return False\n        # If we encounter any other character, return False\n        else:\n            return False\n\n    # If we've made it this far and have a non-empty stack, return False\n    if stack:\n        return False\n\n    # If we've made it this far and have a nested flag, return True\n    return nested\n",
        "test": "assert is_nested('[[]]') == True",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    \n    # Rounding each element in the list to the upper int(Ceiling)\n    rounded_lst = [math.ceil(num) for num in lst]\n    \n    # Calculating the sum of squared numbers in the rounded list\n    sum_of_squares = sum([num ** 2 for num in rounded_lst])\n    \n    return sum_of_squares\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 866,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    \n    if not txt:\n        return False\n\n    words = txt.split()\n    last_word = words[-1]\n    last_char = last_word[-1]\n\n    if last_char.isalpha():\n        if last_char.isalpha() and last_word[-2] == ' ':\n            return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    if len(arr) < 2:\n        return -1\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n\n    return -1",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_smallest_integers(lst):\n    # Initialize variables to None\n    largest_negative = None\n    smallest_positive = None\n    \n    # Loop through the list\n    for num in lst:\n        # If the number is negative, update largest_negative\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        # If the number is positive, update smallest_positive\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    # Return the tuple of (largest_negative, smallest_positive)\n    return (largest_negative, smallest_positive)\n",
        "test": "assert largest_smallest_integers([]) == (None, None)",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Convert strings to floats if possible\n    if isinstance(a, str):\n        try:\n            a = float(a.replace(\",\", \".\"))\n        except ValueError:\n            pass\n    if isinstance(b, str):\n        try:\n            b = float(b.replace(\",\", \".\"))\n        except ValueError:\n            pass\n\n    # Compare the values and return the larger one or None if equal\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    # List of even numbers\n    even_numbers = [2, 4, 6, 8]\n\n    # Check if n can be written as the sum of exactly 4 even numbers\n    for i in range(len(even_numbers)):\n        for j in range(i+1, len(even_numbers)):\n            for k in range(j+1, len(even_numbers)):\n                for l in range(k+1, len(even_numbers)):\n                    if even_numbers[i] + even_numbers[j] + even_numbers[k] + even_numbers[l] == n:\n                        return True\n    return False\n",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    brazilian_factorial = 1\n    for i in range(1, n+1):\n        brazilian_factorial *= i\n    return brazilian_factorial\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"__\", \"-\")\n    return text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check if the file name contains more than three digits\n    if len(list(filter(str.isdigit, file_name))) > 3:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into two parts, before and after the dot\n    file_name_parts = file_name.split('.')\n\n    # Check if the first part of the file name is non-empty and starts with a letter\n    if not file_name_parts[0] or not file_name_parts[0][0].isalpha():\n        return 'No'\n\n    # Check if the second part of the file name is one of the allowed extensions\n    if file_name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == \"Yes\"",
        "num_ids": 1264,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total\n",
        "test": "assert sum_squares([1,2,3]) == 6",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def simplify(x, n):\n    # Extract numerator and denominator from x and n\n    x_num, x_denom = [int(i) for i in x.split('/')]\n    n_num, n_denom = [int(i) for i in n.split('/')]\n    \n    # Calculate the product of x and n\n    prod_num = x_num * n_num\n    prod_denom = x_denom * n_denom\n    \n    # Calculate the simplified expression\n    simp_num = prod_num\n    simp_denom = prod_denom\n    \n    # Check if the simplified expression evaluates to a whole number\n    if simp_num % simp_denom == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(num):\n    \"\"\"\n    Helper function to calculate the sum of digits of a given number.\n    \"\"\"\n    return sum(int(digit) for digit in str(abs(num)))\n\ndef order_by_points(nums):\n    \"\"\"\n    Main function to sort the given list of integers in ascending order\n    according to the sum of their digits. If there are several items\n    with similar sum of their digits, order them based on their index in\n    original list.\n    \"\"\"\n    if not nums:\n        return []\n    \n    # Calculate the sum of digits and the index of each number in the list.\n    points = [(sum_of_digits(num), i, num) for i, num in enumerate(nums)]\n    \n    # Sort the numbers based on their points and index in the original list.\n    points.sort(key=lambda x: (x[0], x[1]))\n    \n    # Return the sorted list of numbers.\n    return [num for points, i, num in points]\n",
        "test": "assert order_by_points([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune. \n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    \n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    \n    return tuple(planets[planet1_index+1:planet2_index])\n",
        "test": "assert bf(\"Mercury\", \"Venus\") == () # planet names are not correct",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. The order of the list should be ascending by length of each word,\n    and you should return the list sorted by that rule. If two words have the same length,\n    sort the list alphabetically. The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 991,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef x_or_y(n, x, y):\n    \"\"\"Return the value of x if n is a prime number, and y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(15, 8, 5) == 5",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def double_the_difference(lst):\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is odd, positive, and an integer\n        if num % 2 != 0 and num > 0 and isinstance(num, int):\n            # Double the difference and add the square to the sum\n            sum_of_squares += (num * 2 - 1) ** 2\n    \n    # Return the sum of squares\n    return sum_of_squares\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 152,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def compare(game, guess):\n    \"\"\"\n    Compare the guessed scores with the actual scores and return the difference between them.\n\n    :param game: List of actual scores of matches\n    :param guess: List of guessed scores of matches\n    :return: List of differences between guesses and actual scores\n    \"\"\"\n    result = []\n\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class.\n    The strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strongest_extension = None\n    max_strength = -float('inf')\n    \n    for extension in extensions:\n        strength = sum(c.isupper() for c in extension) - sum(c.islower() for c in extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cycpattern_check(a, b):\n    \"\"\"\n    Returns True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    # check if b is a substring of a\n    if b in a:\n        return True\n    # check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    # if neither of the above is true, return False\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    # If the number is negative, convert it to positive\n    if num < 0:\n        num = -num\n\n    # Initialize variables to count even and odd digits\n    even_count = 0\n    odd_count = 0\n\n    # Loop through each digit of the number\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(246) == (3, 0)",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Define a mapping of integers to their roman numeral representations\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    # Convert the input number to a string to simplify iteration\n    number_str = str(number)\n\n    # Initialize an empty string to store the roman numeral representation\n    roman_numeral = ''\n\n    # Iterate over each digit in the input number\n    for digit in number_str:\n        # Check if the digit is 4 or greater, and if so, subtract 5 and add \"V\" (5) to the roman numeral\n        if int(digit) >= 5:\n            roman_numeral += (roman_numerals[int(digit) - 5] + roman_numerals[5])\n        # Otherwise, simply add the roman numeral representation of the digit to the output string\n        else:\n            roman_numeral += roman_numerals[int(digit)]\n\n    # Return the roman numeral representation in lowercase\n    return roman_numeral.lower()\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 1122,
        "indeed": false
    },
    {
        "number": 157,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def right_angle_triangle(a, b, c):\n    # First, we check if the three sides form a triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Then, we check if the three sides form a right-angled triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    \n    # If none of the conditions above are met, it's not a right-angled triangle\n    return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words.\n    Return the word with maximum number of unique characters.\n    If multiple strings have maximum number of unique characters,\n    return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n\n    max_word = \"\"\n    max_count = 0\n\n    for word in words:\n        unique_chars = set(word)\n        count = len(unique_chars)\n\n        if count > max_count:\n            max_word = word\n            max_count = count\n        elif count == max_count and word < max_word:\n            max_word = word\n\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    \n    if need <= remaining:\n        total = number + need\n        remaining = remaining - need\n        return [total, remaining]\n    else:\n        total = number + remaining\n        return [total, 0]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 1335,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result = result // operand[i]\n        elif operator[i-1] == '**':\n            result = result ** operand[i]\n        else:\n            raise ValueError(\"Invalid operator\")\n    return result\n",
        "test": "assert do_algebra(['+'], [1, 2]) == 3",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solve(s):\n    # initialize variables\n    has_letter = False\n    result = \"\"\n    \n    # loop through string\n    for c in s:\n        # if the character is a letter, reverse its case\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    \n    # if the string contains no letters, reverse the string\n    if not has_letter:\n        result = result[::-1]\n    \n    return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5 = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Ensure a <= b\n    if a > b:\n        a, b = b, a\n\n    # Initialize a set to store the even digits\n    even_digits = set()\n\n    # Iterate through the range of numbers between a and b\n    for num in range(a, b+1):\n        # Check if the number has an even digit\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n\n        # If the number has an even digit, add it to the set\n        if has_even_digit:\n            even_digits.add(num)\n\n    # Convert the set to a list and sort it in ascending order\n    even_digits_list = list(even_digits)\n    even_digits_list.sort()\n\n    return even_digits_list\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 897,
        "indeed": false
    }
]