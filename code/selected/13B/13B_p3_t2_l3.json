[
    {
        "number": 0,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    \n    # Initialize the list of groups and the current group\n    groups = []\n    current_group = ''\n    \n    # Initialize a counter for the open and closed parentheses\n    open_count = 0\n    closed_count = 0\n    \n    # Iterate over the characters in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the open count\n        if char == '(':\n            open_count += 1\n            current_group += char\n        # If the character is a closed parenthesis, increment the closed count\n        elif char == ')':\n            closed_count += 1\n            current_group += char\n        # If the current group is balanced, add it to the list of groups\n        if open_count == closed_count:\n            groups.append(current_group)\n            current_group = ''\n            open_count = 0\n            closed_count = 0\n            \n    return groups",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    \n    return number - int(number)\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case): MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0  # should be 1.0",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    result = []\n    for group in paren_string.split():\n        count = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                max_depth = max(max_depth, count)\n            elif char == ')':\n                count -= 1\n                if count < 0:\n                    return []\n        result.append(max_depth)\n    return result\n",
        "test": "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]  # expected output",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 566,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    \n    total_sum = 0\n    total_product = 1\n    \n    for number in numbers:\n        total_sum += number\n        total_product *= number\n        \n    return (total_sum, total_product)\n",
        "test": "assert sum_product([1, 2, 3, 4]) == (10, 24)",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    rolling_max = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        rolling_max.append(max_so_far)\n    return rolling_max\n",
        "test": "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 10,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    \n    # Find the longest palindromic postfix of the string\n    max_palindrome_suffix = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if is_palindrome(string[i:j]) and len(string[i:j]) > len(max_palindrome_suffix):\n                max_palindrome_suffix = string[i:j]\n    \n    # Find the reverse of the string prefix that comes before the palindromic suffix\n    prefix = string[:string.index(max_palindrome_suffix)]\n    prefix_reverse = prefix[::-1]\n    \n    # Combine the prefix reverse with the palindromic suffix to form the shortest palindrome\n    shortest_palindrome = prefix_reverse + max_palindrome_suffix\n    \n    return shortest_palindrome\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert input strings to lists of 1s and 0s\n    a_list = list(a)\n    b_list = list(b)\n\n    # Perform XOR on each pair of corresponding bits\n    result = []\n    for i in range(len(a_list)):\n        if a_list[i] == b_list[i]:\n            result.append('0')\n        else:\n            result.append('1')\n\n    # Convert the result list to a string and return it\n    return ''.join(result)",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 674,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "test": "assert longest([]) is None",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "test": "assert all_prefixes('') == []",
        "num_ids": 217,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    >>> string_sequence(0)\n    '0'\n\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars) ",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # Define a dictionary to map each musical note to its duration in beats\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n\n    # Split the input string into individual notes\n    notes = music_string.split()\n\n    # Initialize an empty list to store the durations of each note\n    durations = []\n\n    # Iterate over the notes and append their durations to the list\n    for note in notes:\n        durations.append(note_duration[note])\n\n    return durations",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    while True:\n        index = string.find(substring)\n        if index == -1:\n            break\n        count += 1\n        string = string[index + 1:]\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)",
        "test": "assert sort_numbers('zero') == 'zero'",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n    # Sort the list of numbers in ascending order\n    numbers.sort()\n\n    # Initialize the variables to store the closest two numbers\n    closest_numbers = numbers[0], numbers[1]\n    min_distance = abs(closest_numbers[0] - closest_numbers[1])\n\n    # Loop through the list of numbers, comparing each pair of adjacent numbers\n    for i in range(len(numbers) - 1):\n        distance = abs(numbers[i] - numbers[i + 1])\n        if distance < min_distance:\n            min_distance = distance\n            closest_numbers = numbers[i], numbers[i + 1]\n\n    return closest_numbers\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 1347,
        "indeed": true
    },
    {
        "number": 21,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    # find the minimum and maximum numbers in the list\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    # apply the linear transform to each number in the list\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    \n    return rescaled_numbers\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [v for v in values if isinstance(v, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Iterate through the numbers from n-1 to 2 (inclusive)\n    for i in range(n-1, 1, -1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # Return i as the largest divisor\n            return i\n    # If no divisor is found, return 1 as the largest divisor\n    return 1\n",
        "test": "assert largest_divisor(15) == 5 ",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 576,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    \n    # Create an empty list to store the unique numbers\n    unique_numbers = []\n    \n    # Loop through the input list\n    for number in numbers:\n        # Check if the number is not already in the unique list\n        if number not in unique_numbers:\n            # Add the number to the unique list\n            unique_numbers.append(number)\n        else:\n            # If the number is already in the unique list, skip it\n            continue\n    \n    return unique_numbers\n",
        "test": "assert remove_duplicates([5, 5, 5, 5, 5]) == [5]",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 27,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result",
        "test": "assert flip_case('') == ''",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    \n    # Initializing an empty string to hold the concatenated result\n    result = ''\n    \n    # Iterating over the list of strings and concatenating each string to the result string\n    for string in strings:\n        result += string\n    \n    return result\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    # 1 is not a prime number\n    if n == 1:\n        return False\n\n    # 2 is a prime number\n    if n == 2:\n        return True\n\n    # all other even numbers are not prime\n    if n % 2 == 0:\n        return False\n\n    # check odd numbers up to the square root of n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True\n",
        "test": "assert is_prime(6) == False",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    n = len(xs)\n    if n % 2 == 1:\n        raise ValueError(\"xs should have even number of coefficients\")\n\n    if xs[0] == 0:\n        raise ValueError(\"leading coefficient should be non-zero\")\n\n    x = -1 * xs[-1] / xs[0]\n    return x",
        "test": "assert find_zero([1, 0, 1]) == 0.0",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_sorted = sorted(l[::3])\n    result = []\n    for i, value in enumerate(l):\n        if i % 3 == 0:\n            result.append(l_sorted.pop(0))\n        else:\n            result.append(value)\n    return result",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 34,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique(l: list):\n    \"\"\"\n    Returns a sorted list with unique elements from the input list.\n    \"\"\"\n    return sorted(set(l))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            while i > 0:\n                digit = i % 10\n                if digit == 7:\n                    count += 1\n                i //= 10\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_values = sorted([l[i] for i in range(0, len(l), 2)])\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 1:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(even_values.pop(0))\n    return l_prime",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):(3 * i + 3)] for i in range(len(s) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"123456\")) == \"123456\"",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 39,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    is_prime returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\"\n    fibonacci returns the n-th Fibonacci number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_0 = 0\n        fib_1 = 1\n        for i in range(2, n + 1):\n            fib_n = fib_0 + fib_1\n            fib_0 = fib_1\n            fib_1 = fib_n\n        return fib_n\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 0\n    i = 0\n    while count < n:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n        i += 1\n    return fibonacci(i - 1)\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 40,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    \n    l.sort()\n    \n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        \n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False\n",
        "test": "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1067,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                continue\n            if i < j:\n                # cars from left to right\n                if i < j - i:\n                    count += 1\n            else:\n                # cars from right to left\n                if i < 2 * n - i - j:\n                    count += 1\n    return count\n",
        "test": "assert car_race_collision(0) == 0",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x+1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x //= base\n    return result if result else '0'\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triangle_area(a, h):\n    return (a * h) / 2\n",
        "test": "assert triangle_area(5, 3) == 7.5",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a = 0\n        b = 0\n        c = 2\n        for i in range(3, n+1):\n            d = a + b + c\n            a = b\n            b = c\n            c = d\n        return c\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 47,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    10.0\n    \"\"\"\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]\n",
        "test": "assert median([3, 1, 2, 4, 5]) == 3",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    # Base case: if n is 0, return 1\n    if n == 0:\n        return 1\n\n    # Calculate 2^n recursively\n    pow2 = modp(n // 2, p) * modp(n // 2, p) % p\n\n    # Return the result based on whether n is even or odd\n    if n % 2 == 0:\n        return pow2\n    else:\n        return pow2 * 2 % p\n",
        "test": "assert modp(3, 5) == 3",
        "num_ids": 670,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 245,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # convert strings to sets to remove duplicates and sort them\n    set_s0 = sorted(set(s0))\n    set_s1 = sorted(set(s1))\n\n    # check if the two sets are equal\n    return set_s0 == set_s1\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "test": "assert fib(10) == 55",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    # check if list is monotonically increasing or decreasing\n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n    return increasing or decreasing\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True, \"monotonic([1, 2, 4, 20]) should be True\"",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert lists to sets for faster lookups\n    s1 = set(l1)\n    s2 = set(l2)\n    # Find common elements\n    common_elements = s1.intersection(s2)\n    # Sort and return unique elements\n    return sorted(set(common_elements))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653], \"Incorrect result for common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\"",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n.\n    Assume n > 1 and is not a prime.\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert largest_prime_factor(13195) == 29",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    Returns the sum of numbers from 1 to n.\n    \"\"\"\n    return (n * (n + 1)) // 2\n",
        "test": "assert sum_to_n(30) == 465, \"Incorrect output for sum_to_n(30)\"",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_1 = 0\n    fibfib_2 = 0\n    fibfib_3 = 1\n\n    for i in range(3, n+1):\n        fibfib_i = fibfib_1 + fibfib_2 + fibfib_3\n        fibfib_1 = fibfib_2\n        fibfib_2 = fibfib_3\n        fibfib_3 = fibfib_i\n\n    return fibfib_i\n",
        "test": "assert fibfib(1) == 0",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n        elif s[i].lower() == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2, \"Incorrect output for abcde\"",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    \"\"\"\n    # Convert x to a string and split its digits\n    digits = list(str(x))\n    # Compute the length of the list of digits\n    n = len(digits)\n    # If shift is greater than the number of digits, reverse the list of digits\n    if shift > n:\n        digits = digits[::-1]\n        shift = shift % n\n    # Circular shift the list of digits by shift positions to the right\n    digits = digits[-shift:] + digits[:-shift]\n    # Join the list of digits and return as a string\n    return ''.join(digits)\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    \n    # Initialize the sum variable to zero\n    total_sum = 0\n\n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # If it is, add its ASCII code to the total sum\n            total_sum += ord(char)\n\n    # Return the total sum\n    return total_sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # split the string into two parts: apples and oranges\n    apples, oranges = map(int, s.split())\n    # calculate the number of mango fruits in the basket\n    mango = n - apples - oranges\n    # return the number of mango fruits\n    return mango\n",
        "test": "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros, \n                            so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    # Initialize the smallest even value and its index as infinity and None respectively\n    smallest_even = float('inf')\n    smallest_even_index = None\n\n    # Iterate through the array and check for even values\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            # If the current value is smaller than the smallest even value, update both values\n            if arr[i] < smallest_even:\n                smallest_even = arr[i]\n                smallest_even_index = i\n\n    # If smallest_even_index is not None, return the smallest even value and its index\n    if smallest_even_index is not None:\n        return [smallest_even, smallest_even_index]\n    else:\n        return []\n",
        "test": "assert pluck([4, 2, 3]) == [2, 1]",
        "num_ids": 1213,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def search(lst):\n    freq = {}\n    max_freq = 0\n    result = -1\n    \n    # Count the frequency of each integer in the list\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Find the maximum frequency and corresponding integer\n    for num in freq:\n        if num > 0 and freq[num] >= num:\n            if freq[num] > max_freq:\n                max_freq = freq[num]\n                result = num\n    \n    return result\n",
        "test": "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        lst.remove(min_val)\n        result.append(min_val)\n        max_val = max(lst)\n        lst.remove(max_val)\n        result.append(max_val)\n    return result\n",
        "test": "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1",
        "test": "assert triangle_area(3, 4, 5) == 6.00, \"Incorrect area calculation\"",
        "num_ids": 701,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Check if the list is balanced\n    if q != q[::-1]:\n        return False\n\n    # Calculate the sum of the elements in the list\n    total = sum(q)\n\n    # Check if the sum of the elements is less than or equal to the maximum weight\n    if total <= w:\n        return True\n    else:\n        return False\n",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 868,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def smallest_change(arr):\n    n = len(arr)\n    # Check if the array is already palindromic\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            break\n    else:\n        return 0\n    # Find the minimum number of changes required\n    changes = 0\n    i, j = 0, n-1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes\n",
        "test": "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    \n    if total1 < total2:\n        return lst1\n    elif total1 > total2:\n        return lst2\n    else:\n        return lst1",
        "test": "assert total_match([], []) == []",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Returns True if the given number is the multiplication of three prime numbers,\n    and False otherwise.\n    \"\"\"\n    # Create a list of prime numbers less than or equal to the given number\n    primes = [2]\n    num = 3\n    while num <= a:\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    \n    # Check if the given number is the multiplication of three prime numbers\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    \n    # If the given number is not the multiplication of three prime numbers, return False\n    return False\n",
        "test": "assert is_multiply_prime(30) == True",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_simple_power(x, n):\n    \"\"\"Returns True if x is a simple power of n, False otherwise.\"\"\"\n    if n == 1:\n        return x == 1  # 1 is a simple power of any number, including 1\n    if x == 1:\n        return False  # 1 is not a simple power of any number except 1\n    i = 1\n    while i <= x:\n        if i == x:\n            return True\n        i *= n\n    return False\n",
        "test": "assert is_simple_power(2, 2) == True",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def iscube(a):\n    # Convert the input integer to a float\n    a = float(a)\n\n    # Find the cube root of the input integer\n    cube_root = a ** (1/3)\n\n    # If the cube root is a whole number, return True, otherwise return False\n    return cube_root == int(cube_root)\n",
        "test": "assert iscube(1) == True",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def hex_key(num):\n    primes = [2, 3, 5, 7, 11, 13, 17]\n    hex_digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    count = 0\n\n    for digit in num:\n        if digit in hex_digits and hex_digits[digit] in primes:\n            count += 1\n\n    return count",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts a decimal number to binary format.\n    \n    :param decimal: Decimal number to be converted.\n    :return: String representation of binary number with 'db' prefix and suffix.\n    \"\"\"\n    # Convert decimal to binary using built-in function.\n    binary = bin(decimal)[2:]\n    \n    # Prepend 'db' and append 'db' to the binary string.\n    binary = 'db' + binary + 'db'\n    \n    return binary\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i:i+3] in [s[i+3:i+6], s[i+6:i+9]]:\n            return False\n    return True\n",
        "test": "assert is_happy(\"a\") == False",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 81,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n            GPA       |    Letter grade\n            > 4.0            A+\n            > 3.7            A \n            > 3.3            A- \n            > 3.0            B+\n            > 2.7            B \n            > 2.3            B-\n            > 2.0            C+\n            > 1.7            C\n            > 1.3            C-\n            > 1.0            D+ \n            > 0.7            D \n            > 0.0            D-\n            < 0.0            E\n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    \n    return letter_grades\n",
        "test": "assert numerical_letter_grade([1, 2, 3, 4, 5]) == ['E', 'D', 'C', 'B', 'A']",
        "num_ids": 2109,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Return True if the length of the string is a prime number, False otherwise.\"\"\"\n    return is_prime(len(string))",
        "test": "assert prime_length('Hello') == True",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    # Loop through all possible n-digit numbers\n    for num in range(10**(n-1), 10**n):\n        # Check if the number starts with 1 or ends with 1\n        if str(num)[0] == '1' or str(num)[-1] == '1':\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n    \n    binary_sum = 0\n    while N > 0:\n        digit = N % 10\n        binary_sum += digit\n        N //= 10\n    \n    binary_sum = bin(binary_sum)[2:]\n    return binary_sum\n",
        "test": "assert solve(1000) == \"1\"",
        "num_ids": 826,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n",
        "test": "assert add([4, 2, 6, 7]) == 2 ",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)\n",
        "test": "assert anti_shuffle('Hi') == 'Hi'",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    result = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                result.append((i, j))\n    \n    result.sort(key=lambda x: (x[0], -x[1]))\n    \n    return result",
        "test": "assert get_row([], 1) == []",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_array(array):\n    # create a copy of the given array\n    sorted_array = array.copy()\n    # sort the array in ascending order if the sum of the first and last elements is odd\n    if sum(sorted_array[0], sorted_array[-1]) % 2 == 1:\n        sorted_array.sort()\n    # sort the array in descending order if the sum of the first and last elements is even\n    else:\n        sorted_array.sort(reverse=True)\n    # return the sorted array\n    return sorted_array\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encrypt(s):\n    # Convert the string to a list of characters\n    s_list = list(s)\n    \n    # Loop through the list of characters and encrypt them\n    for i in range(len(s_list)):\n        # Check if the character is a lowercase letter\n        if s_list[i].islower():\n            # Encrypt the lowercase letter by shifting it down by two multiplied by two\n            s_list[i] = chr(((ord(s_list[i]) - 97) - 2 * 2) % 26 + 97)\n        # Check if the character is an uppercase letter\n        elif s_list[i].isupper():\n            # Encrypt the uppercase letter by shifting it down by two multiplied by two\n            s_list[i] = chr(((ord(s_list[i]) - 65) - 2 * 2) % 26 + 65)\n    \n    # Convert the list of characters back to a string and return it\n    return ''.join(s_list)\n",
        "test": "assert encrypt('asdfghjkl') == 'ewhjklnop'",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    lst = sorted(set(lst))\n    \n    for i in range(len(lst)-1):\n        if lst[i] != lst[i+1]:\n            return lst[i+1]\n        \n    return None\n",
        "test": "assert next_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def any_int(x, y, z):\n    if type(x) != int or type(y) != int or type(z) != int:\n        return False\n    elif x == y+z or y == x+z or z == x+y:\n        return True\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True, \"Test case 1 failed\"",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in vowels:\n                index = (vowels.index(letter.lower()) + 2) % 5\n                encoded_message += vowels[index].upper()\n            else:\n                encoded_message += letter.swapcase()\n        else:\n            encoded_message += letter\n    return encoded_message\n",
        "test": "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value and return the sum of its digits\"\"\"\n    primes = []\n    for num in lst:\n        if is_prime(num):\n            primes.append(num)\n    if len(primes) == 0:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime)) ",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"Incorrect Output\"",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Check if all keys are strings in lower or upper case\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return all_lower or all_upper\n",
        "test": "assert check_dict_case({}) == False, \"Empty dictionary should return False\"",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    result = []\n    for i in range(2, n):\n        if is_prime(i):\n            result.append(i)\n            if len(result) == n:\n                break\n    return result",
        "test": "assert count_up_to(5) == [2, 3]",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits. \n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    \n    def get_unit_digit(num):\n        \"\"\"Helper function to get the unit digit of a number\"\"\"\n        return num % 10\n    \n    unit_digit_a = get_unit_digit(a)\n    unit_digit_b = get_unit_digit(b)\n    \n    return unit_digit_a * unit_digit_b\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count\n",
        "test": "assert count_upper('aBCdEf') == 1",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Convert the string to float\n    num = float(value)\n    \n    # Check if the number is already an integer\n    if num.is_integer():\n        return int(num)\n    \n    # Calculate the difference between the number and the floor and ceil of the number\n    diff_floor = num - math.floor(num)\n    diff_ceil = math.ceil(num) - num\n    \n    # Check if the number is equidistant from two integers\n    if diff_floor == diff_ceil:\n        # If yes, round away from zero\n        if num >= 0:\n            return int(math.ceil(num))\n        else:\n            return int(math.floor(num))\n    else:\n        # If not, return the closest integer\n        if diff_floor < diff_ceil:\n            return int(math.floor(num))\n        else:\n            return int(math.ceil(num))\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n    # Split the string into words based on commas or spaces\n    words = s.split(\", \")\n    words = words[0].split() + words[1:]\n    \n    # Remove any trailing spaces from each word and return the list of words\n    words = [word.strip() for word in words]\n    return words\n",
        "test": "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def choose_num(x, y):\n    # Check if x and y are positive integers\n    if not (isinstance(x, int) and isinstance(y, int) and x > 0 and y > 0):\n        return -1\n    \n    # Initialize the result variable\n    result = -1\n    \n    # Check if there's an even number in the range [x, y]\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            result = i\n    \n    # Return the result\n    return result\n",
        "test": "assert choose_num(13, 12) == -1",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        total = m - n + 1\n        avg = sum(range(n, m+1)) / total\n        rounded_avg = round(avg)\n        return bin(rounded_avg)\n",
        "test": "assert rounded_avg(7, 5) == -1",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if num > 0:\n            if not any(int(digit) % 2 == 0 for digit in str(num)):\n                result.append(num)\n    return sorted(result)\n",
        "test": "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def by_length(arr):\n    # If the array is empty, return an empty array\n    if len(arr) == 0:\n        return []\n\n    # Sort the array between 1 and 9 inclusive\n    arr = sorted([x for x in arr if 1 <= x <= 9])\n\n    # Reverse the array\n    arr = arr[::-1]\n\n    # Replace each digit by its corresponding name from \"One\", \"Two\", ..., \"Nine\"\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [names[x - 1] for x in arr]\n\n    # Return the final result\n    return result\n",
        "test": "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
        "num_ids": 1418,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise. \n    i starts from 1. \n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). \n    Example: \n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\n\ndef factorial(n):\n    \"\"\" Calculate the factorial of n \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\n\ndef sum_of_numbers(n):\n    \"\"\" Calculate the sum of numbers from 1 to n \"\"\"\n    return n * (n+1) // 2\n",
        "test": "assert f(0) == []",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_of_digits = 0\n        if num < 0:\n            num = abs(num)\n            signed_digit = -1\n        else:\n            signed_digit = 1\n        while num > 0:\n            digit = num % 10\n            sum_of_digits += digit\n            num //= 10\n        if sum_of_digits * signed_digit > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one \n    position in the right direction. The last element of the array will be moved to \n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False. If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                    be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                    array by performing any number of right shift operations.\n    \n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return True\n    i = 0\n    while i < n-1 and arr[i+1] >= arr[i]:\n        i += 1\n    if i == n-1:\n        return True\n    for j in range(i+1, n):\n        if arr[j] < arr[i]:\n            return False\n    return True\n",
        "test": "assert move_one_ball([3, 5, 4, 1, 2]) == False",
        "num_ids": 1726,
        "indeed": false
    },
    {
        "number": 110,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def exchange(lst1, lst2):\n    even_lst1 = [x for x in lst1 if x % 2 == 0]\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    if len(even_lst1) == len(lst1):\n        return \"YES\"\n    elif len(odd_lst1) == 0:\n        return \"YES\"\n    else:\n        for i in range(len(odd_lst1)):\n            for j in range(len(lst2)):\n                if lst2[j] % 2 != 0:\n                    if lst1[i] % 2 == 0:\n                        lst1[i] = lst2[j]\n                        lst2[j] = odd_lst1[i]\n                        return exchange(lst1, lst2)\n        return \"NO\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
        "num_ids": 1266,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters,\n    return a dictionary of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \n    \"\"\"\n    \n    # Split the input string into a list of lowercase letters\n    letters = test.lower().split()\n    \n    # Initialize an empty dictionary to store the letter counts\n    counts = {}\n    \n    # Iterate over the list of letters and count the occurrences of each letter\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    # Find the letter(s) with the highest count(s)\n    max_count = 0\n    max_letters = []\n    for letter, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_letters = [letter]\n        elif count == max_count:\n            max_letters.append(letter)\n    \n    # Create a dictionary with the letter(s) and their count(s)\n    result = {}\n    for letter in max_letters:\n        result[letter] = counts[letter]\n    \n    return result\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 1420,
        "indeed": true
    },
    {
        "number": 112,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Convert the string c to a set for faster lookups\n    c_set = set(c)\n\n    # Filter out characters in s that are in c\n    result = ''.join(ch for ch in s if ch not in c_set)\n\n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return result, is_palindrome\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 641,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_count(lst):\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if int(lst[i][j]) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements in the string {i} of the input is {count}.\")\n    return result\n",
        "test": "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1 in the string 1 of the input.\",",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n        if total_sum < min_sum:\n            min_sum = total_sum\n        if total_sum > 0:\n            total_sum = 0\n    return min_sum\n",
        "test": "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    total_water = sum([sum(row) for row in grid])\n    bucket_count = math.ceil(total_water / capacity)\n\n    return bucket_count\n",
        "test": "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Example 1 failed\"",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order. \n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    \n    def count_ones(num):\n        \"\"\"\n        This helper function counts the number of ones in a binary representation of a number.\n        \"\"\"\n        count = 0\n        while num > 0:\n            if num & 1 == 1:\n                count += 1\n            num >>= 1\n        return count\n    \n    # Sort the array based on the number of ones in their binary representation\n    sorted_arr = sorted(arr, key=lambda x: (count_ones(x), x))\n    \n    return sorted_arr\n",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s. \n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def is_consonant(c):\n        \"\"\"Helper function to determine if a character is a consonant.\"\"\"\n        return c.lower() in 'bcdfghjklmnpqrstvwxyz'\n\n    words = s.split()  # Split the string into words\n    result = []\n\n    for word in words:\n        num_consonants = 0\n        for c in word:\n            if is_consonant(c):\n                num_consonants += 1\n        if num_consonants == n:\n            result.append(word)\n\n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 941,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+1] not in vowels and word[i+2] not in vowels:\n            return word[i]\n    return \"\"\n",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only. Your job is to check if it is\n    possible to concatenate the two strings in some order, that the resulting\n    string will be good. A string S is considered to be good if and only\n    if all parentheses in S are balanced. For example: the string '(())()' is\n    good, while the string '())' is not. Return 'Yes' if there's a way to\n    make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # Concatenate the two strings\n    s = lst[0] + lst[1]\n\n    # Initialize a stack to keep track of open parentheses\n    stack = []\n\n    # Loop through each character in the concatenated string\n    for char in s:\n        # If the character is an open parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a close parenthesis, pop from the stack and make sure it's a match\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return 'No'\n\n    # If the stack is empty at the end, the string is good\n    if not stack:\n        return 'Yes'\n    # Otherwise, there are unmatched open parentheses\n    else:\n        return 'No'\n",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Return the first k elements of the sorted array\n    return arr[:k]",
        "test": "assert maximum([4, -4, 4], 2) == [4, 4]",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    # Initialize the sum variable to 0\n    total = 0\n    \n    # Loop through the list\n    for i in range(len(lst)):\n        # Check if the current element is odd and the index is even\n        if lst[i] % 2 != 0 and i % 2 == 0:\n            # Add the odd element to the total sum\n            total += lst[i]\n    \n    return total\n",
        "test": "assert solution([5, 8, 7, 1]) == 12, \"Test case 1 failed\"",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Initialize the sum to zero\n    total_sum = 0\n\n    # Iterate through the first k elements of arr\n    for i in range(k):\n        # If the element has at most two digits, add it to the sum\n        if arr[i] < 100 and arr[i] >= 0:\n            total_sum += arr[i]\n\n    # Return the total sum\n    return total_sum\n",
        "test": "assert add_elements([1,2,3,4,5], 5) == 15, \"Incorrect output for add_elements([1,2,3,4,5], 5)\"",
        "num_ids": 917,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def collatz(n):\n    \"\"\"\n    Given a positive integer n, return the collatz sequence as a list.\n    \"\"\"\n    seq = []\n    while n > 1:\n        seq.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    seq.append(1)\n    return seq\n\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    collatz_list = collatz(n)\n    odd_nums = [num for num in collatz_list if num % 2 != 0]\n    odd_nums.sort()\n    return odd_nums\n",
        "test": "assert get_odd_collatz(5) == [1, 5]",
        "num_ids": 1308,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def valid_date(date):\n    \"\"\"\n    This function validates a given date string and returns True if the date is valid, otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    For example:\n    valid_date('03-11-2000') => True\n    valid_date('15-01-2012') => False\n    valid_date('04-0-2040') => False\n    valid_date('06-04-2020') => True\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # check if the date string is empty\n    if not date:\n        return False\n\n    # split the date string into month, day, and year\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    # check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # check if the day is valid\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    # check if the year is valid\n    if year < 1:\n        return False\n\n    return True",
        "test": "assert valid_date('03-11-2000') == True",
        "num_ids": 1195,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 != 0:\n                count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Return \"YES\" if the length of intersection of the two intervals is a prime number, \"NO\" otherwise.\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Check if the intervals intersect\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    # Determine the start and end of the intersection\n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    # Compute the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "test": "assert intersection((1, 2), (2, 3)) == \"NO\"",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    \n    product = 1\n    for num in arr:\n        if num == 0:\n            product *= 0\n        elif num > 0:\n            product *= 1\n        else:\n            product *= -1\n    \n    magnitude_sum = sum([abs(num) for num in arr])\n    \n    return magnitude_sum * product\n",
        "test": "assert prod_signs([1, 2, 2, -4]) == -9",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n\n        if x < 0 or x >= n or y < 0 or y >= n:\n            return None\n\n        cell = grid[x][y]\n        if cell in path:\n            return None\n\n        path.append(cell)\n\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            result = dfs(x + dx, y + dy, path)\n            if result is not None:\n                return result\n\n        path.pop()\n        return None\n\n    n = len(grid)\n    min_path = None\n\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, [])\n            if path is not None and (min_path is None or path < min_path):\n                min_path = path\n\n    return min_path",
        "test": "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 1) == [1]",
        "num_ids": 2003,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence. \n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    tribonacci_sequence = [1, 3]\n    current_n = 1\n\n    while len(tribonacci_sequence) < n + 1:\n        if current_n % 2 == 0:\n            tribonacci_sequence.append(1 + current_n / 2)\n        else:\n            tribonacci_sequence.append(tribonacci_sequence[-1] + tribonacci_sequence[-2] + tribonacci_sequence[-3])\n        current_n += 1\n\n    return tribonacci_sequence\n",
        "test": "assert tri(1) == [1, 3]",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits. \n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        n //= 10\n        \n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n            \n    return product if has_odd else 0\n",
        "test": "assert digits(1) == 1",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_nested(string):\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    \n    # Ceiling each element in the list\n    ceil_lst = [math.ceil(i) for i in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    sum_squares = sum([i**2 for i in ceil_lst])\n    \n    return sum_squares\n",
        "test": "assert sum_squares([1, 2, 3]) == 14",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    \n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    \n    words = txt.split()\n    last_word = words[-1]\n    if last_word == last_char:\n        return True\n    \n    return False\n",
        "test": "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it.\n    If no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    \n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1\n",
        "test": "assert can_arrange([1,2,3]) == -1",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 136,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    try:\n        a = float(a)\n        b = float(b)\n    except ValueError:\n        pass\n    \n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n",
        "test": "assert compare_one(1, 2.5) == 2.5",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    Example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 1:\n        return False\n\n    for i in range(2, n - 2):\n        if (n - i) % 2 == 1:\n            continue\n        for j in range(i + 2, n - 2):\n            if (n - i - j) % 2 == 1:\n                continue\n            for k in range(j + 2, n - 2):\n                if (n - i - j - k) % 2 == 1:\n                    continue\n                for l in range(k + 2, n - 2):\n                    if (n - i - j - k - l) % 2 == 1:\n                        continue\n                    return True\n    return False",
        "test": "assert is_equal_to_sum_even(4) == False",
        "num_ids": 975,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def special_factorial(n):\n    \"\"\"\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n",
        "test": "assert special_factorial(1) == 1",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replacing all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replacing all consecutive spaces with -\n    text = text.replace('__', '-')\n    text = text.replace('_-', '-')\n    \n    # Replacing all consecutive underscores with single underscore\n    text = text.replace('__', '_')\n    \n    return text\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def file_name_check(file_name):\n    # Check if there are more than three digits in the file name\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into substring before and after the dot\n    parts = file_name.split('.')\n\n    # Check if the substring before the dot is empty or starts with a letter\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all conditions are met, return 'Yes'\n    return 'Yes'",
        "test": "assert file_name_check(\"1example.dll\") == \"No\"",
        "num_ids": 1079,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    total = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        \n        total += lst[i]\n    \n    return total\n",
        "test": "assert sum_squares([1, 2, 3]) == 6",
        "num_ids": 1003,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence, the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        1 <= len(sentence) <= 100\n        sentence contains only letters\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)\n",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def simplify(x, n):\n    # Extract numerator and denominator of x and n\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    # Multiply x and n\n    product_num = x_num * n_num\n    product_denom = x_denom * n_denom\n\n    # Check if the product is a whole number\n    if product_num % product_denom == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert simplify(\"1/5\", \"5/1\") == True",
        "num_ids": 503,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, \n    order them based on their index in original list.\n    \"\"\"\n    def digit_sum(num):\n        \"\"\"\n        Returns the sum of digits of a given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums.sort(key=lambda x: (digit_sum(x), nums.index(x)))\n    return nums\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and len(str(num)) > 1:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # Output: 2\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 147,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    # Create the array a\n    a = [i*i - i + 1 for i in range(1, n+1)]\n\n    # Initialize the count of valid triples\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                # Check if the sum of elements is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 879,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    \n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    \n    return tuple(planets[planet1_index+1:planet2_index])\n",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length and alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n\n    return sorted_lst\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef x_or_y(n, x, y):\n    \"\"\"\n    A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0   \n    \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            result += num ** 2\n    return result\n",
        "test": "assert double_the_difference([-1, -2, 0]) == 0",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class.\n    The strength of the extension is as follows:\n    Let CAP be the number of the uppercase letters in the extension's name,\n    and let SM be the number of lowercase letters in the extension's name,\n    the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    \"\"\"\n    \n    # Create a list of tuples containing extension name and strength\n    ext_strength = [(ext, sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())) for ext in extensions]\n    \n    # Sort the list in descending order of strength and alphabetically for same strength\n    ext_strength.sort(key=lambda x: (-x[1], x[0]))\n    \n    # Return the strongest extension in the format 'ClassName.StrongestExtensionName'\n    return f\"{class_name}.{ext_strength[0][0]}\"\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 1121,
        "indeed": false
    },
    {
        "number": 154,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cycpattern_check(a, b):\n    # Convert both the strings to lowercase\n    a = a.lower()\n    b = b.lower()\n\n    # Check if b is a substring of a\n    if b in a:\n        return True\n\n    # Find all possible rotations of b and check if they are substrings of a\n    b_rotations = []\n    for i in range(len(b)):\n        b_rotations.append(b[i:] + b[:i])\n        \n    for b_rot in b_rotations:\n        if b_rot in a:\n            return True\n        \n    # If none of the rotations are substrings of a, return False\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)  # Convert to positive integer\n    even_count = 0\n    odd_count = 0\n    \n    # Count even and odd digits\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    \n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 156,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ''\n    \n    # Mappings of roman numerals to their values\n    roman_to_decimal = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1,\n    }\n    \n    # Loop through the roman numerals in descending order of value\n    for roman, decimal in roman_to_decimal.items():\n        while number >= decimal:\n            roman_numeral += roman\n            number -= decimal\n    \n    return roman_numeral.lower()\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 1444,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def right_angle_triangle(a, b, c):\n    # Check if the sum of the lengths of any two sides is greater than the length of the third side\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Check if the lengths of any two sides are equal\n    if a == b == c:\n        return False\n    \n    # Check if the lengths of any two sides are not equal and the square of the sum of the lengths of any two sides is greater than the square of the length of the third side\n    if a**2 + b**2 > c**2 or b**2 + c**2 > a**2 or c**2 + a**2 > b**2:\n        return True\n    \n    # If the triangle is not a right-angled triangle\n    return False\n",
        "test": "assert right_angle_triangle(3, 4, 5) == True",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 158,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count or (count == max_count and word < max_word):\n            max_word = word\n            max_count = count\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \n    Have fun :)\n    \"\"\"\n    \n    if remaining == 0:\n        return [number, 0]\n    elif need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n",
        "test": "assert eat(5, 6, 10) == [11, 4]",
        "num_ids": 1420,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # First, let's concatenate the operands and operators into a string\n    # representing the expression to be evaluated.\n    expression = \"\"\n    for i in range(len(operand)):\n        expression += str(operand[i])\n        if i < len(operator):\n            expression += operator[i]\n    \n    # Now, we can evaluate the expression using the eval function.\n    result = eval(expression)\n    \n    return result\n",
        "test": "assert do_algebra(['+'], [1, 2]) == 3",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def solve(s):\n    result = []\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            result.append(char.upper() if char.islower() else char.lower())\n        else:\n            result.append(char)\n    if not has_letter:\n        result = result[::-1]\n    return ''.join(result)\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62' ",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    result = []\n    for i in range(a, b + 1):\n        for digit in str(i):\n            if digit == '0' or digit == '2' or digit == '4' or digit == '6' or digit == '8':\n                result.append(int(digit))\n    result.sort()\n    return result",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 890,
        "indeed": false
    }
]