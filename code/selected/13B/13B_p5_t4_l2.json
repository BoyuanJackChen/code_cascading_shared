[
    {
        "number": 0,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "test": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
        "num_ids": 1396,
        "indeed": true
    },
    {
        "number": 1,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    stack = []\n    current = \"\"\n\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(\"(\")\n            current += char\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                current += char\n            else:\n                result.append(current.strip())\n                current = \"\"\n\n    if current:\n        result.append(current.strip())\n\n    return result",
        "test": "assert separate_paren_groups('') == []",
        "num_ids": 1849,
        "indeed": false
    },
    {
        "number": 2,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    int_part = int(number)\n    dec_part = number - int_part\n    return dec_part\n",
        "test": "assert truncate_number(3.5) == 0.5",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero,\n    and at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "test": "assert below_zero([1, 2, 3]) == False",
        "num_ids": 1086,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset. \n    Mean Absolute Deviation is the average absolute difference between each \n    element and a centerpoint (mean in this case): \n    MAD = average | x - x_mean |\n    \"\"\"\n    # Calculate mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate absolute differences between each number and mean\n    abs_diffs = [abs(num - mean) for num in numbers]\n    \n    # Calculate mean of absolute differences\n    mad = sum(abs_diffs) / len(numbers)\n    \n    return mad\n",
        "test": "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
        "num_ids": 1554,
        "indeed": true
    },
    {
        "number": 5,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "test": "assert intersperse([], 4) == []",
        "num_ids": 1337,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result",
        "test": "assert parse_nested_parens('') == []",
        "num_ids": 1439,
        "indeed": true
    },
    {
        "number": 7,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]",
        "test": "assert filter_by_substring([], 'a') == []",
        "num_ids": 1206,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    \n    # Initialize sum and product to 0 and 1, respectively\n    total_sum = 0\n    total_product = 1\n    \n    # Iterate through the list of numbers and add each number to the sum and multiply it with the product\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    # Return a tuple containing the sum and product\n    return (total_sum, total_product)\n",
        "test": "assert sum_product([1, 2, 3, 4]) == (10, 24)",
        "num_ids": 1368,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \n    Example:\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    \n    if not numbers:\n        return []\n    \n    max_num = numbers[0]\n    result = [max_num]\n    \n    for num in numbers[1:]:\n        max_num = max(max_num, num)\n        result.append(max_num)\n        \n    return result\n",
        "test": "assert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]",
        "num_ids": 1726,
        "indeed": true
    },
    {
        "number": 10,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Initialize variables\n    prefix = ''\n    suffix = string\n    \n    # Find the longest palindromic suffix of the string\n    while not is_palindrome(suffix):\n        prefix = suffix[0] + prefix\n        suffix = suffix[1:]\n    \n    # Append the prefix to the end of the string to make a palindrome\n    return string + prefix[::-1]\n",
        "test": "assert make_palindrome('') == ''",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    # Convert string inputs to lists of 1s and 0s\n    a_bits = list(map(int, a))\n    b_bits = list(map(int, b))\n\n    # Perform XOR operation on the bits and return as a string\n    return ''.join(str(a_bits[i] ^ b_bits[i]) for i in range(len(a_bits)))",
        "test": "assert string_xor('010', '110') == '100'",
        "num_ids": 1325,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    max_len = 0\n    max_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n    return max_str\n",
        "test": "assert longest([]) is None",
        "num_ids": 1113,
        "indeed": true
    },
    {
        "number": 13,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test": "assert greatest_common_divisor(3, 5) == 1, \"greatest_common_divisor(3, 5) should be 1\"",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes ",
        "test": "assert all_prefixes('') == []",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 15,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    return ' '.join([str(i) for i in range(n+1)])\n",
        "test": "assert string_sequence(0) == '0'",
        "num_ids": 830,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n\n    :param string: A string to analyze\n    :return: The number of distinct characters in the string\n    \"\"\"\n    distinct_characters = set()\n    for char in string:\n        distinct_characters.add(char.lower())\n    return len(distinct_characters)\n",
        "test": "assert count_distinct_characters('xyzXYZ') == 3",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats_dict = {'o': 4, 'o|': 2, '.|': 1}\n    beats_list = []\n\n    for note in music_string.split():\n        beats_list.append(beats_dict[note])\n    \n    return beats_list\n",
        "test": "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
        "num_ids": 2102,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "test": "assert how_many_times('', 'a') == 0",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 19,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # split the input string into a list of strings\n    num_list = numbers.split()\n\n    # create a dictionary to map numberals to their corresponding integers\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    # use the map() function to convert each string in num_list to its corresponding integer\n    num_int_list = list(map(lambda x: num_dict[x], num_list))\n\n    # sort the num_int_list in ascending order\n    num_int_list.sort()\n\n    # use the map() function again to convert each integer in num_int_list back to its corresponding numberal string\n    num_str_list = list(map(lambda x: list(num_dict.keys())[list(num_dict.values()).index(x)], num_int_list))\n\n    # join the num_str_list elements with spaces and return the result\n    return ' '.join(num_str_list)\n",
        "test": "assert sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'",
        "num_ids": 1750,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair\n",
        "test": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
        "num_ids": 2294,
        "indeed": false
    },
    {
        "number": 21,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list, \n    such that the smallest number will become 0 and the largest will become 1\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    diff = max_num - min_num\n    return [(num - min_num) / diff for num in numbers]\n",
        "test": "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
        "num_ids": 2216,
        "indeed": true
    },
    {
        "number": 22,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [val for val in values if isinstance(val, int)]\n",
        "test": "assert filter_integers(['a', 3.14, 5]) == [5]",
        "num_ids": 879,
        "indeed": true
    },
    {
        "number": 23,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "test": "assert strlen('') == 0",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 24,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "test": "assert largest_divisor(15) == 5 ",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 25,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    \n    # 2 is the only even prime number\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n        \n    # check odd numbers up to square root of n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 2\n            \n    # n should be a prime number at this point\n    if n > 2:\n        factors.append(n)\n        \n    return factors ",
        "test": "assert factorize(8) == [2, 2, 2]",
        "num_ids": 2435,
        "indeed": true
    },
    {
        "number": 26,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Create a dictionary to count the frequency of each element\n    freq = {}\n    for num in numbers:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Create a new list with only the elements that occur once\n    result = []\n    for num in numbers:\n        if freq[num] == 1:\n            result.append(num)\n    \n    return result\n",
        "test": "assert remove_duplicates([]) == []",
        "num_ids": 1325,
        "indeed": true
    },
    {
        "number": 27,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result",
        "test": "assert flip_case('Hello') == 'hELLO'",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 28,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "test": "assert concatenate([]) == ''",
        "num_ids": 761,
        "indeed": true
    },
    {
        "number": 29,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix. \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n",
        "test": "assert filter_by_prefix([], 'a') == []",
        "num_ids": 1059,
        "indeed": true
    },
    {
        "number": 30,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]\n",
        "test": "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 31,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_prime(6) == False, \"Test case failed\"",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 32,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution. \n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients should be even\")\n    \n    n = len(xs) // 2\n    if n == 0:\n        return 0.0\n    \n    a = xs[0]\n    b = xs[1]\n    \n    if a == 0:\n        return find_zero(xs[1:])\n    \n    x1 = -b / (2 * a)\n    y1 = poly(xs, x1)\n    \n    if y1 == 0:\n        return x1\n    \n    x2 = x1 - y1 / (2 * a)\n    y2 = poly(xs, x2)\n    \n    if y2 == 0:\n        return x2\n    \n    return x2\n",
        "test": "assert find_zero([1, 2]) == -0.5",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 33,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    l_sorted = sorted(l)\n    l_new = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l_sorted.pop(0))\n        else:\n            l_new.append(l[i])\n    return l_new\n",
        "test": "assert sort_third([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1763,
        "indeed": false
    },
    {
        "number": 34,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))\n",
        "test": "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 35,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None\n    max_val = l[0]\n    for val in l[1:]:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_element([1, 2, 3]) == 3",
        "num_ids": 1032,
        "indeed": true
    },
    {
        "number": 36,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for j in str(i):\n                if j == '7':\n                    count += 1\n    return count\n",
        "test": "assert fizz_buzz(50) == 0",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 37,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_list = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_list.sort()\n    for i in range(len(even_list)):\n        l[2 * i] = even_list[i]\n    return l\n",
        "test": "assert sort_even([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1814,
        "indeed": true
    },
    {
        "number": 38,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "test": "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
        "num_ids": 1992,
        "indeed": true
    },
    {
        "number": 39,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def is_prime(num: int) -> bool:\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> int:\n    \"\"\"\n    Helper function to generate n-th Fibonacci number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    i = 1\n    fib = fibonacci(i)\n    while not is_prime(fib):\n        i += 1\n        fib = fibonacci(i)\n    if n == 1:\n        return fib\n    else:\n        return prime_fib(n-1)\n",
        "test": "assert prime_fib(1) == 2",
        "num_ids": 1745,
        "indeed": false
    },
    {
        "number": 40,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    \n    l.sort()\n    \n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        \n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            \n            if current_sum == 0:\n                return True\n            \n            if current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False\n",
        "test": "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
        "num_ids": 2245,
        "indeed": true
    },
    {
        "number": 41,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line. \n    n cars are driving left to right;  simultaneously, a different set of n cars \n    are driving right to left.   The two sets of cars start out being very far from \n    each other.  All cars move in the same speed.  Two cars are said to collide \n    when a car that's moving left to right hits a car that's moving right to left. \n    However, the cars are infinitely sturdy and strong; as a result, they continue moving \n    in their trajectory as if they did not collide. \n\n    This function outputs the number of such collisions. \n    \"\"\"\n\n    # initialize the left to right and right to left car sets\n    l2r_cars = [i for i in range(n)]\n    r2l_cars = [i for i in range(n)]\n\n    # initialize the collision count\n    collision_count = 0\n\n    # iterate through each car in the left to right set\n    for i in range(n):\n        # iterate through each car in the right to left set\n        for j in range(n):\n            # check if cars i and j collide\n            if i == j:\n                continue  # skip if it's the same car\n            if l2r_cars[i] < r2l_cars[j]:\n                collision_count += 1\n\n    return collision_count\n",
        "test": "assert car_race_collision(1) == 0",
        "num_ids": 1851,
        "indeed": false
    },
    {
        "number": 42,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]\n",
        "test": "assert incr_list([1, 2, 3]) == [2, 3, 4]",
        "num_ids": 1344,
        "indeed": true
    },
    {
        "number": 43,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    True\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "test": "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
        "num_ids": 1705,
        "indeed": true
    },
    {
        "number": 44,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n    return ''.join(str(digit) for digit in digits)\n",
        "test": "assert change_base(8, 3) == '22'",
        "num_ids": 1246,
        "indeed": true
    },
    {
        "number": 45,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h",
        "test": "assert triangle_area(5, 3) == 7.5  # Test case 1",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 46,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "test": "assert fib4(0) == 0",
        "num_ids": 1773,
        "indeed": true
    },
    {
        "number": 47,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    l.sort()\n    if n % 2 == 0:  # even number of elements\n        return (l[n//2-1] + l[n//2]) / 2\n    else:  # odd number of elements\n        return l[n//2]\n",
        "test": "assert median([1, 2, 3, 4]) == 2.5",
        "num_ids": 1219,
        "indeed": true
    },
    {
        "number": 48,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text.lower() == text[::-1].lower()\n",
        "test": "assert is_palindrome('') == True",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 49,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) * modp(n // 2, p) % p\n    else:\n        return (modp((n - 1) // 2, p) * modp((n - 1) // 2, p) * 2) % p\n",
        "test": "assert modp(0, 101) == 1",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 50,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "test": "assert decode_shift(encode_shift(\"hello\")) == \"hello\"",
        "num_ids": 973,
        "indeed": true
    },
    {
        "number": 51,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "test": "assert remove_vowels('') == ''",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 52,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def below_threshold(l: list, t: int):\n    \"\"\"\n    Returns True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "test": "assert below_threshold([1, 2, 4, 10], 100) == True",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 53,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "test": "assert add(2, 3) == 5",
        "num_ids": 514,
        "indeed": true
    },
    {
        "number": 54,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # convert strings to sets of characters\n    s0_set = set(s0)\n    s1_set = set(s1)\n\n    # check if the sets have the same length\n    if len(s0_set) != len(s1_set):\n        return False\n\n    # check if the sets have the same elements\n    if s0_set != s1_set:\n        return False\n\n    return True\n",
        "test": "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 55,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_minus_2 = 0\n        fib_minus_1 = 1\n        for i in range(2, n+1):\n            fib_n = fib_minus_1 + fib_minus_2\n            fib_minus_2 = fib_minus_1\n            fib_minus_1 = fib_n\n        return fib_n\n",
        "test": "assert fib(10) == 55",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
        "test": "assert correct_bracketing(\"<\") == False",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 57,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        elif l[i] > l[i-1]:\n            decreasing = False\n\n    return increasing or decreasing\n",
        "test": "assert monotonic([1, 2, 4, 20]) == True",
        "num_ids": 1173,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))\n",
        "test": "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
        "num_ids": 1271,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n.\n    Assume n > 1 and is not a prime.\n    \"\"\"\n    # Find the largest prime factor of n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "test": "assert largest_prime_factor(2048) == 2",
        "num_ids": 1427,
        "indeed": true
    },
    {
        "number": 60,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2\n",
        "test": "assert sum_to_n(30) == 465",
        "num_ids": 840,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert correct_bracketing(\"(\") == False",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n",
        "test": "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "test": "assert fibfib(0) == 0",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def vowels_count(s):\n    \"\"\"\n    Returns the number of vowels in a given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        elif char.lower() == 'y' and s.index(char) == len(s)-1:\n            count += 1\n    return count\n",
        "test": "assert vowels_count(\"abcde\") == 2, \"Incorrect vowels count\"",
        "num_ids": 796,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits,\n    return digits reversed.\n    \"\"\"\n    # convert integer to string\n    x_str = str(x)\n\n    # determine number of digits in x\n    num_digits = len(x_str)\n\n    # if shift > number of digits, reverse digits\n    if shift > num_digits:\n        return x_str[::-1]\n\n    # extract shifted digits and join them\n    shifted_digits = x_str[shift:] + x_str[:shift]\n    return \"\".join(shifted_digits)\n",
        "test": "assert circular_shift(12, 1) == \"21\"",
        "num_ids": 1317,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digitSum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the upper characters'\n    ASCII codes.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, add its ASCII code to the sum\n            sum += ord(char)\n    \n    # Return the final sum\n    return sum\n",
        "test": "assert digitSum(\"\") == 0",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit\n    this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent\n    the total number of the fruits in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    # splitting the string into words\n    words = s.split()\n\n    # finding the number of apples and oranges\n    apples = int(words[0])\n    oranges = int(words[2])\n\n    # finding the total number of fruits in the basket\n    total_fruits = n - apples - oranges\n\n    return total_fruits\n",
        "test": "assert fruit_distribution(\"100 apples and 1 oranges\",120) == 19 ",
        "num_ids": 2166,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pluck(arr):\n    if not arr:\n        return []\n    \n    min_even_value = float('inf')\n    min_even_index = -1\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            if node < min_even_value:\n                min_even_value = node\n                min_even_index = i\n    \n    if min_even_index == -1:\n        return []\n    \n    return [min_even_value, min_even_index]\n",
        "test": "assert pluck([1, 2, 3]) == [2, 1]",
        "num_ids": 2092,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the greatest integer that is greater than zero and has a frequency greater than or equal to the value of the integer itself\n    for num in sorted(freq_dict, reverse=True):\n        if num > 0 and freq_dict[num] >= num:\n            return num\n    \n    # If no such value exists, return -1\n    return -1\n",
        "test": "assert search([5, 5, 4, 4, 4]) == -1",
        "num_ids": 1364,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result\n",
        "test": "assert strange_sort_list([]) == []",
        "num_ids": 1893,
        "indeed": true
    },
    {
        "number": 71,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.  \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side. \n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points and return\n        return round(area, 2)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1\n",
        "test": "assert triangle_area(3, 4, 5) == 6.00, \"Testing triangle_area with valid triangle.\"",
        "num_ids": 1734,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def will_it_fly(q, w):\n    # Check if the list is balanced\n    if q != q[::-1]:\n        return False\n    \n    # Check if the sum of elements is less than or equal the maximum possible weight\n    if sum(q) > w:\n        return False\n    \n    return True",
        "test": "assert will_it_fly([1, 2], 5) == False",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 73,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    n = len(arr)\n    mid = n // 2\n\n    # Count the number of elements that need to be changed\n    # in the left half of the array\n    left = 0\n    for i in range(mid):\n        if arr[i] != arr[n - 1 - i]:\n            left += 1\n\n    # If the array is already palindromic, return 0\n    if left == 0:\n        return 0\n\n    # If the left half of the array is already palindromic,\n    # find the number of elements that need to be changed\n    # in the right half of the array\n    if left == n // 2:\n        right = 0\n        for i in range(mid, n):\n            if arr[i] != arr[n - 1 - i]:\n                right += 1\n        return right\n\n    # If the array is not already palindromic, find the minimum number of elements that\n    # need to be changed in the array\n    min_left = left\n    min_right = left\n\n    for i in range(mid):\n        if arr[i] != arr[n - 1 - i]:\n            min_left -= 1\n            min_right -= 1\n\n    for i in range(mid, n):\n        if arr[i] != arr[n - 1 - i]:\n            min_right -= 1\n\n    return min_left + min_right + 1",
        "test": "assert smallest_change([1, 2, 3, 2, 1]) == 0",
        "num_ids": 2168,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    # Get the total number of chars in the strings of each list\n    count_lst1 = sum([len(s) for s in lst1])\n    count_lst2 = sum([len(s) for s in lst2])\n\n    # Compare the counts and return the list with fewer chars\n    if count_lst1 == count_lst2:\n        return lst1\n    elif count_lst1 < count_lst2:\n        return lst1\n    else:\n        return lst2",
        "test": "assert total_match([], []) == []",
        "num_ids": 1690,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_multiply_prime(a):\n    \"\"\"\n    Returns True if the given number is the multiplication of 3 prime numbers\n    and False otherwise. Assumes that (a) is less than 100.\n    \"\"\"\n    if a < 10:\n        return False\n    primes = [2, 3, 5, 7]\n    for p in primes:\n        if a % p == 0:\n            a //= p\n            if a == 1:\n                return True\n            elif a in primes:\n                a //= p\n                if a == 1:\n                    return True\n    return False\n",
        "test": "assert is_multiply_prime(45) == False",
        "num_ids": 1536,
        "indeed": false
    },
    {
        "number": 76,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, False otherwise.\n    \n    A number x is a simple power of n if there exists an integer k such that n**k = x.\n    \"\"\"\n    \n    # If n is 1, then any number is a simple power of n\n    if n == 1:\n        return True\n    \n    # If x is 1, then x is a simple power of n only if n is 1\n    if x == 1:\n        return n == 1\n    \n    # Otherwise, compute the logarithm of x with base n\n    k = int(round(math.log(x, n)))\n    \n    # If x is a simple power of n, then n**k = x\n    return n**k == x\n",
        "test": "assert is_simple_power(3, 2) == False",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number. Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    for i in range(1, abs(a) + 1):\n        if i ** 3 == abs(a):\n            return True\n    return False\n",
        "test": "assert iscube(1) == True",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 78,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    count = 0\n    primes = [2, 3, 5, 7, 11, 13]\n    for hex_digit in num:\n        if hex_digit in \"0123456789\":\n            if int(hex_digit) in primes:\n                count += 1\n        elif hex_digit in \"ABCDEF\":\n            decimal_digit = int(hex_digit, 16)\n            if decimal_digit in primes:\n                count += 1\n    return count\n",
        "test": "assert hex_key(\"AB\") == 1",
        "num_ids": 2026,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts decimal number to binary number as a string with 'db' at the beginning and end of the string.\n\n    :param decimal: Decimal number to be converted to binary.\n    :return: Binary number as a string with 'db' at the beginning and end of the string.\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n",
        "test": "assert decimal_to_binary(15) == \"db1111db\"",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n",
        "test": "assert is_happy('a') == False",
        "num_ids": 1110,
        "indeed": true
    },
    {
        "number": 81,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n            GPA        |   Letter grade\n            4.0             A+\n            > 3.7         A\n            > 3.3         A-\n            > 3.0         B+\n            > 2.7         B\n            > 2.3         B-\n            > 2.0         C+\n            > 1.7         C\n            > 1.3         C-\n            > 1.0         D+\n            > 0.7         D\n            > 0.0         D-\n            0.0         E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade > 3.7:\n            letter_grades.append(\"A\")\n        elif grade > 3.3:\n            letter_grades.append(\"A-\")\n        elif grade > 3.0:\n            letter_grades.append(\"B+\")\n        elif grade > 2.7:\n            letter_grades.append(\"B\")\n        elif grade > 2.3:\n            letter_grades.append(\"B-\")\n        elif grade > 2.0:\n            letter_grades.append(\"C+\")\n        elif grade > 1.7:\n            letter_grades.append(\"C\")\n        elif grade > 1.3:\n            letter_grades.append(\"C-\")\n        elif grade > 1.0:\n            letter_grades.append(\"D+\")\n        elif grade > 0.7:\n            letter_grades.append(\"D\")\n        elif grade > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    \n    return letter_grades\n",
        "test": "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
        "num_ids": 4365,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"Returns True if n is a prime number, False otherwise\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Returns True if the length of the string is a prime number, False otherwise\"\"\"\n    length = len(string)\n    return is_prime(length)\n",
        "test": "assert prime_length('') == False # Empty string length is not prime",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or i // 10 == 1:\n            count += 1\n    return count\n",
        "test": "assert starts_one_ends(1) == 1",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a string of binary number\n    \"\"\"\n\n    # Convert the integer to binary string\n    binary = bin(N)[2:]\n\n    # Initialize the sum to 0\n    binary_sum = 0\n\n    # Iterate through each digit in the binary string\n    for digit in binary:\n        # Add the binary value of the digit to the sum\n        binary_sum += int(digit)\n\n    # Convert the binary sum to binary string\n    binary_sum = bin(binary_sum)[2:]\n\n    return binary_sum",
        "test": "assert solve(1) == \"1\"",
        "num_ids": 1398,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
        "test": "assert add([]) == 0",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def anti_shuffle(s):\n    # Split the string into words\n    words = s.split()\n\n    # Loop through each word and sort its characters\n    sorted_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        sorted_words.append(sorted_word)\n\n    # Join the sorted words back together with spaces\n    return ' '.join(sorted_words)\n",
        "test": "assert anti_shuffle('a') == 'a'",
        "num_ids": 1493,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "test": "assert get_row([], 1) == []",
        "num_ids": 2299,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Create a copy of the given array to avoid modifying the original array\n    sorted_array = array.copy()\n\n    # Check if the sum of the first and last element is odd or even\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 1:\n        # Sort the array in ascending order\n        sorted_array.sort()\n    else:\n        # Sort the array in descending order\n        sorted_array.sort(reverse=True)\n\n    return sorted_array\n",
        "test": "assert sort_array([5]) == [5]",
        "num_ids": 2216,
        "indeed": false
    },
    {
        "number": 89,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    new_string = ''\n    for letter in s:\n        if letter.isalpha():\n            new_letter = chr((ord(letter) - 97 + 2 * 2) % 26 + 97)\n            new_string += new_letter\n        else:\n            new_string += letter\n    return new_string\n",
        "test": "assert encrypt('') == ''",
        "num_ids": 1894,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "test": "assert next_smallest([]) == None",
        "num_ids": 1445,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the input string into sentences\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences]\n    \n    # Count the number of boredoms\n    boredoms = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            boredoms += 1\n    \n    return boredoms\n",
        "test": "assert is_bored(\"Hello world\") == 0",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two,\n    and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n    '''\n\n    # Check if all three inputs are integers\n    if all(isinstance(i, int) for i in [x, y, z]):\n        # Check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert any_int(5, 2, 7) == True",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    \n    for char in message:\n        if char in vowels:\n            new_char = chr(((ord(char) - 65 + 2) % 26) + 65) if char.isupper() else chr(((ord(char) - 97 + 2) % 26) + 97)\n        else:\n            new_char = char.swapcase()\n        \n        encoded_message += new_char\n        \n    return encoded_message\n",
        "test": "assert encode('The quick brown fox jumps over the lazy dog') == 'tH NQNB VRGU FXMU SB PD YTH RZXL CKA'",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 94,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    import math\n    \n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return None\n    max_prime = max(primes)\n    return sum(map(int, str(max_prime)))\n",
        "test": "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
        "num_ids": 2642,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    # check if the dictionary is empty\n    if not dict:\n        return False\n\n    # check if all keys are strings\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n\n    # check if all keys are in lower case or upper case\n    lower_case = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    upper_case = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n\n    return lower_case or upper_case\n",
        "test": "assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True",
        "num_ids": 2310,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    primes = []\n    num = 2\n    while len(primes) < n and num < n:\n        # check if num is prime\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes\n",
        "test": "assert count_up_to(0) == []",
        "num_ids": 1410,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the product of their unit digits.\n    \"\"\"\n    # get the unit digits of a and b\n    a_unit = a % 10\n    b_unit = b % 10\n    \n    # if either of the units is zero, return zero\n    if a_unit == 0 or b_unit == 0:\n        return 0\n    \n    # calculate the product of the units\n    product = a_unit * b_unit\n    \n    return product\n",
        "test": "assert multiply(148, 412) == 16",
        "num_ids": 1003,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "test": "assert count_upper('aBCdEf') == 1",
        "num_ids": 918,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n\n    # Convert the string value to a float\n    float_value = float(value)\n\n    # Check if the decimal part is greater than or equal to 0.5\n    if float_value % 1 >= 0.5:\n        # If it is, round up to the nearest integer\n        int_value = int(float_value + 0.5)\n    else:\n        # Otherwise, round down to the nearest integer\n        int_value = int(float_value)\n\n    # Return the integer value\n    return int_value\n",
        "test": "assert closest_integer(\"10\") == 10",
        "num_ids": 1819,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    while len(pile) < n:\n        if n % 2 == 0:\n            pile.append(pile[-1] + 2)\n        else:\n            pile.append(pile[-1] + 1)\n    return pile\n",
        "test": "assert make_a_pile(1) == [1]",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.replace(\",\", \" \").split()\n",
        "test": "assert words_string(\"Hello world\") == [\"Hello\", \"world\"]",
        "num_ids": 1418,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    \n    # Check if there is an even number in the range [x, y]\n    if x % 2 == 0:\n        even_in_range = x\n    else:\n        even_in_range = x + 1\n    \n    # Find the smallest even number that is bigger than x\n    while even_in_range % 2 != 0:\n        even_in_range += 1\n        \n    # If the smallest even number is greater than y, return -1\n    if even_in_range > y:\n        return -1\n    \n    # If there is an even number in the range [x, y], return the biggest one\n    while even_in_range <= y:\n        if even_in_range % 2 == 0:\n            result = even_in_range\n        even_in_range += 1\n    \n    return result\n",
        "test": "assert choose_num(12, 15) == 14",
        "num_ids": 1663,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    if n > m:\n        return -1\n    else:\n        total = sum(range(n, m+1))\n        avg = round(total / (m-n+1))\n        return bin(avg)\n",
        "test": "assert rounded_avg(1, 5) == \"0b11\"",
        "num_ids": 1309,
        "indeed": true
    },
    {
        "number": 104,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_digits(x):\n    result = []\n    for num in x:\n        if any(int(digit) % 2 == 0 for digit in str(num)):\n            continue\n        result.append(num)\n    return sorted(result)\n",
        "test": "assert unique_digits([152, 323, 1422, 10]) == []",
        "num_ids": 1429,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n                  -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n                  -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n    If the array is empty, return an empty array:\n    arr = []\n    return []\n\n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n                  -> sort arr -> [-1, 1, 55]\n                  -> reverse arr -> [55, 1, -1]\n    return = ['One']\n    \"\"\"\n\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n\n    # Filter out the numbers between 1 and 9\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num)\n\n    # Sort the filtered numbers and reverse the result\n    result.sort(reverse=True)\n\n    # Replace the numbers with their corresponding names\n    for i in range(len(result)):\n        result[i] = names[result[i] - 1]\n\n    return result\n",
        "test": "assert by_length([]) == []",
        "num_ids": 2457,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # Even index, compute factorial\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Odd index, compute sum of numbers from 1 to i\n            total = 0\n            for j in range(1, i+1):\n                total += j\n            result.append(total)\n    return result\n",
        "test": "assert f(0) == []",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 107,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Checks if a given number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, returns a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n    \n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n                \n    return (even_palindromes, odd_palindromes)\n",
        "test": "assert even_odd_palindrome(12) == (4, 6)",
        "num_ids": 1816,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        # Ignore negative numbers\n        if num < 0:\n            continue\n        # Calculate sum of digits\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        # Check if sum of digits is greater than 0\n        if digit_sum > 0:\n            count += 1\n    return count\n",
        "test": "assert count_nums([]) == 0",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].\n    The numbers in the array will be randomly ordered.\n    Your task is to determine if it is possible to get an array sorted in non-decreasing order by performing the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    One right shift operation means shifting all elements of the array by one position in the right direction.\n    The last element of the array will be moved to the starting position in the array i.e. 0th index.\n    If it is possible to obtain the sorted array by performing the above operation then return True else return False.\n    If the given array is empty then return True.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given array by performing any number of right shift operations.\n    \n    \"\"\"\n    \n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    \n    # If the given array is already sorted, return True\n    if arr == sorted_arr:\n        return True\n    \n    # Create a copy of the given array\n    arr_copy = arr.copy()\n    \n    # Perform right shift operations until the array is sorted\n    for i in range(len(arr)):\n        if arr_copy == sorted_arr:\n            return True\n        \n        # Perform a right shift operation\n        arr_copy.append(arr_copy.pop(0))\n    \n    return False\n",
        "test": "assert move_one_ball([]) == True",
        "num_ids": 2646,
        "indeed": true
    },
    {
        "number": 110,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    even_lst1 = all(x % 2 == 0 for x in lst1)\n\n    if even_lst1:\n        return \"YES\"\n\n    for num in lst1:\n        if num % 2 != 0:\n            for i in range(len(lst2)):\n                if lst2[i] % 2 == 0:\n                    lst1[lst1.index(num)] = lst2[i]\n                    lst2.pop(i)\n                    return exchange(lst1, lst2)\n    return \"NO\"\n",
        "test": "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
        "num_ids": 2297,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters,\n    return a dictionary of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    \n    # Split the string into a list of letters\n    letters = test.split()\n    \n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Loop through each letter in the list\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in counts:\n            counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            counts[letter] = 1\n    \n    # Find the maximum count\n    max_count = max(counts.values())\n    \n    # Create an empty dictionary to store the letters with the maximum count\n    result = {}\n    \n    # Loop through each letter in the dictionary\n    for letter in counts:\n        # If the count of the letter is equal to the maximum count, add it to the result dictionary\n        if counts[letter] == max_count:\n            result[letter] = counts[letter]\n    \n    return result\n",
        "test": "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
        "num_ids": 2247,
        "indeed": false
    },
    {
        "number": 112,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example:\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Deleting the characters from s that are present in c\n    for char in c:\n        s = s.replace(char, '')\n\n    # Checking if the result string is palindrome\n    result = s[::-1]\n    is_palindrome = s == result\n\n    return s, is_palindrome\n",
        "test": "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
        "num_ids": 1506,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if int(lst[i][j]) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements in the string {i} of the input is {count}\")\n    return result\n",
        "test": "assert odd_count(['1234567','987654321']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\",",
        "num_ids": 1977,
        "indeed": false
    },
    {
        "number": 114,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum",
        "test": "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def max_fill(grid, capacity):\n    import math\n    \n    # Calculate the total volume of water in the grid\n    total_volume = sum(row.count(1) for row in grid)\n    \n    # Calculate the maximum number of times the buckets can be lowered\n    max_lowers = math.ceil(total_volume / capacity)\n    \n    return max_lowers\n",
        "test": "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
        "num_ids": 2694,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(n):\n        count = 0\n        while n > 0:\n            if n & 1:\n                count += 1\n            n >>= 1\n        return count\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
        "test": "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]",
        "num_ids": 1716,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def is_valid_word(word, n):\n        \"\"\"Helper function to check if a word contains exactly n consonants\"\"\"\n        vowels = \"aeiouAEIOU\"\n        consonants = 0\n        for char in word:\n            if char not in vowels:\n                consonants += 1\n        return consonants == n\n\n    # Split the input string into words\n    words = s.split()\n\n    # Filter the words based on the given condition\n    result = list(filter(lambda word: is_valid_word(word, n), words))\n\n    return result\n",
        "test": "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
        "num_ids": 1734,
        "indeed": true
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    i = len(word) - 1\n    while i >= 0:\n        if word[i] in vowels:\n            if i > 0 and i < len(word) - 1 and word[i - 1] not in vowels and word[i + 1] not in vowels:\n                return word[i]\n        i -= 1\n    return \"\"",
        "test": "assert get_closest_vowel(\"yogurt\") == \"u\"",
        "num_ids": 1050,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_good(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            else:\n                if len(stack) == 0:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    return 'Yes' if is_good(lst[0] + lst[1]) else 'No'",
        "test": "assert match_parens([')', ')']) == 'No'",
        "num_ids": 2005,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Return the first k elements of the sorted array\n    return arr[:k]\n",
        "test": "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
        "num_ids": 1818,
        "indeed": false
    },
    {
        "number": 121,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    \n    sum = 0\n    \n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum += lst[i]\n            \n    return sum\n",
        "test": "assert solution([5, 8, 7, 1]) == 12",
        "num_ids": 1372,
        "indeed": true
    },
    {
        "number": 122,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def add_elements(arr, k):\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate over the first k elements of the array\n    for i in range(k):\n        # Check if the number of digits in the element is less than or equal to 2\n        if len(str(arr[i])) <= 2:\n            # Add the element to the sum\n            sum += arr[i]\n    \n    # Return the sum\n    return sum\n",
        "test": "assert add_elements([1, 2, 3, 4, 5], 5) == 15 ",
        "num_ids": 1835,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def collatz(n):\n    \"\"\"\n    Returns the collatz sequence for n.\n    \"\"\"\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sequence\n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    sequence = collatz(n)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_numbers)",
        "test": "assert get_odd_collatz(1) == [1]",
        "num_ids": 1325,
        "indeed": true
    },
    {
        "number": 124,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef valid_date(date):\n    # Check if date is not empty\n    if not date:\n        return False\n    \n    # Check if date is in the format mm-dd-yyyy\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    \n    # Extract month, day, and year from date string\n    month, day, year = map(int, date.split('-'))\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid based on the month\n    if month in [1,3,5,7,8,10,12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4,6,9,11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        elif day < 1 or day > 28:\n            return False\n    \n    # If all checks pass, return True\n    return True\n",
        "test": "assert valid_date('03-11-2000') == True, \"Test case failed for '03-11-2000'\"",
        "num_ids": 2412,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt.lower():\n            if ord('a') <= ord(char) <= ord('z'):\n                if (ord(char) - ord('a')) % 2 != 0:\n                    count += 1\n        return count\n",
        "test": "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    # Check if the list has more than one duplicate of the same number\n    for i in range(len(lst)):\n        if lst.count(lst[i]) > 1:\n            return False\n    \n    # Check if the list is sorted in ascending order\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    return True",
        "test": "assert is_sorted([5]) == True",
        "num_ids": 1973,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef intersection(interval1, interval2):\n    # Determine if the two intervals intersect\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n\n    # Determine the start and end of the intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Determine if the length is a prime number\n    if length <= 1:\n        return \"NO\"\n    elif length == 2:\n        return \"YES\"\n    else:\n        for i in range(2, int(math.sqrt(length))+1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n",
        "test": "assert intersection((-3, -1), (-5, 5)) == \"YES\"",
        "num_ids": 1945,
        "indeed": false
    },
    {
        "number": 128,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    else:\n        signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n        prod = 1\n        for sign in signs:\n            prod *= sign\n        magnitudes = [abs(x) for x in arr]\n        sum_magnitudes = sum(magnitudes)\n        return sum_magnitudes * prod\n",
        "test": "assert prod_signs([]) == None",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    from collections import defaultdict\n\n    def dfs(grid, row, col, path):\n        if len(path) == k:\n            return path\n        for d in [(-1, 0), (0, -1), (1, 0), (0, 1)]:\n            new_row, new_col = row + d[0], col + d[1]\n            if 0 <= new_row < len(grid) and 0 <= new_col < len(grid):\n                new_path = path[:]\n                new_path.append(grid[new_row][new_col])\n                min_path = dfs(grid, new_row, new_col, new_path)\n                if min_path is not None:\n                    return min_path\n        return None\n\n    # Find the starting cell\n    start_cell = None\n    for i in range(len(grid)):\n        for j in range(len(grid)):\n            if grid[i][j] == 1:\n                start_cell = (i, j)\n                break\n        if start_cell is not None:\n            break\n\n    # Initialize the DFS search\n    min_path = None\n    dfs_stack = [(start_cell, [1])]\n\n    # Perform DFS search\n    while dfs_stack:\n        (row, col), path = dfs_stack.pop()\n        min_path = dfs(grid, row, col, path)\n        if min_path is not None:\n            break\n\n    return min_path",
        "test": "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
        "num_ids": 3017,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tribonacci = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i / 2)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    return tribonacci\n",
        "test": "assert tri(2) == [1, 3, 2]",
        "num_ids": 1988,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        d = n % 10\n        if d % 2 == 1:\n            product *= d\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n",
        "test": "assert digits(1) == 1",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) % 2 == 1\n",
        "test": "assert is_nested('[]]]]]]][[[[[]') == False",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    \n    # Rounding each element in the list to the upper int(Ceiling)\n    rounded_lst = [math.ceil(num) for num in lst]\n    \n    # Calculating the sum of squared numbers in the list\n    sum_of_squares = sum([num**2 for num in rounded_lst])\n    \n    return sum_of_squares\n",
        "test": "assert sum_squares([1,2,3]) == 14",
        "num_ids": 1614,
        "indeed": true
    },
    {
        "number": 134,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n\n    words = txt.split()\n    if len(words) > 1 and not words[-1][-1].isalpha():\n        return False\n\n    return True",
        "test": "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def can_arrange(arr):\n    \"\"\"\n    Find the largest index of an element which is not greater than or\n    equal to the element immediately preceding it. If no such element\n    exists, return -1. The given array will not contain duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    if len(arr) < 2:\n        return -1\n\n    index = 1\n    max_index = -1\n\n    while index < len(arr):\n        if arr[index] <= arr[index - 1]:\n            max_index = index\n        index += 1\n\n    return max_index",
        "test": "assert can_arrange([1,2,3]) == -1, \"can_arrange([1,2,3]) should return -1\"",
        "num_ids": 1071,
        "indeed": true
    },
    {
        "number": 136,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list. If there is no negative or positive integers,\n    return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return largest_negative, smallest_positive\n",
        "test": "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
        "num_ids": 1902,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    try:\n        a_float = float(a)\n        b_float = float(b)\n        if a_float > b_float:\n            return a_float\n        elif b_float > a_float:\n            return b_float\n        else:\n            return None\n    except ValueError:\n        try:\n            a_float = float(a.replace(',', '.'))\n            b_float = float(b.replace(',', '.'))\n            if a_float > b_float:\n                return a.replace('.', ',')\n            elif b_float > a_float:\n                return b.replace('.', ',')\n            else:\n                return None\n        except ValueError:\n            return None\n",
        "test": "assert compare_one(\"1\", 1) == None",
        "num_ids": 1351,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 != 0:\n        return False\n    for i in range(2, n):\n        if i % 2 == 0:\n            for j in range(i, n):\n                if j % 2 == 0:\n                    for k in range(j, n):\n                        if k % 2 == 0:\n                            for l in range(k, n):\n                                if l % 2 == 0:\n                                    if i + j + k + l == n:\n                                        return True\n    return False\n",
        "test": "assert is_equal_to_sum_even(6) == False",
        "num_ids": 1593,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n",
        "test": "assert special_factorial(0) == 1",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    \n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Split the string into a list of words\n    words = text.split('_')\n    \n    # Check if there are more than 2 consecutive spaces\n    for i in range(len(words)):\n        if len(words[i]) > 2 and words[i][-1] == '-':\n            words[i] = words[i][:-1]\n    \n    # Join the words back together with underscores\n    return '_'.join(words)\n",
        "test": "assert fix_spaces(\"Example\") == \"Example\"",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def file_name_check(file_name):\n    # Check if there are more than three digits in the file name\n    if len(list(filter(str.isdigit, file_name))) > 3:\n        return 'No'\n    \n    # Split the file name into the part before the dot and the part after the dot\n    parts = file_name.split('.')\n    \n    # Check if there is exactly one dot in the file name\n    if len(parts) != 2:\n        return 'No'\n    \n    # Check if the part before the dot is not empty and starts with a letter\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the part after the dot is one of the allowed file types\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
        "test": "assert file_name_check(\"example.txt\") == 'Yes'",
        "num_ids": 2210,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] **= 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] **= 3\n        result += lst[i]\n    return result\n",
        "test": "assert sum_squares([1, 2, 3]) == 6",
        "num_ids": 1688,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Main function to find the words in the sentence whose length is prime\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)",
        "test": "assert words_in_sentence(\"This is a test\") == \"is\"",
        "num_ids": 1332,
        "indeed": true
    },
    {
        "number": 144,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef simplify(x, n):\n    \"\"\"Simplify the expression x * n.\"\"\"\n    # Extract numerator and denominator from x and n\n    m = re.match(r'(\\d+)/(\\d+)', x)\n    num_x, den_x = int(m.group(1)), int(m.group(2))\n    m = re.match(r'(\\d+)/(\\d+)', n)\n    num_n, den_n = int(m.group(1)), int(m.group(2))\n    \n    # Simplify the expression x * n\n    num = num_x * num_n\n    den = den_x * den_n\n    gcd = gcd_euclid(num, den)\n    num //= gcd\n    den //= gcd\n    \n    # Check if the simplified expression evaluates to a whole number\n    if num % den == 0:\n        return True\n    else:\n        return False\n\ndef gcd_euclid(a, b):\n    \"\"\"Return the greatest common divisor of a and b using the Euclidean algorithm.\"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert simplify(\"1/6\", \"2/1\") == False",
        "num_ids": 1811,
        "indeed": true
    },
    {
        "number": 145,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits. \n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list. \n\n    For example: \n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] \n    >>> order_by_points([]) == [] \n    \"\"\"\n\n    # define a function to calculate sum of digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # create a list of tuples with elements and their sum of digits\n    num_sums = [(num, sum_of_digits(num)) for num in nums]\n\n    # sort the list based on the sum of digits and index in original list\n    num_sums.sort(key=lambda x: (x[1], nums.index(x[0])))\n\n    # return the sorted list of integers\n    return [num for num, _ in num_sums]\n",
        "test": "assert order_by_points([]) == []",
        "num_ids": 2135,
        "indeed": false
    },
    {
        "number": 146,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count\n",
        "test": "assert specialFilter([15, -73, 14, -15]) == 1",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 147,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "test": "assert get_max_triples(5) == 1",
        "num_ids": 1462,
        "indeed": true
    },
    {
        "number": 148,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    i1 = planets.index(planet1)\n    i2 = planets.index(planet2)\n    if i1 > i2:\n        i1, i2 = i2, i1\n    return tuple(planets[i1+1:i2])",
        "test": "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
        "num_ids": 1546,
        "indeed": true
    },
    {
        "number": 149,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the filtered list by length and alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n\n    return sorted_list\n",
        "test": "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
        "num_ids": 1901,
        "indeed": true
    },
    {
        "number": 150,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n <= 1:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
        "test": "assert x_or_y(7, 34, 12) == 34",
        "num_ids": 1246,
        "indeed": true
    },
    {
        "number": 151,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            if num % 2 == 1:\n                total += num ** 2\n    return total",
        "test": "assert double_the_difference([1, 3, 2, 0]) == 10",
        "num_ids": 1649,
        "indeed": true
    },
    {
        "number": 152,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def compare(game, guess):\n    \"\"\"\n    Compare the guesses of a person with the actual scores of a number of matches.\n\n    :param game: An array of scores for a number of matches.\n    :param guess: An array of guesses for the same number of matches.\n    :return: An array of the same length denoting how far off each guess was.\n    \"\"\"\n    if len(game) != len(guess):\n        raise ValueError(\"Arrays 'game' and 'guess' must have the same length.\")\n\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n\n    return result\n",
        "test": "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
        "num_ids": 2135,
        "indeed": true
    },
    {
        "number": 153,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return class_name + '.' + strongest_extension\n",
        "test": "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
        "num_ids": 1896,
        "indeed": true
    },
    {
        "number": 154,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    b_rotations = []\n    for i in range(len(b)):\n        b_rotations.append(b[i:] + b[:i])\n    for rotation in b_rotations:\n        if rotation in a:\n            return True\n    return False\n",
        "test": "assert cycpattern_check(\"abcd\",\"abd\") == False, \"Incorrect output\"",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 155,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the integer to a string to count the number of even and odd digits\n    num_str = str(abs(num))\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through the string and count the number of even and odd digits\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)\n",
        "test": "assert even_odd_count(123) == (1, 2)",
        "num_ids": 1340,
        "indeed": true
    },
    {
        "number": 156,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def int_to_mini_roman(number):\n    # Define the mapping between integers and roman numeral symbols\n    mapping = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), (90, 'xc'),\n              (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n\n    # Initialize the result string\n    result = ''\n\n    # Iterate over the mapping and subtract the corresponding roman numeral symbol from the input number\n    for value, symbol in mapping:\n        while number >= value:\n            result += symbol\n            number -= value\n\n    # Return the result in lowercase\n    return result.lower()\n",
        "test": "assert int_to_mini_roman(1) == 'i'",
        "num_ids": 2024,
        "indeed": true
    },
    {
        "number": 157,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise. \n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Check if the triangle is possible with the given sides\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        # Check if the triangle is a right-angled triangle\n        if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n            return True\n    \n    return False\n",
        "test": "assert right_angle_triangle(1, 2, 3) == False, \"Error: The triangle (1, 2, 3) should not form a right-angle triangle.\"",
        "num_ids": 1663,
        "indeed": true
    },
    {
        "number": 158,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_word = word\n            max_count = count\n        elif count == max_count and word < max_word:\n            max_word = word\n    return max_word\n",
        "test": "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
        "num_ids": 1293,
        "indeed": true
    },
    {
        "number": 159,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def eat(number, need, remaining):\n    # Check if there are enough remaining carrots to satisfy the need\n    if need <= remaining:\n        # Calculate the total number of carrots eaten after the meals\n        total_eaten = number + need\n        # Calculate the number of carrots left after the meals\n        leftover = remaining - need\n    else:\n        # If not enough remaining carrots, eat all remaining carrots and return an empty leftover\n        total_eaten = number + remaining\n        leftover = 0\n    # Return the total number of eaten carrots and leftover\n    return [total_eaten, leftover]\n",
        "test": "assert eat(1, 10, 10) == [11, 0]",
        "num_ids": 1973,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Initializing expression with the first operand\n    expression = str(operand[0])\n\n    # Looping through the operator list and operand list\n    for i in range(1, len(operator)+1):\n        # Adding the operator to the expression\n        expression += operator[i-1]\n        # Adding the operand to the expression\n        expression += str(operand[i])\n\n    # Evaluating the expression using the eval() function\n    result = eval(expression)\n\n    # Returning the result\n    return result\n",
        "test": "assert do_algebra(['+'], [1, 2]) == 3",
        "num_ids": 2249,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def solve(s):\n    has_letter = False\n    result = \"\"\n    for i in s:\n        if i.isalpha():\n            has_letter = True\n            if i.islower():\n                result += i.upper()\n            else:\n                result += i.lower()\n        else:\n            result += i\n    if not has_letter:\n        result = result[::-1]\n    return result\n",
        "test": "assert solve(\"1234\") == \"4321\"",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        md5 = hashlib.md5(text.encode())\n        return md5.hexdigest()\n",
        "test": "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 1656,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b+1):\n        digits = [int(d) for d in str(i)]\n        for d in digits:\n            if d % 2 == 0 and d not in result:\n                result.append(d)\n    return result\n",
        "test": "assert generate_integers(2, 8) == [2, 4, 6, 8]",
        "num_ids": 1671,
        "indeed": false
    }
]